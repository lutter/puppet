#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.9
# from Racc grammer file "".
#

require 'racc/parser.rb'

require 'puppet'
require 'puppet/pops'

module Puppet
  class ParseError < Puppet::Error; end
  class ImportError < Racc::ParseError; end
  class AlreadyImportedError < ImportError; end
end

module Puppet
  module Pops
    module Parser
      class Parser < Racc::Parser

module_eval(<<'...end egrammar.ra/module_eval...', 'egrammar.ra', 767)

# Make emacs happy
# Local Variables:
# mode: ruby
# End:
...end egrammar.ra/module_eval...
##### State transition tables begin ###

clist = [
'60,63,325,-242,61,55,338,56,242,82,-241,-243,255,285,-130,113,326,-229',
'378,342,377,-240,382,103,18,106,284,101,102,243,43,285,46,138,49,12',
'282,48,37,40,343,45,38,10,11,-242,115,68,17,105,112,39,-241,-243,15',
'16,-130,254,114,-229,60,63,69,-240,61,55,139,56,44,113,231,83,36,64',
'113,66,67,65,283,231,50,51,53,52,18,47,402,54,113,320,43,285,46,261',
'49,117,-238,48,37,40,115,45,38,259,112,115,260,68,17,112,349,39,114',
'335,15,16,242,114,351,115,60,63,69,112,61,55,334,56,44,68,256,114,36',
'64,113,66,67,243,-238,234,50,51,53,52,18,47,378,54,377,232,43,272,46',
'256,49,12,324,48,37,40,71,45,38,10,11,115,359,68,17,112,360,39,368,280',
'15,16,281,114,274,275,60,63,69,362,61,55,242,56,44,74,75,76,36,64,113',
'66,67,263,262,321,50,51,53,52,18,47,365,54,320,320,43,370,46,371,49',
'12,113,48,37,40,261,45,38,10,11,115,314,68,17,112,231,39,60,63,15,16',
'61,114,77,79,78,80,69,81,375,310,379,115,44,381,308,112,36,64,113,66',
'67,109,81,114,50,51,53,52,82,47,242,54,60,63,221,220,61,55,389,56,419',
'82,103,68,106,307,101,102,391,115,123,243,280,112,73,103,18,106,158',
'101,102,114,43,315,46,235,49,12,105,48,37,40,242,45,38,10,11,155,242',
'68,17,105,153,39,256,68,15,16,395,73,83,68,123,243,69,398,84,85,280',
'243,44,81,401,83,36,64,124,66,67,81,81,123,50,51,53,52,82,47,405,54',
'60,63,381,407,61,55,408,56,417,82,103,409,106,410,101,102,81,413,414',
'415,81,280,73,103,18,106,423,101,102,70,43,425,46,426,49,12,105,48,37',
'40,427,45,38,10,11,310,,68,17,105,,39,,,15,16,,,,,60,63,69,,61,55,,56',
'44,,,,36,64,,66,67,,,,50,51,53,52,18,47,,54,,,43,,46,,49,117,,48,37',
'40,,45,38,,,,,68,17,,,39,,,15,16,,,,,60,63,69,,61,55,,56,44,,,,36,64',
',66,67,,,,50,51,53,52,18,47,,54,,,43,,46,,49,12,,48,37,40,,45,38,10',
'11,,,68,17,,,39,,,15,16,,,,,60,63,69,,61,55,,56,44,,,,36,64,,66,67,',
',,50,51,53,52,18,47,,54,,,43,,46,,49,12,,48,37,40,,45,38,10,11,,,68',
'17,,,39,,,15,16,,,,,,,69,,,,,,44,,,,36,64,,66,67,,,,50,51,53,52,82,47',
',54,60,63,,,61,55,,56,412,82,103,,106,,101,102,,,,,,,,103,18,106,,101',
'102,,43,,46,,49,12,105,48,37,40,,45,38,10,11,,,68,17,105,,39,,,15,16',
',,,,60,63,69,,61,55,,56,44,,,,36,64,,66,67,,,,50,51,53,52,18,47,,54',
',,43,,46,,49,117,,48,37,40,,45,38,,,,,68,17,,,39,,,15,16,,,,,60,63,69',
',61,55,,56,44,,,,36,64,,66,67,,,,50,51,53,52,18,47,,54,,,43,,46,,49',
'117,,48,37,40,,45,38,,,,,68,17,,,39,,,15,16,,,,,60,63,69,,61,55,,56',
'44,,,,36,64,,66,67,,,,50,51,53,52,18,47,,54,,,43,,46,,49,117,,48,37',
'40,,45,38,,,,,68,17,,,39,,,15,16,,,,,60,63,69,,61,55,,56,44,,,,36,64',
',66,67,,,,50,51,53,52,18,47,,54,,,43,,46,,49,12,,48,37,40,,45,38,10',
'11,,,68,17,,,39,,,15,16,,,,,60,63,69,,61,55,,56,44,,,,36,64,,66,67,',
',,50,51,53,52,18,47,,54,,,43,,46,,49,117,,48,37,40,,45,38,,,,,68,17',
',,39,,,15,16,,,,,60,63,69,,61,55,,56,44,,,,36,64,,66,67,,,,50,51,53',
'52,18,47,,54,,,43,,46,,49,117,,48,37,40,,45,38,,,,,68,17,,,39,,,15,16',
',,,,60,63,69,,61,55,,56,44,,,,36,64,,66,67,,,,50,51,53,52,18,47,,54',
',,43,,46,,49,117,,48,37,40,,45,38,,,,,68,17,,,39,,,15,16,,,,,60,63,69',
',61,55,,56,44,,,,36,64,,66,67,,,,50,51,53,52,18,47,,54,,,43,,46,,49',
'117,,48,37,40,,45,38,,,,,68,17,,,39,,,15,16,,,,,60,63,69,,61,55,,56',
'44,,,,36,64,,66,67,,,,50,51,53,52,18,47,,54,,,43,,46,,49,117,,48,37',
'40,,45,38,,,,,68,17,,,39,,,15,16,,,,,60,63,69,,61,55,,56,44,,,,36,64',
',66,67,,,,50,51,53,52,18,47,,54,,,43,,46,,49,12,,48,37,40,,45,38,10',
'11,,,68,17,,,39,,,15,16,,,,,60,63,69,,61,55,,56,44,,,,36,64,,66,67,',
',,50,51,53,52,18,47,,54,,,43,,46,,49,117,,48,37,40,,45,38,,,,,68,17',
',,39,,,15,16,,,,,60,63,69,,61,55,,56,44,,,,36,64,,66,67,,,,50,51,53',
'52,18,47,,54,,,43,,46,,49,117,,48,37,40,,45,38,,,,,68,17,,,39,,,15,16',
',,,,60,63,69,,61,55,142,56,44,,,,36,64,,66,67,,,,50,51,53,52,18,47,',
'54,,,43,,46,,49,12,,48,37,40,,45,38,10,11,,,68,17,,,39,,,15,16,,,,,60',
'63,69,,61,55,144,56,44,,,,36,64,,66,67,,,,50,51,53,52,18,47,,54,,,43',
',46,,49,12,,48,37,40,,45,38,10,11,,,68,17,,,39,,,15,16,,,,,,,69,,,,',
',44,,,,36,64,,66,67,,,,50,51,53,52,,47,,54,60,63,,,61,55,,56,146,,,',
',,,,,,,,,,,,18,,,,,,43,,46,,49,12,,48,37,40,,45,38,10,11,,,68,17,,,39',
',,15,16,,,,,60,63,69,,61,55,,56,44,,,,36,64,,66,67,,,,50,51,53,52,18',
'47,,54,,,43,,46,,49,12,,48,37,40,,45,38,10,11,,,68,17,,,39,,,15,16,',
',,,60,63,69,,61,55,,56,44,,281,,36,64,,66,67,,,,50,51,53,52,18,47,,54',
',,43,,46,,49,117,,48,37,40,,45,38,,,,,68,17,,,39,,,15,16,,,,,,,69,,',
',,,44,,,,36,64,,66,67,,,,50,51,53,52,,47,,54,60,63,,,61,55,,56,146,',
',,,,,,,,,,,,,,18,,,,,,43,,46,,49,12,,48,37,40,,45,38,10,11,,,68,17,',
',39,,,15,16,,,,,60,63,69,,61,55,,157,44,,,,36,64,,66,67,,,,50,51,53',
'52,18,47,,54,,,43,,46,,49,117,,48,37,40,,45,38,,,,,68,17,,,39,,,15,16',
',,,,60,63,69,,61,55,,56,44,,,,36,64,,66,67,,,,50,51,53,52,18,47,,54',
',,43,,46,,49,117,,48,37,40,,45,38,,,,,68,17,,,39,,,15,16,,,,,60,63,69',
',61,55,,56,44,,,,36,64,,66,67,,,,50,51,53,52,18,47,,54,,,43,,46,,49',
'12,,48,37,40,,45,38,10,11,,,68,17,,,39,,,15,16,,,,,60,63,69,,61,55,',
'56,44,,,,36,64,,66,67,,,,50,51,53,52,18,47,,54,,,43,,46,,49,12,,48,37',
'40,,45,38,10,11,,,68,17,,,39,,,15,16,,,,,60,63,69,,61,55,,56,44,,,,36',
'64,,66,67,,,,50,51,53,52,18,47,,54,,,43,,46,,49,12,,48,37,40,,45,38',
'10,11,,,68,17,,,39,,,15,16,,,,,60,63,69,,61,55,,56,44,,,,36,64,,66,67',
',,,50,51,53,52,18,47,,54,,,43,,46,,49,12,,48,37,40,,45,38,10,11,,,68',
'17,,,39,,,15,16,,,,,60,63,69,,61,55,,56,44,,,,36,64,,66,67,,,,50,51',
'53,52,18,47,,54,,,43,,46,,49,12,,48,37,40,,45,38,10,11,,,68,17,,,39',
',,15,16,,,,,60,63,69,,61,55,,56,44,,,,36,64,,66,67,,,,50,51,53,52,18',
'47,,54,,,43,,46,,49,12,,48,37,40,,45,38,10,11,,,68,17,,,39,,,15,16,',
',,,60,63,69,,61,55,,56,44,,,,36,64,,66,67,,,,50,51,53,52,18,47,,54,',
',43,,46,,49,12,,48,37,40,,45,38,10,11,,,68,17,,,39,,,15,16,,,,,60,63',
'69,,61,55,,56,44,,,,36,64,,66,67,,,,50,51,53,52,18,47,,54,,,43,,46,',
'49,12,,48,37,40,,45,38,10,11,,,68,17,,,39,,,15,16,,,,,60,63,69,,61,55',
',56,44,,,,36,64,,66,67,,,,50,51,53,52,18,47,,54,,,43,,46,,49,12,,48',
'37,40,,45,38,10,11,,,68,17,,,39,,,15,16,,,,,60,63,69,,61,55,,56,44,',
',,36,64,,66,67,,,,50,51,53,52,18,47,,54,,,43,,46,,49,12,,48,37,40,,45',
'38,10,11,,,68,17,,,39,,,15,16,,,,,60,63,69,,61,55,,56,44,,,,36,64,,66',
'67,,,,50,51,53,52,18,47,,54,,,174,189,180,190,49,182,192,183,37,173',
',176,171,,,,,68,17,193,188,172,,,15,170,,,,60,63,,69,61,,,,191,175,',
',,36,64,,66,67,,,,184,185,187,186,,181,,54,60,63,,,61,55,,56,,,138,',
',135,,,,,,,,,,,18,,,,,,43,,46,69,49,117,,48,37,40,,45,38,139,64,,,68',
'17,,,39,,,15,16,,,,,60,63,69,,61,55,,56,44,,,,36,64,,66,67,,,,50,51',
'53,52,18,47,,54,,,43,,46,,49,117,,48,37,40,,45,38,,,,,68,17,,,39,,,15',
'16,,,,,60,63,69,,61,55,,56,44,,,,36,64,,66,67,,,,50,51,53,52,18,47,',
'54,,,43,,46,,49,117,,48,37,40,,45,38,,,,,68,17,,,39,,,15,16,,,,,60,63',
'69,,61,55,,56,44,,,,36,64,,66,67,,,,50,51,53,52,18,47,,54,,,43,,46,',
'49,117,,48,37,40,,45,38,,,,,68,17,,,39,,,15,16,,,,,60,63,69,,61,55,',
'56,44,,,,36,64,,66,67,,,,50,51,53,52,18,47,,54,,,43,,46,,49,117,,48',
'37,40,,45,38,,,,,68,17,,,39,,,15,16,,,,,60,63,69,,61,55,,56,44,,,,36',
'64,,66,67,,,,50,51,53,52,18,47,,54,,,43,,46,,49,117,,48,37,40,,45,38',
',,,,68,17,,,39,,,15,16,,,,,60,63,69,,61,55,,56,44,,,,36,64,,66,67,,',
',50,51,53,52,18,47,,54,,,43,,46,,49,117,,48,37,40,,45,38,,,,,68,17,',
',39,,,15,16,,,,,60,63,69,,61,55,,56,44,,,,36,64,,66,67,,,,50,51,53,52',
'18,47,,54,,,43,,46,,49,117,,48,37,40,,45,38,,,,,68,17,,,39,,,15,16,',
',,,60,63,69,,61,55,,56,44,,,,36,64,,66,67,,,,50,51,53,52,18,47,,54,',
',43,,46,,49,117,,48,37,40,,45,38,,,,,68,17,,,39,,,15,16,,,,,60,63,69',
',61,55,,56,44,,,,36,64,,66,67,,,,50,51,53,52,18,47,,54,,,43,,46,,49',
'117,,48,37,40,,45,38,,,,,68,17,,,39,,,15,16,,,,,60,63,69,,61,55,,56',
'44,,,,36,64,,66,67,,,,50,51,53,52,18,47,,54,,,43,,46,,49,117,,48,37',
'40,,45,38,,,,,68,17,,,39,,,15,16,,,,,60,63,69,,61,55,,56,44,,,,36,64',
',66,67,,,,50,51,53,52,18,47,,54,,,43,,46,,49,117,,48,37,40,,45,38,,',
',,68,17,,,39,,,15,16,,,,,60,63,69,,61,55,,56,44,,,,36,64,,66,67,,,,50',
'51,53,52,18,47,,54,,,43,,46,,49,117,,48,37,40,,45,38,,,,,68,17,,,39',
',,15,16,,,,,60,63,69,,61,55,,56,44,,,,36,64,,66,67,,,,50,51,53,52,18',
'47,,54,,,43,,46,,49,117,,48,37,40,,45,38,,,,,68,17,,,39,,,15,16,,,,',
'60,63,69,,61,55,,56,44,,,,36,64,,66,67,,,,50,51,53,52,18,47,,54,,,43',
',46,,49,117,,48,37,40,,45,38,,,,,68,17,,,39,,,15,16,,,,,60,63,69,,61',
'55,,56,44,,,,36,64,,66,67,,,,50,51,53,52,18,47,,54,,,43,,46,,49,117',
',48,37,40,,45,38,,,,,68,17,,,39,,,15,16,,,,,60,63,69,,61,55,,56,44,',
',,36,64,,66,67,,,,50,51,53,52,18,47,,54,,,43,,46,,49,117,,48,37,40,',
'45,38,,,,,68,17,,,39,,,15,16,,,,,60,63,69,,61,55,,56,44,,,,36,64,,66',
'67,,,,50,51,53,52,18,47,,54,,,43,,46,,49,117,,48,37,40,,45,38,,,,,68',
'17,,,39,,,15,16,,,,,60,63,69,,61,55,,56,44,,,,36,64,,66,67,,,,50,51',
'53,52,18,47,,54,,,43,,46,,49,117,,48,37,40,,45,38,,,,,68,17,,,39,,,15',
'16,,,,,60,63,69,,61,55,,56,44,,,,36,64,,66,67,,,,50,51,53,52,18,47,',
'54,,,43,,46,,49,117,,48,37,40,,45,38,,,,,68,17,,,39,,,15,16,,,,,,,69',
',,,,,44,,,217,36,64,,66,67,,,,50,51,53,52,,47,,54,60,63,,,61,55,,56',
',,,,,,,,,,,,,,,,18,219,,,,,43,,46,,49,12,,48,37,40,,45,38,10,11,,,68',
'17,,,39,,,15,16,,,,,60,63,69,,61,55,,56,44,,,,36,64,,66,67,,,,50,51',
'53,52,18,47,,54,,,43,,46,,49,12,,48,37,40,,45,38,10,11,,,68,17,,,39',
',,15,16,,,,,60,63,69,,61,55,,56,44,,,,36,64,,66,67,,,,50,51,53,52,18',
'47,,54,,,43,,46,,49,12,,48,37,40,,45,38,10,11,,,68,17,,,39,,,15,16,',
',,,60,63,69,,61,55,,56,44,,,,36,64,,66,67,,,,50,51,53,52,18,47,,54,',
',43,,46,,49,117,,48,37,40,,45,38,,,,,68,17,,,39,,,15,16,,,,,60,63,69',
',61,55,,56,44,,,,36,64,,66,67,,,,50,51,53,52,18,47,,54,,,43,,46,,49',
'117,,48,37,40,,45,38,,,,,68,17,,,39,,,15,16,,,,60,63,,69,61,,,,,44,',
',,36,64,,66,67,,,,50,51,53,52,,47,,54,60,63,,,61,55,,56,383,,138,,,135',
',,,,,,,,,,18,,,,,,43,,46,69,49,117,,48,37,40,,45,38,139,64,,,68,17,',
',39,,,15,16,,,,,60,63,69,,61,55,,56,44,,,,36,64,,66,67,,,,50,51,53,52',
'18,47,,54,,,43,,46,,49,12,,48,37,40,,45,38,10,11,,,68,17,,,39,,,15,16',
',,,,60,63,69,,61,55,,56,44,,,,36,64,,66,67,,,,50,51,53,52,18,47,,54',
',,43,,46,,49,117,,48,37,40,,45,38,,,,,68,17,,,39,,,15,16,,,,,60,63,69',
',61,55,,56,44,,,,36,64,,66,67,,,,50,51,53,52,18,47,,54,,,43,,46,,49',
'117,,48,37,40,,45,38,,,,,68,17,,,39,,,15,16,,,,,60,63,69,,61,55,,56',
'44,,,,36,64,,66,67,,,,50,51,53,52,18,47,,54,,,43,,46,,49,117,,48,37',
'40,,45,38,,,,,68,17,,,39,,,15,16,,,,,60,63,69,,61,55,,56,44,,,,36,64',
',66,67,,,,50,51,53,52,18,47,,54,,,43,,46,,49,117,,48,37,40,,45,38,,',
',,68,17,,,39,,,15,16,,,,,60,63,69,,61,55,,56,44,,,,36,64,,66,67,,,,50',
'51,53,52,18,47,,54,,,43,,46,,49,117,,48,37,40,,45,38,,,,,68,17,,,39',
',,15,16,,,,,60,63,69,,61,55,,56,44,,,,36,64,,66,67,,,,50,51,53,52,18',
'47,,54,,,43,,46,,49,117,,48,37,40,,45,38,,,,,68,17,,,39,,,15,16,,,,',
'60,63,69,,61,55,,56,44,,,,36,64,,66,67,,,,50,51,53,52,18,47,,54,,,43',
',46,,49,117,,48,37,40,,45,38,,,,,68,17,,,39,,,15,16,,,,,60,63,69,,61',
'55,,56,44,,,,36,64,,66,67,,,,50,51,53,52,18,47,,54,,,43,,46,,49,117',
',48,37,40,,45,38,,,,,68,17,,,39,,,15,16,,,,,60,63,69,,61,55,,56,44,',
',,36,64,,66,67,,,,50,51,53,52,18,47,,54,,,43,,46,,49,117,,48,37,40,',
'45,38,,,,,68,17,,,39,,,15,16,,,,,,,69,,,,,,44,,,,36,64,,66,67,,,,50',
'51,53,52,,47,,54,60,63,,,61,55,,56,298,189,297,190,,295,192,299,,292',
',294,296,,,,18,247,,193,188,300,43,,46,293,49,12,,48,37,40,,45,38,10',
'11,191,301,68,17,,,39,,,15,16,,,304,305,303,302,69,306,,,,,44,,,,36',
'64,,66,67,,,,50,51,53,52,,47,,54,60,63,,,61,55,,56,318,82,,,,,,,,,,',
',,,103,18,106,,101,102,,43,,46,,49,12,,48,37,40,,45,38,10,11,,,68,17',
'105,,39,,,15,16,,,,,,,69,,84,85,,,44,,,83,36,64,,66,67,,,,50,51,53,52',
',47,,54,60,63,,,61,55,,56,328,82,,,,,,,,,,,,,,103,18,106,,101,102,,43',
',46,,49,12,,48,37,40,,45,38,10,11,,,68,17,105,,39,,,15,16,,,,,,,69,',
'84,85,,,44,,,83,36,64,,66,67,,,,50,51,53,52,,47,,54,60,63,,,61,55,,56',
'330,,,,,,,,,,,,,,,,18,,,,,,43,,46,,49,12,,48,37,40,,45,38,10,11,,,68',
'17,,,39,,,15,16,,,,,60,63,69,,61,55,,56,44,,,,36,64,,66,67,,,,50,51',
'53,52,18,47,,54,,,43,,46,,49,12,,48,37,40,,45,38,10,11,,,68,17,,,39',
',,15,16,,,,,60,63,69,,61,55,,56,44,,,,36,64,,66,67,,,,50,51,53,52,18',
'47,,54,,,43,,46,,49,12,,48,37,40,,45,38,10,11,,,68,17,,,39,,,15,16,',
',,,,,69,,,,,,44,,,,36,64,,66,67,,,,50,51,53,52,,47,,54,60,63,,,61,55',
',56,344,,,,,,,,,,,,,,,,18,,,,,,43,,46,,49,12,,48,37,40,,45,38,10,11',
',,68,17,,,39,,,15,16,,,,,60,63,69,,61,55,,56,44,,,,36,64,,66,67,,,,50',
'51,53,52,18,47,,54,,,43,,46,,49,117,,48,37,40,,45,38,,,,,68,17,,,39',
',,15,16,,,,,60,63,69,,61,55,,56,44,,,,36,64,,66,67,,,,50,51,53,52,18',
'47,,54,,,43,,46,,49,12,,48,37,40,,45,38,10,11,,,68,17,,,39,,,15,16,',
',,,,,69,,,,,,44,,,,36,64,,66,67,82,,250,50,51,53,52,,47,,54,,98,93,103',
',106,,101,102,,94,96,95,97,,60,63,,,61,,,,,,,,,,105,,,,100,99,,,86,87',
'89,88,91,92,,84,85,82,,249,,,83,,,138,,,135,98,93,103,,106,,101,102',
',94,96,95,97,,,90,,,,69,,,,,,,,,105,139,64,,100,99,,,86,87,89,88,91',
'92,,84,85,82,,248,,,83,,,,,,,98,93,103,,106,,101,102,,94,96,95,97,,',
'90,,,,,,,,,,,,,105,,,,100,99,,,86,87,89,88,91,92,82,84,85,,,,,,83,,',
',98,93,103,311,106,,101,102,,94,96,95,97,,,,,,90,,,,,,,,,,105,,,,100',
'99,,82,86,87,89,88,91,92,,84,85,,,98,93,103,83,106,,101,102,,94,96,95',
'97,,,,,,,,,,,,,90,,,105,,,,100,99,,82,86,87,89,88,91,92,,84,85,,,98',
'93,103,83,106,,101,102,,94,96,95,97,,,,,,,,,,,,,90,,,105,,,,100,99,',
'82,86,87,89,88,91,92,,84,85,,,98,93,103,83,106,,101,102,,94,96,95,97',
',,,,,,,,,,,,90,,,105,,,,100,99,,82,86,87,89,88,91,92,,84,85,,,98,93',
'103,83,106,,101,102,,94,96,95,97,,,,,,,,,,,,,90,,,105,,,,100,99,,82',
'86,87,89,88,91,92,,84,85,,,98,93,103,83,106,,101,102,,94,96,95,97,,274',
'275,,,,,,,,,,90,,,105,,,,100,99,,,86,87,89,88,91,92,82,84,85,,,286,',
',83,,,,98,93,103,,106,,101,102,,94,96,95,97,,,,,,90,,,,,,,,,,105,,,',
'100,99,,82,86,87,89,88,91,92,,84,85,,,98,93,103,83,106,,101,102,82,94',
'96,95,97,,,,,,,,98,93,103,,106,90,101,102,105,94,96,95,97,99,,,86,87',
'89,88,91,92,,84,85,,,,105,,83,,,,,82,86,87,89,88,91,92,,84,85,,,,93',
'103,83,106,90,101,102,82,94,,,,,,,,,,,,93,103,,106,90,101,102,105,94',
',,,,,,86,87,89,88,91,92,,84,85,,,,105,,83,,,,,,86,87,89,88,91,92,82',
'84,85,,,,,,83,,90,,98,93,103,278,106,,101,102,82,94,96,95,97,,,,,,90',
',,93,103,,106,,101,102,105,94,,,100,99,,,86,87,89,88,91,92,,84,85,,',
',105,,83,,,,,82,86,87,89,88,91,92,,84,85,,,98,93,103,83,106,90,101,102',
'82,94,96,95,97,,,,,,,,,93,103,,106,90,101,102,105,94,,,100,99,,82,86',
'87,89,88,91,92,,84,85,,,,105,103,83,106,,101,102,82,86,87,89,88,91,92',
',84,85,,,,,103,83,106,90,101,102,105,,,,,,,82,86,87,89,88,91,92,,84',
'85,90,,,105,103,83,106,,101,102,82,86,87,89,88,91,92,,84,85,,,98,93',
'103,83,106,90,101,102,105,94,96,95,97,,,,86,87,89,88,,,,84,85,90,,,105',
',83,,100,99,,82,86,87,89,88,91,92,,84,85,,,98,93,103,83,106,90,101,102',
',94,96,95,97,,,,,,,,,,,,,90,,,105,,,,100,99,,82,86,87,89,88,91,92,,84',
'85,,,98,93,103,83,106,82,101,102,,94,96,95,97,,,,,,,103,,106,,101,102',
'90,,,105,,,,100,99,,,86,87,89,88,91,92,,84,85,105,,,,,83,,82,86,87,89',
'88,,,,84,85,,,,,103,83,106,,101,102,90,,,,,82,,,,,,,,,,,,90,,103,105',
'106,,101,102,82,,,,,89,88,,,,84,85,98,93,103,,106,83,101,102,105,94',
'96,95,97,,,,60,63,89,88,61,,,84,85,,,90,105,,83,,100,99,,,86,87,89,88',
'91,92,,84,85,,,,,,83,,90,,,138,,,135,,,,298,189,297,190,,295,192,299',
',292,90,294,296,,,,69,,,193,188,300,,,,293,139,64,,,,,,,,,,191,301,',
',,,,,,,,,,304,305,303,302,,306,298,189,297,190,,295,192,299,,292,,294',
'296,,,,,,,193,188,300,,,,293,,,,,,,,,,,,191,301,,,,,,,,,,,,304,305,303',
'302,,306,298,189,297,190,,295,192,299,,292,,294,296,,,,,,,193,188,300',
',,,293,,,,,,,,,,,,191,301,,,,,,,,,,,,304,305,303,302,,306' ]
        racc_action_table = arr = ::Array.new(6812, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

clist = [
'0,0,246,184,0,0,253,0,244,198,187,185,133,331,173,47,246,171,328,257',
'328,186,331,198,0,198,195,198,198,244,0,195,0,255,0,0,179,0,0,0,258',
'0,0,0,0,184,47,0,0,198,47,0,187,185,0,0,173,131,47,171,414,414,0,186',
'414,414,255,414,0,180,130,198,0,0,181,0,0,0,179,129,0,0,0,0,414,0,374',
'0,182,271,414,374,414,276,414,414,172,414,414,414,180,414,414,145,180',
'181,145,414,414,181,277,414,180,252,414,414,155,181,279,182,4,4,414',
'182,4,4,251,4,414,155,141,182,414,414,314,414,414,155,172,122,414,414',
'414,414,4,414,375,414,375,120,4,155,4,143,4,4,245,4,4,4,4,4,4,4,4,314',
'287,4,4,314,289,4,314,291,4,4,293,314,349,349,408,408,4,309,408,408',
'243,408,4,7,7,7,4,4,117,4,4,150,150,242,4,4,4,4,408,4,312,4,236,316',
'408,317,408,319,408,408,46,408,408,408,148,408,408,408,408,117,229,408',
'408,117,110,408,153,153,408,408,153,117,7,7,7,7,408,108,327,226,329',
'46,408,330,225,46,408,408,12,408,408,12,107,46,408,408,408,408,197,408',
'123,408,407,407,104,103,407,407,336,407,407,201,197,123,197,223,197',
'197,348,12,219,123,350,12,72,201,407,201,70,201,201,12,407,231,407,123',
'407,407,197,407,407,407,231,407,407,407,407,65,320,407,407,201,64,407',
'218,231,407,407,358,159,197,320,360,231,407,361,201,201,364,320,407',
'164,369,201,407,407,42,407,407,165,166,41,407,407,407,407,116,407,378',
'407,405,405,379,381,405,405,382,405,405,196,116,385,116,388,116,116',
'167,393,394,400,8,169,5,196,405,196,411,196,196,1,405,416,405,418,405',
'405,116,405,405,405,420,405,405,405,405,424,,405,405,196,,405,,,405',
'405,,,,,176,176,405,,176,176,,176,405,,,,405,405,,405,405,,,,405,405',
'405,405,176,405,,405,,,176,,176,,176,176,,176,176,176,,176,176,,,,,176',
'176,,,176,,,176,176,,,,,10,10,176,,10,10,,10,176,,,,176,176,,176,176',
',,,176,176,176,176,10,176,,176,,,10,,10,,10,10,,10,10,10,,10,10,10,10',
',,10,10,,,10,,,10,10,,,,,11,11,10,,11,11,,11,10,,,,10,10,,10,10,,,,10',
'10,10,10,11,10,,10,,,11,,11,,11,11,,11,11,11,,11,11,11,11,,,11,11,,',
'11,,,11,11,,,,,,,11,,,,,,11,,,,11,11,,11,11,,,,11,11,11,11,118,11,,11',
'389,389,,,389,389,,389,389,119,118,,118,,118,118,,,,,,,,119,389,119',
',119,119,,389,,389,,389,389,118,389,389,389,,389,389,389,389,,,389,389',
'119,,389,,,389,389,,,,,15,15,389,,15,15,,15,389,,,,389,389,,389,389',
',,,389,389,389,389,15,389,,389,,,15,,15,,15,15,,15,15,15,,15,15,,,,',
'15,15,,,15,,,15,15,,,,,16,16,15,,16,16,,16,15,,,,15,15,,15,15,,,,15',
'15,15,15,16,15,,15,,,16,,16,,16,16,,16,16,16,,16,16,,,,,16,16,,,16,',
',16,16,,,,,17,17,16,,17,17,,17,16,,,,16,16,,16,16,,,,16,16,16,16,17',
'16,,16,,,17,,17,,17,17,,17,17,17,,17,17,,,,,17,17,,,17,,,17,17,,,,,18',
'18,17,,18,18,,18,17,,,,17,17,,17,17,,,,17,17,17,17,18,17,,17,,,18,,18',
',18,18,,18,18,18,,18,18,18,18,,,18,18,,,18,,,18,18,,,,,377,377,18,,377',
'377,,377,18,,,,18,18,,18,18,,,,18,18,18,18,377,18,,18,,,377,,377,,377',
'377,,377,377,377,,377,377,,,,,377,377,,,377,,,377,377,,,,,175,175,377',
',175,175,,175,377,,,,377,377,,377,377,,,,377,377,377,377,175,377,,377',
',,175,,175,,175,175,,175,175,175,,175,175,,,,,175,175,,,175,,,175,175',
',,,,43,43,175,,43,43,,43,175,,,,175,175,,175,175,,,,175,175,175,175',
'43,175,,175,,,43,,43,,43,43,,43,43,43,,43,43,,,,,43,43,,,43,,,43,43',
',,,,44,44,43,,44,44,,44,43,,,,43,43,,43,43,,,,43,43,43,43,44,43,,43',
',,44,,44,,44,44,,44,44,44,,44,44,,,,,44,44,,,44,,,44,44,,,,,45,45,44',
',45,45,,45,44,,,,44,44,,44,44,,,,44,44,44,44,45,44,,44,,,45,,45,,45',
'45,,45,45,45,,45,45,,,,,45,45,,,45,,,45,45,,,,,365,365,45,,365,365,',
'365,45,,,,45,45,,45,45,,,,45,45,45,45,365,45,,45,,,365,,365,,365,365',
',365,365,365,,365,365,365,365,,,365,365,,,365,,,365,365,,,,,359,359',
'365,,359,359,,359,365,,,,365,365,,365,365,,,,365,365,365,365,359,365',
',365,,,359,,359,,359,359,,359,359,359,,359,359,,,,,359,359,,,359,,,359',
'359,,,,,174,174,359,,174,174,,174,359,,,,359,359,,359,359,,,,359,359',
'359,359,174,359,,359,,,174,,174,,174,174,,174,174,174,,174,174,,,,,174',
'174,,,174,,,174,174,,,,,54,54,174,,54,54,54,54,174,,,,174,174,,174,174',
',,,174,174,174,174,54,174,,174,,,54,,54,,54,54,,54,54,54,,54,54,54,54',
',,54,54,,,54,,,54,54,,,,,55,55,54,,55,55,55,55,54,,,,54,54,,54,54,,',
',54,54,54,54,55,54,,54,,,55,,55,,55,55,,55,55,55,,55,55,55,55,,,55,55',
',,55,,,55,55,,,,,,,55,,,,,,55,,,,55,55,,55,55,,,,55,55,55,55,,55,,55',
'56,56,,,56,56,,56,56,,,,,,,,,,,,,,,,56,,,,,,56,,56,,56,56,,56,56,56',
',56,56,56,56,,,56,56,,,56,,,56,56,,,,,62,62,56,,62,62,,62,56,,,,56,56',
',56,56,,,,56,56,56,56,62,56,,56,,,62,,62,,62,62,,62,62,62,,62,62,62',
'62,,,62,62,,,62,,,62,62,,,,,170,170,62,,170,170,,170,62,,170,,62,62',
',62,62,,,,62,62,62,62,170,62,,62,,,170,,170,,170,170,,170,170,170,,170',
'170,,,,,170,170,,,170,,,170,170,,,,,,,170,,,,,,170,,,,170,170,,170,170',
',,,170,170,170,170,,170,,170,157,157,,,157,157,,157,157,,,,,,,,,,,,',
',,,157,,,,,,157,,157,,157,157,,157,157,157,,157,157,157,157,,,157,157',
',,157,,,157,157,,,,,67,67,157,,67,67,,67,157,,,,157,157,,157,157,,,',
'157,157,157,157,67,157,,157,,,67,,67,,67,67,,67,67,67,,67,67,,,,,67',
'67,,,67,,,67,67,,,,,217,217,67,,217,217,,217,67,,,,67,67,,67,67,,,,67',
'67,67,67,217,67,,67,,,217,,217,,217,217,,217,217,217,,217,217,,,,,217',
'217,,,217,,,217,217,,,,,71,71,217,,71,71,,71,217,,,,217,217,,217,217',
',,,217,217,217,217,71,217,,217,,,71,,71,,71,71,,71,71,71,,71,71,71,71',
',,71,71,,,71,,,71,71,,,,,154,154,71,,154,154,,154,71,,,,71,71,,71,71',
',,,71,71,71,71,154,71,,71,,,154,,154,,154,154,,154,154,154,,154,154',
'154,154,,,154,154,,,154,,,154,154,,,,,73,73,154,,73,73,,73,154,,,,154',
'154,,154,154,,,,154,154,154,154,73,154,,154,,,73,,73,,73,73,,73,73,73',
',73,73,73,73,,,73,73,,,73,,,73,73,,,,,74,74,73,,74,74,,74,73,,,,73,73',
',73,73,,,,73,73,73,73,74,73,,73,,,74,,74,,74,74,,74,74,74,,74,74,74',
'74,,,74,74,,,74,,,74,74,,,,,75,75,74,,75,75,,75,74,,,,74,74,,74,74,',
',,74,74,74,74,75,74,,74,,,75,,75,,75,75,,75,75,75,,75,75,75,75,,,75',
'75,,,75,,,75,75,,,,,76,76,75,,76,76,,76,75,,,,75,75,,75,75,,,,75,75',
'75,75,76,75,,75,,,76,,76,,76,76,,76,76,76,,76,76,76,76,,,76,76,,,76',
',,76,76,,,,,77,77,76,,77,77,,77,76,,,,76,76,,76,76,,,,76,76,76,76,77',
'76,,76,,,77,,77,,77,77,,77,77,77,,77,77,77,77,,,77,77,,,77,,,77,77,',
',,,78,78,77,,78,78,,78,77,,,,77,77,,77,77,,,,77,77,77,77,78,77,,77,',
',78,,78,,78,78,,78,78,78,,78,78,78,78,,,78,78,,,78,,,78,78,,,,,79,79',
'78,,79,79,,79,78,,,,78,78,,78,78,,,,78,78,78,78,79,78,,78,,,79,,79,',
'79,79,,79,79,79,,79,79,79,79,,,79,79,,,79,,,79,79,,,,,80,80,79,,80,80',
',80,79,,,,79,79,,79,79,,,,79,79,79,79,80,79,,79,,,80,,80,,80,80,,80',
'80,80,,80,80,80,80,,,80,80,,,80,,,80,80,,,,,81,81,80,,81,81,,81,80,',
',,80,80,,80,80,,,,80,80,80,80,81,80,,80,,,81,81,81,81,81,81,81,81,81',
'81,,81,81,,,,,81,81,81,81,81,,,81,81,,,,183,183,,81,183,,,,81,81,,,',
'81,81,,81,81,,,,81,81,81,81,,81,,81,82,82,,,82,82,,82,,,183,,,183,,',
',,,,,,,,82,,,,,,82,,82,183,82,82,,82,82,82,,82,82,183,183,,,82,82,,',
'82,,,82,82,,,,,83,83,82,,83,83,,83,82,,,,82,82,,82,82,,,,82,82,82,82',
'83,82,,82,,,83,,83,,83,83,,83,83,83,,83,83,,,,,83,83,,,83,,,83,83,,',
',,84,84,83,,84,84,,84,83,,,,83,83,,83,83,,,,83,83,83,83,84,83,,83,,',
'84,,84,,84,84,,84,84,84,,84,84,,,,,84,84,,,84,,,84,84,,,,,85,85,84,',
'85,85,,85,84,,,,84,84,,84,84,,,,84,84,84,84,85,84,,84,,,85,,85,,85,85',
',85,85,85,,85,85,,,,,85,85,,,85,,,85,85,,,,,86,86,85,,86,86,,86,85,',
',,85,85,,85,85,,,,85,85,85,85,86,85,,85,,,86,,86,,86,86,,86,86,86,,86',
'86,,,,,86,86,,,86,,,86,86,,,,,87,87,86,,87,87,,87,86,,,,86,86,,86,86',
',,,86,86,86,86,87,86,,86,,,87,,87,,87,87,,87,87,87,,87,87,,,,,87,87',
',,87,,,87,87,,,,,88,88,87,,88,88,,88,87,,,,87,87,,87,87,,,,87,87,87',
'87,88,87,,87,,,88,,88,,88,88,,88,88,88,,88,88,,,,,88,88,,,88,,,88,88',
',,,,89,89,88,,89,89,,89,88,,,,88,88,,88,88,,,,88,88,88,88,89,88,,88',
',,89,,89,,89,89,,89,89,89,,89,89,,,,,89,89,,,89,,,89,89,,,,,90,90,89',
',90,90,,90,89,,,,89,89,,89,89,,,,89,89,89,89,90,89,,89,,,90,,90,,90',
'90,,90,90,90,,90,90,,,,,90,90,,,90,,,90,90,,,,,91,91,90,,91,91,,91,90',
',,,90,90,,90,90,,,,90,90,90,90,91,90,,90,,,91,,91,,91,91,,91,91,91,',
'91,91,,,,,91,91,,,91,,,91,91,,,,,92,92,91,,92,92,,92,91,,,,91,91,,91',
'91,,,,91,91,91,91,92,91,,91,,,92,,92,,92,92,,92,92,92,,92,92,,,,,92',
'92,,,92,,,92,92,,,,,93,93,92,,93,93,,93,92,,,,92,92,,92,92,,,,92,92',
'92,92,93,92,,92,,,93,,93,,93,93,,93,93,93,,93,93,,,,,93,93,,,93,,,93',
'93,,,,,94,94,93,,94,94,,94,93,,,,93,93,,93,93,,,,93,93,93,93,94,93,',
'93,,,94,,94,,94,94,,94,94,94,,94,94,,,,,94,94,,,94,,,94,94,,,,,95,95',
'94,,95,95,,95,94,,,,94,94,,94,94,,,,94,94,94,94,95,94,,94,,,95,,95,',
'95,95,,95,95,95,,95,95,,,,,95,95,,,95,,,95,95,,,,,96,96,95,,96,96,,96',
'95,,,,95,95,,95,95,,,,95,95,95,95,96,95,,95,,,96,,96,,96,96,,96,96,96',
',96,96,,,,,96,96,,,96,,,96,96,,,,,97,97,96,,97,97,,97,96,,,,96,96,,96',
'96,,,,96,96,96,96,97,96,,96,,,97,,97,,97,97,,97,97,97,,97,97,,,,,97',
'97,,,97,,,97,97,,,,,98,98,97,,98,98,,98,97,,,,97,97,,97,97,,,,97,97',
'97,97,98,97,,97,,,98,,98,,98,98,,98,98,98,,98,98,,,,,98,98,,,98,,,98',
'98,,,,,99,99,98,,99,99,,99,98,,,,98,98,,98,98,,,,98,98,98,98,99,98,',
'98,,,99,,99,,99,99,,99,99,99,,99,99,,,,,99,99,,,99,,,99,99,,,,,100,100',
'99,,100,100,,100,99,,,,99,99,,99,99,,,,99,99,99,99,100,99,,99,,,100',
',100,,100,100,,100,100,100,,100,100,,,,,100,100,,,100,,,100,100,,,,',
'101,101,100,,101,101,,101,100,,,,100,100,,100,100,,,,100,100,100,100',
'101,100,,100,,,101,,101,,101,101,,101,101,101,,101,101,,,,,101,101,',
',101,,,101,101,,,,,,,101,,,,,,101,,,101,101,101,,101,101,,,,101,101',
'101,101,,101,,101,102,102,,,102,102,,102,,,,,,,,,,,,,,,,,102,102,,,',
',102,,102,,102,102,,102,102,102,,102,102,102,102,,,102,102,,,102,,,102',
'102,,,,,335,335,102,,335,335,,335,102,,,,102,102,,102,102,,,,102,102',
'102,102,335,102,,102,,,335,,335,,335,335,,335,335,335,,335,335,335,335',
',,335,335,,,335,,,335,335,,,,,334,334,335,,334,334,,334,335,,,,335,335',
',335,335,,,,335,335,335,335,334,335,,335,,,334,,334,,334,334,,334,334',
'334,,334,334,334,334,,,334,334,,,334,,,334,334,,,,,105,105,334,,105',
'105,,105,334,,,,334,334,,334,334,,,,334,334,334,334,105,334,,334,,,105',
',105,,105,105,,105,105,105,,105,105,,,,,105,105,,,105,,,105,105,,,,',
'106,106,105,,106,106,,106,105,,,,105,105,,105,105,,,,105,105,105,105',
'106,105,,105,,,106,,106,,106,106,,106,106,106,,106,106,,,,,106,106,',
',106,,,106,106,,,,48,48,,106,48,,,,,106,,,,106,106,,106,106,,,,106,106',
'106,106,,106,,106,332,332,,,332,332,,332,332,,48,,,48,,,,,,,,,,,332',
',,,,,332,,332,48,332,332,,332,332,332,,332,332,48,48,,,332,332,,,332',
',,332,332,,,,,325,325,332,,325,325,,325,332,,,,332,332,,332,332,,,,332',
'332,332,332,325,332,,332,,,325,,325,,325,325,,325,325,325,,325,325,325',
'325,,,325,325,,,325,,,325,325,,,,,109,109,325,,109,109,,109,325,,,,325',
'325,,325,325,,,,325,325,325,325,109,325,,325,,,109,,109,,109,109,,109',
'109,109,,109,109,,,,,109,109,,,109,,,109,109,,,,,324,324,109,,324,324',
',324,109,,,,109,109,,109,109,,,,109,109,109,109,324,109,,109,,,324,',
'324,,324,324,,324,324,324,,324,324,,,,,324,324,,,324,,,324,324,,,,,321',
'321,324,,321,321,,321,324,,,,324,324,,324,324,,,,324,324,324,324,321',
'324,,324,,,321,,321,,321,321,,321,321,321,,321,321,,,,,321,321,,,321',
',,321,321,,,,,310,310,321,,310,310,,310,321,,,,321,321,,321,321,,,,321',
'321,321,321,310,321,,321,,,310,,310,,310,310,,310,310,310,,310,310,',
',,,310,310,,,310,,,310,310,,,,,286,286,310,,286,286,,286,310,,,,310',
'310,,310,310,,,,310,310,310,310,286,310,,310,,,286,,286,,286,286,,286',
'286,286,,286,286,,,,,286,286,,,286,,,286,286,,,,,285,285,286,,285,285',
',285,286,,,,286,286,,286,286,,,,286,286,286,286,285,286,,286,,,285,',
'285,,285,285,,285,285,285,,285,285,,,,,285,285,,,285,,,285,285,,,,,283',
'283,285,,283,283,,283,285,,,,285,285,,285,285,,,,285,285,285,285,283',
'285,,285,,,283,,283,,283,283,,283,283,283,,283,283,,,,,283,283,,,283',
',,283,283,,,,,282,282,283,,282,282,,282,283,,,,283,283,,283,283,,,,283',
'283,283,283,282,283,,283,,,282,,282,,282,282,,282,282,282,,282,282,',
',,,282,282,,,282,,,282,282,,,,,281,281,282,,281,281,,281,282,,,,282',
'282,,282,282,,,,282,282,282,282,281,282,,282,,,281,,281,,281,281,,281',
'281,281,,281,281,,,,,281,281,,,281,,,281,281,,,,,,,281,,,,,,281,,,,281',
'281,,281,281,,,,281,281,281,281,,281,,281,124,124,,,124,124,,124,221',
'221,221,221,,221,221,221,,221,,221,221,,,,124,124,,221,221,221,124,',
'124,221,124,124,,124,124,124,,124,124,124,124,221,221,124,124,,,124',
',,124,124,,,221,221,221,221,124,221,,,,,124,,,,124,124,,124,124,,,,124',
'124,124,124,,124,,124,234,234,,,234,234,,234,234,202,,,,,,,,,,,,,,202',
'234,202,,202,202,,234,,234,,234,234,,234,234,234,,234,234,234,234,,',
'234,234,202,,234,,,234,234,,,,,,,234,,202,202,,,234,,,202,234,234,,234',
'234,,,,234,234,234,234,,234,,234,248,248,,,248,248,,248,248,203,,,,',
',,,,,,,,,203,248,203,,203,203,,248,,248,,248,248,,248,248,248,,248,248',
'248,248,,,248,248,203,,248,,,248,248,,,,,,,248,,203,203,,,248,,,203',
'248,248,,248,248,,,,248,248,248,248,,248,,248,249,249,,,249,249,,249',
'249,,,,,,,,,,,,,,,,249,,,,,,249,,249,,249,249,,249,249,249,,249,249',
'249,249,,,249,249,,,249,,,249,249,,,,,266,266,249,,266,266,,266,249',
',,,249,249,,249,249,,,,249,249,249,249,266,249,,249,,,266,,266,,266',
'266,,266,266,266,,266,266,266,266,,,266,266,,,266,,,266,266,,,,,261',
'261,266,,261,261,,261,266,,,,266,266,,266,266,,,,266,266,266,266,261',
'266,,266,,,261,,261,,261,261,,261,261,261,,261,261,261,261,,,261,261',
',,261,,,261,261,,,,,,,261,,,,,,261,,,,261,261,,261,261,,,,261,261,261',
'261,,261,,261,260,260,,,260,260,,260,260,,,,,,,,,,,,,,,,260,,,,,,260',
',260,,260,260,,260,260,260,,260,260,260,260,,,260,260,,,260,,,260,260',
',,,,250,250,260,,250,250,,250,260,,,,260,260,,260,260,,,,260,260,260',
'260,250,260,,260,,,250,,250,,250,250,,250,250,250,,250,250,,,,,250,250',
',,250,,,250,250,,,,,256,256,250,,256,256,,256,250,,,,250,250,,250,250',
',,,250,250,250,250,256,250,,250,,,256,,256,,256,256,,256,256,256,,256',
'256,256,256,,,256,256,,,256,,,256,256,,,,,,,256,,,,,,256,,,,256,256',
',256,256,128,,128,256,256,256,256,,256,,256,,128,128,128,,128,,128,128',
',128,128,128,128,,338,338,,,338,,,,,,,,,,128,,,,128,128,,,128,128,128',
'128,128,128,,128,128,127,,127,,,128,,,338,,,338,127,127,127,,127,,127',
'127,,127,127,127,127,,,128,,,,338,,,,,,,,,127,338,338,,127,127,,,127',
'127,127,127,127,127,,127,127,125,,125,,,127,,,,,,,125,125,125,,125,',
'125,125,,125,125,125,125,,,127,,,,,,,,,,,,,125,,,,125,125,,,125,125',
'125,125,125,125,227,125,125,,,,,,125,,,,227,227,227,227,227,,227,227',
',227,227,227,227,,,,,,125,,,,,,,,,,227,,,,227,227,,222,227,227,227,227',
'227,227,,227,227,,,222,222,222,227,222,,222,222,,222,222,222,222,,,',
',,,,,,,,,227,,,222,,,,222,222,,353,222,222,222,222,222,222,,222,222',
',,353,353,353,222,353,,353,353,,353,353,353,353,,,,,,,,,,,,,222,,,353',
',,,353,353,,354,353,353,353,353,353,353,,353,353,,,354,354,354,353,354',
',354,354,,354,354,354,354,,,,,,,,,,,,,353,,,354,,,,354,354,,156,354',
'354,354,354,354,354,,354,354,,,156,156,156,354,156,,156,156,,156,156',
'156,156,,,,,,,,,,,,,354,,,156,,,,156,156,,355,156,156,156,156,156,156',
',156,156,,,355,355,355,156,355,,355,355,,355,355,355,355,,156,156,,',
',,,,,,,156,,,355,,,,355,355,,,355,355,355,355,355,355,214,355,355,,',
'214,,,355,,,,214,214,214,,214,,214,214,,214,214,214,214,,,,,,355,,,',
',,,,,,214,,,,214,214,,213,214,214,214,214,214,214,,214,214,,,213,213',
'213,214,213,,213,213,212,213,213,213,213,,,,,,,,212,212,212,,212,214',
'212,212,213,212,212,212,212,213,,,213,213,213,213,213,213,,213,213,',
',,212,,213,,,,,211,212,212,212,212,212,212,,212,212,,,,211,211,212,211',
'213,211,211,210,211,,,,,,,,,,,,210,210,,210,212,210,210,211,210,,,,',
',,211,211,211,211,211,211,,211,211,,,,210,,211,,,,,,210,210,210,210',
'210,210,168,210,210,,,,,,210,,211,,168,168,168,168,168,,168,168,209',
'168,168,168,168,,,,,,210,,,209,209,,209,,209,209,168,209,,,168,168,',
',168,168,168,168,168,168,,168,168,,,,209,,168,,,,,356,209,209,209,209',
'209,209,,209,209,,,356,356,356,209,356,168,356,356,208,356,356,356,356',
',,,,,,,,208,208,,208,209,208,208,356,208,,,356,356,,207,356,356,356',
'356,356,356,,356,356,,,,208,207,356,207,,207,207,206,208,208,208,208',
'208,208,,208,208,,,,,206,208,206,356,206,206,207,,,,,,,205,207,207,207',
'207,207,207,,207,207,208,,,206,205,207,205,,205,205,357,206,206,206',
'206,206,206,,206,206,,,357,357,357,206,357,207,357,357,205,357,357,357',
'357,,,,205,205,205,205,,,,205,205,206,,,357,,205,,357,357,,373,357,357',
'357,357,357,357,,357,357,,,373,373,373,357,373,205,373,373,,373,373',
'373,373,,,,,,,,,,,,,357,,,373,,,,373,373,,9,373,373,373,373,373,373',
',373,373,,,9,9,9,373,9,204,9,9,,9,9,9,9,,,,,,,204,,204,,204,204,373',
',,9,,,,9,9,,,9,9,9,9,9,9,,9,9,204,,,,,9,,200,204,204,204,204,,,,204',
'204,,,,,200,204,200,,200,200,9,,,,,199,,,,,,,,,,,,204,,199,200,199,',
'199,199,194,,,,,200,200,,,,200,200,194,194,194,,194,200,194,194,199',
'194,194,194,194,,,,254,254,199,199,254,,,199,199,,,200,194,,199,,194',
'194,,,194,194,194,194,194,194,,194,194,,,,,,194,,199,,,254,,,254,,,',
'311,311,311,311,,311,311,311,,311,194,311,311,,,,254,,,311,311,311,',
',,311,254,254,,,,,,,,,,311,311,,,,,,,,,,,,311,311,311,311,,311,280,280',
'280,280,,280,280,280,,280,,280,280,,,,,,,280,280,280,,,,280,,,,,,,,',
',,,280,280,,,,,,,,,,,,280,280,280,280,,280,278,278,278,278,,278,278',
'278,,278,,278,278,,,,,,,278,278,278,,,,278,,,,,,,,,,,,278,278,,,,,,',
',,,,,278,278,278,278,,278' ]
        racc_action_check = arr = ::Array.new(6812, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

racc_action_pointer = [
    -2,   385,   nil,   nil,   118,   365,   nil,   173,   367,  6454,
   474,   534,   248,   nil,   nil,   682,   742,   802,   862,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   276,   316,  1042,  1102,  1162,   210,     9,  4153,   nil,
   nil,   nil,   nil,   nil,  1402,  1462,  1550,   nil,   nil,   nil,
   nil,   nil,  1610,   nil,   242,   242,   nil,  1818,   nil,   nil,
   294,  1938,   277,  2058,  2118,  2178,  2238,  2298,  2358,  2418,
  2478,  2538,  2626,  2686,  2746,  2806,  2866,  2926,  2986,  3046,
  3106,  3166,  3226,  3286,  3346,  3406,  3466,  3526,  3586,  3646,
  3706,  3766,  3854,   230,   261,  4034,  4094,   249,   234,  4302,
   204,   nil,   nil,   nil,   nil,   nil,   345,   188,   613,   626,
   122,   nil,   130,   230,  4870,  5648,   nil,  5591,  5534,    53,
    44,    44,   nil,    -9,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   117,   nil,   140,   nil,    93,   nil,   nil,   208,   nil,
   193,   nil,   nil,   230,  1998,    80,  5890,  1758,   nil,   312,
   nil,   nil,   nil,   nil,   328,   336,   337,   363,  6179,   364,
  1670,     5,    84,     2,  1342,   982,   414,   nil,   nil,    24,
    63,    68,    82,  2597,    -9,    -1,     9,    -2,   nil,   nil,
   nil,   nil,   nil,   nil,  6563,    18,   358,   257,     2,  6543,
  6518,   270,  4962,  5050,  6471,  6340,  6313,  6293,  6266,  6199,
  6125,  6105,  6058,  6038,  5991,   nil,   nil,  1878,   307,   215,
   nil,  4848,  5749,   233,   nil,   226,   203,  5702,   nil,   188,
   nil,   272,   nil,   nil,  4958,   nil,   195,   nil,   nil,   nil,
   nil,   nil,   183,   150,   -28,   149,   -11,   nil,  5046,  5134,
  5402,   117,   104,   -32,  6596,    -8,  5462,    11,    32,   nil,
  5342,  5254,   nil,   nil,   nil,   nil,  5194,   nil,   nil,   nil,
   nil,    76,   nil,   nil,   nil,   nil,    81,   100,  6724,   108,
  6668,  4782,  4722,  4662,   nil,  4602,  4542,   153,   nil,   143,
   nil,   160,   nil,   164,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   173,
  4482,  6612,   197,   nil,   128,   nil,   196,   201,   nil,   142,
   278,  4422,   nil,   nil,  4362,  4242,   nil,   234,   -15,   236,
   216,     0,  4182,   nil,  3974,  3914,   265,   nil,  5565,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   213,    98,
   275,   nil,   nil,  5796,  5843,  5937,  6246,  6360,   314,  1282,
   257,   321,   nil,   nil,   321,  1222,   nil,   nil,   nil,   311,
   nil,   nil,   nil,  6407,    78,   113,   nil,   922,   345,   325,
   nil,   350,   353,   nil,   nil,   357,   nil,   nil,   359,   622,
   nil,   nil,   nil,   363,   332,   nil,   nil,   nil,   nil,   nil,
   365,   nil,   nil,   nil,   nil,   354,   nil,   266,   178,   nil,
   nil,   372,   nil,   nil,    58,   nil,   377,   nil,   379,   nil,
   386,   nil,   nil,   nil,   359,   nil,   nil,   nil,   nil ]

racc_action_default = [
    -3,  -246,    -1,    -2,    -4,    -5,    -8,   -10,   -16,   -21,
  -246,  -246,  -246,   -33,   -34,  -246,  -246,  -246,  -246,   -61,
   -62,   -63,   -64,   -65,   -66,   -67,   -68,   -69,   -70,   -71,
   -72,   -73,   -74,   -75,   -76,   -77,   -78,   -79,   -80,   -81,
   -82,   -87,   -91,  -246,  -246,  -246,  -246,  -246,  -246,  -178,
  -179,  -180,  -181,  -182,  -246,  -246,  -246,  -193,  -194,  -195,
  -196,  -197,  -246,  -199,  -246,  -212,  -215,  -246,  -220,  -221,
  -246,  -246,    -7,  -246,  -246,  -246,  -246,  -246,  -246,  -246,
  -246,  -127,  -246,  -246,  -246,  -246,  -246,  -246,  -246,  -246,
  -246,  -246,  -246,  -246,  -246,  -246,  -246,  -246,  -246,  -246,
  -246,  -246,  -246,  -246,  -122,  -245,  -245,   -22,   -23,  -246,
  -245,  -138,  -159,  -160,  -161,  -162,   -46,  -246,   -47,   -54,
  -246,   -88,  -246,  -246,  -246,  -246,   -98,  -246,  -246,  -245,
  -245,  -222,  -147,  -149,  -150,  -151,  -152,  -153,  -155,  -156,
   -14,  -222,  -184,  -222,  -186,  -246,  -189,  -190,  -246,  -198,
  -246,  -203,  -206,  -246,  -210,  -246,  -246,  -246,   429,    -6,
    -9,   -11,   -12,   -13,   -17,   -18,   -19,   -20,  -246,  -222,
  -246,   -80,   -81,   -82,  -233,  -239,  -227,  -128,  -131,  -246,
  -230,  -244,  -228,  -236,  -179,  -180,  -181,  -182,  -226,  -231,
  -232,  -234,  -235,  -237,   -59,  -246,   -36,   -37,   -38,   -39,
   -40,   -41,   -42,   -43,   -44,   -45,   -48,   -49,   -50,   -51,
   -52,   -53,   -55,   -56,  -246,   -57,  -116,  -246,  -222,   -84,
   -92,  -127,  -126,  -246,  -125,  -246,  -224,  -246,   -28,  -245,
  -163,  -246,   -58,   -93,  -246,   -96,  -222,  -166,  -168,  -169,
  -170,  -171,  -173,  -246,  -246,  -176,  -246,   -90,  -246,  -246,
  -246,  -246,  -246,  -245,  -223,  -246,  -223,  -246,  -246,  -187,
  -246,  -246,  -200,  -201,  -202,  -204,  -246,  -207,  -208,  -209,
  -211,  -222,  -213,  -216,  -218,  -219,    -8,  -246,  -127,  -246,
  -223,  -246,  -246,  -246,   -35,  -246,  -246,  -222,  -118,  -246,
   -86,  -222,  -130,  -246,  -227,  -228,  -229,  -230,  -233,  -236,
  -238,  -239,  -240,  -241,  -242,  -243,  -244,  -123,  -124,  -246,
  -225,  -127,  -246,  -141,  -246,  -164,  -222,  -246,   -95,  -246,
  -223,  -246,  -174,  -175,  -246,  -246,   -89,  -246,  -101,  -246,
  -107,  -246,  -246,  -111,  -245,  -245,  -246,  -157,  -246,  -148,
  -154,   -15,  -183,  -185,  -188,  -191,  -192,  -205,  -246,  -246,
  -222,   -26,  -129,  -134,  -132,  -133,   -60,  -120,  -246,  -223,
   -83,  -246,   -25,   -29,  -222,  -245,  -142,  -143,  -144,  -246,
   -94,   -97,  -167,  -172,  -246,  -101,  -100,  -246,  -246,  -107,
  -106,  -246,  -246,  -110,  -112,  -246,  -139,  -140,  -246,  -246,
  -158,  -214,  -217,  -246,   -30,  -117,  -119,   -85,  -121,   -27,
  -246,  -165,  -177,   -99,  -102,  -246,  -105,  -246,  -245,  -135,
  -136,  -246,  -146,   -24,   -31,  -137,  -246,  -104,  -246,  -109,
  -246,  -114,  -115,  -145,  -224,  -103,  -108,  -113,   -32 ]

racc_goto_table = [
     2,   116,   118,   119,   121,   216,   226,   134,   136,   195,
   129,   130,   169,   149,   309,   273,   224,   224,   245,   236,
   339,   333,   229,   385,   388,   253,   420,    72,   332,   125,
   127,   128,   107,   108,   287,   257,   404,   258,   223,   225,
   352,   251,   252,   233,   215,   141,   143,   363,   380,   312,
   245,   271,   120,   156,   400,   366,   336,   393,   376,   340,
   372,   323,   322,   279,   345,   267,   268,   168,   194,   196,
   197,   198,   199,   200,   201,   202,   203,   204,   205,   206,
   207,   208,   209,   210,   211,   212,   213,   214,   140,   140,
   148,   222,   222,   218,   159,   227,   151,   406,     3,   164,
   165,   166,   167,   384,   390,   403,   265,   160,   161,   162,
   163,   266,   289,   264,   152,   246,   154,   269,     1,   nil,
   nil,   288,   nil,   nil,   nil,   nil,   245,   316,   nil,   nil,
   319,   nil,   nil,   nil,   nil,   nil,   140,   nil,   nil,   nil,
   313,   nil,   134,   136,   129,   130,   nil,   nil,   nil,   nil,
   nil,   nil,   291,   nil,   270,   nil,   118,   277,   140,   nil,
   125,   127,   128,   nil,   337,   348,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   358,   290,   nil,   nil,   361,   nil,   nil,   nil,   nil,
   nil,   276,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   214,   nil,   nil,   nil,   nil,   392,   350,
   369,   nil,   428,   134,   136,   245,   nil,   347,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   317,   nil,   194,   nil,   nil,   nil,
   nil,   nil,   364,   nil,   394,   387,   387,   nil,   327,   329,
   nil,   374,   nil,   nil,   nil,   nil,   nil,   nil,   399,   nil,
   nil,   nil,   nil,   396,   nil,   nil,   nil,   353,   354,   355,
   nil,   356,   357,   nil,   nil,   nil,   387,   nil,   367,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   341,   nil,   nil,   nil,   148,   346,   227,   134,   136,   nil,
   151,   nil,   nil,   nil,   nil,   nil,   nil,   373,   nil,   nil,
   194,   424,   nil,   nil,   nil,   nil,   nil,   nil,   194,   421,
   nil,   nil,   nil,   397,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   214,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   341,
   nil,   nil,   nil,   125,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   411,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   227,   nil,   nil,   nil,   nil,   416,   nil,   418,   422 ]

racc_goto_check = [
     2,    10,    10,    10,    38,    51,    13,    36,    35,    19,
    58,    58,    11,    81,    14,    89,    50,    50,    37,    43,
    66,    48,    59,    60,    60,    15,    49,     5,    47,    10,
    10,    10,     9,     9,    52,    15,    44,    15,    54,    54,
    55,    59,    59,    42,    20,     8,     8,    16,    46,    62,
    37,    43,     6,    10,    60,    63,    65,    12,    45,    68,
    69,    70,    72,    15,    76,    77,    78,    10,    10,    10,
    10,    10,    10,    10,    10,    10,    10,    10,    10,    10,
    10,    10,    10,    10,    10,    10,    10,    10,     6,     6,
     6,    10,    10,     8,     5,    10,     6,    46,     3,     9,
     9,     9,     9,    48,    66,    45,    82,     6,     6,     6,
     6,    83,    15,    85,    86,     8,    87,    88,     1,   nil,
   nil,    51,   nil,   nil,   nil,   nil,    37,    43,   nil,   nil,
    15,   nil,   nil,   nil,   nil,   nil,     6,   nil,   nil,   nil,
    50,   nil,    36,    35,    58,    58,   nil,   nil,   nil,   nil,
   nil,   nil,    11,   nil,     2,   nil,    10,     2,     6,   nil,
    10,    10,    10,   nil,    50,    15,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,    15,    38,   nil,   nil,    15,   nil,   nil,   nil,   nil,
   nil,     6,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,    10,   nil,   nil,   nil,   nil,    89,    11,
    15,   nil,    14,    36,    35,    37,   nil,    81,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,     2,   nil,    10,   nil,   nil,   nil,
   nil,   nil,    11,   nil,    15,    50,    50,   nil,     2,     2,
   nil,    19,   nil,   nil,   nil,   nil,   nil,   nil,    15,   nil,
   nil,   nil,   nil,    51,   nil,   nil,   nil,    10,    10,    10,
   nil,    10,    10,   nil,   nil,   nil,    50,   nil,    58,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
     6,   nil,   nil,   nil,     6,     6,    10,    36,    35,   nil,
     6,   nil,   nil,   nil,   nil,   nil,   nil,    10,   nil,   nil,
    10,    13,   nil,   nil,   nil,   nil,   nil,   nil,    10,    50,
   nil,   nil,   nil,    38,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,    10,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,     6,
   nil,   nil,   nil,    10,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,     2,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
    10,   nil,   nil,   nil,   nil,     2,   nil,     2,     2 ]

racc_goto_pointer = [
   nil,   118,     0,    98,   nil,    23,    34,   nil,    -9,    22,
   -14,   -69,  -293,  -103,  -212,  -106,  -263,   nil,   nil,   -73,
   -57,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   -40,   -41,  -105,   -37,   nil,
   nil,   nil,   -79,  -104,  -341,  -270,  -282,  -222,  -229,  -382,
   -89,   -96,  -183,   nil,   -67,  -240,   nil,   nil,   -36,   -88,
  -311,   nil,  -180,  -259,   nil,  -197,  -234,   nil,  -196,  -260,
  -183,   nil,  -181,   nil,   nil,   nil,  -196,   -88,   -87,   nil,
   nil,   -49,   -44,   -39,   nil,   -37,    50,    51,   -37,  -141 ]

racc_goto_default = [
   nil,   nil,   386,   nil,     4,     5,     6,     7,   nil,     8,
     9,   nil,   nil,   nil,   nil,   nil,   228,    13,    14,   331,
   nil,    19,    20,    21,    22,    23,    24,    25,    26,    27,
    28,    29,    30,    31,    32,    33,    34,    35,   nil,    41,
    42,   122,   nil,   nil,   126,   nil,   nil,   nil,   nil,   nil,
   230,   nil,   nil,   104,   nil,   177,   179,   178,   111,   nil,
   nil,   110,   nil,   nil,   131,   nil,   132,   133,   137,   237,
   238,   239,   240,   241,   244,   145,   147,    57,    58,    59,
    62,   nil,   nil,   nil,   150,   nil,   nil,   nil,   nil,   nil ]

racc_reduce_table = [
  0, 0, :racc_error,
  1, 93, :_reduce_1,
  1, 93, :_reduce_2,
  0, 93, :_reduce_3,
  1, 94, :_reduce_4,
  1, 96, :_reduce_5,
  3, 96, :_reduce_6,
  2, 96, :_reduce_7,
  1, 97, :_reduce_8,
  3, 97, :_reduce_9,
  1, 98, :_reduce_none,
  3, 98, :_reduce_11,
  3, 98, :_reduce_12,
  3, 98, :_reduce_13,
  1, 100, :_reduce_14,
  3, 100, :_reduce_15,
  1, 99, :_reduce_none,
  3, 99, :_reduce_17,
  3, 99, :_reduce_18,
  3, 99, :_reduce_19,
  3, 99, :_reduce_20,
  1, 101, :_reduce_none,
  2, 101, :_reduce_22,
  2, 101, :_reduce_23,
  7, 101, :_reduce_24,
  5, 101, :_reduce_25,
  5, 101, :_reduce_26,
  4, 108, :_reduce_27,
  1, 105, :_reduce_28,
  3, 105, :_reduce_29,
  1, 104, :_reduce_30,
  2, 104, :_reduce_31,
  4, 104, :_reduce_32,
  1, 102, :_reduce_none,
  1, 102, :_reduce_none,
  4, 102, :_reduce_35,
  3, 102, :_reduce_36,
  3, 102, :_reduce_37,
  3, 102, :_reduce_38,
  3, 102, :_reduce_39,
  3, 102, :_reduce_40,
  3, 102, :_reduce_41,
  3, 102, :_reduce_42,
  3, 102, :_reduce_43,
  3, 102, :_reduce_44,
  3, 102, :_reduce_45,
  2, 102, :_reduce_46,
  2, 102, :_reduce_47,
  3, 102, :_reduce_48,
  3, 102, :_reduce_49,
  3, 102, :_reduce_50,
  3, 102, :_reduce_51,
  3, 102, :_reduce_52,
  3, 102, :_reduce_53,
  2, 102, :_reduce_54,
  3, 102, :_reduce_55,
  3, 102, :_reduce_56,
  3, 102, :_reduce_57,
  3, 102, :_reduce_58,
  1, 111, :_reduce_59,
  3, 111, :_reduce_60,
  1, 109, :_reduce_none,
  1, 109, :_reduce_none,
  1, 109, :_reduce_none,
  1, 109, :_reduce_none,
  1, 109, :_reduce_none,
  1, 109, :_reduce_none,
  1, 109, :_reduce_none,
  1, 109, :_reduce_none,
  1, 109, :_reduce_none,
  1, 109, :_reduce_none,
  1, 109, :_reduce_none,
  1, 109, :_reduce_none,
  1, 109, :_reduce_none,
  1, 109, :_reduce_none,
  1, 109, :_reduce_none,
  1, 109, :_reduce_none,
  1, 109, :_reduce_none,
  1, 109, :_reduce_78,
  1, 109, :_reduce_79,
  1, 109, :_reduce_80,
  1, 109, :_reduce_81,
  1, 109, :_reduce_82,
  5, 110, :_reduce_83,
  3, 110, :_reduce_84,
  6, 110, :_reduce_85,
  4, 110, :_reduce_86,
  1, 114, :_reduce_87,
  2, 114, :_reduce_88,
  4, 131, :_reduce_89,
  3, 131, :_reduce_90,
  1, 131, :_reduce_91,
  3, 132, :_reduce_92,
  2, 130, :_reduce_93,
  3, 134, :_reduce_94,
  2, 134, :_reduce_95,
  2, 133, :_reduce_96,
  4, 133, :_reduce_97,
  2, 117, :_reduce_98,
  5, 136, :_reduce_99,
  4, 136, :_reduce_100,
  0, 137, :_reduce_none,
  2, 137, :_reduce_102,
  4, 137, :_reduce_103,
  3, 137, :_reduce_104,
  6, 118, :_reduce_105,
  5, 118, :_reduce_106,
  0, 138, :_reduce_none,
  4, 138, :_reduce_108,
  3, 138, :_reduce_109,
  5, 116, :_reduce_110,
  1, 139, :_reduce_111,
  2, 139, :_reduce_112,
  5, 140, :_reduce_113,
  1, 141, :_reduce_none,
  1, 141, :_reduce_none,
  1, 112, :_reduce_none,
  4, 112, :_reduce_117,
  1, 144, :_reduce_118,
  3, 144, :_reduce_119,
  3, 143, :_reduce_120,
  6, 115, :_reduce_121,
  2, 115, :_reduce_122,
  3, 145, :_reduce_123,
  3, 145, :_reduce_124,
  1, 146, :_reduce_none,
  1, 146, :_reduce_none,
  0, 103, :_reduce_127,
  1, 103, :_reduce_128,
  3, 103, :_reduce_129,
  1, 148, :_reduce_none,
  1, 148, :_reduce_none,
  3, 147, :_reduce_132,
  3, 147, :_reduce_133,
  3, 147, :_reduce_134,
  6, 119, :_reduce_135,
  6, 120, :_reduce_136,
  7, 121, :_reduce_137,
  1, 153, :_reduce_138,
  1, 152, :_reduce_none,
  1, 152, :_reduce_none,
  1, 154, :_reduce_none,
  2, 154, :_reduce_142,
  1, 155, :_reduce_none,
  1, 155, :_reduce_none,
  7, 122, :_reduce_145,
  6, 122, :_reduce_146,
  1, 156, :_reduce_147,
  3, 156, :_reduce_148,
  1, 158, :_reduce_none,
  1, 158, :_reduce_none,
  1, 158, :_reduce_151,
  1, 158, :_reduce_none,
  1, 159, :_reduce_153,
  3, 159, :_reduce_154,
  1, 160, :_reduce_none,
  1, 160, :_reduce_none,
  1, 157, :_reduce_none,
  2, 157, :_reduce_158,
  1, 150, :_reduce_none,
  1, 150, :_reduce_none,
  1, 150, :_reduce_none,
  1, 150, :_reduce_162,
  1, 151, :_reduce_163,
  2, 151, :_reduce_164,
  4, 151, :_reduce_165,
  1, 135, :_reduce_166,
  3, 135, :_reduce_167,
  1, 161, :_reduce_none,
  1, 161, :_reduce_none,
  1, 162, :_reduce_none,
  1, 162, :_reduce_none,
  3, 164, :_reduce_172,
  1, 164, :_reduce_173,
  2, 165, :_reduce_174,
  2, 163, :_reduce_175,
  1, 166, :_reduce_176,
  4, 166, :_reduce_177,
  1, 113, :_reduce_178,
  1, 124, :_reduce_179,
  1, 124, :_reduce_180,
  1, 124, :_reduce_181,
  1, 124, :_reduce_182,
  4, 125, :_reduce_183,
  2, 125, :_reduce_184,
  4, 125, :_reduce_185,
  2, 125, :_reduce_186,
  3, 126, :_reduce_187,
  4, 126, :_reduce_188,
  2, 126, :_reduce_189,
  1, 167, :_reduce_190,
  3, 167, :_reduce_191,
  3, 168, :_reduce_192,
  1, 128, :_reduce_none,
  1, 128, :_reduce_none,
  1, 128, :_reduce_none,
  1, 169, :_reduce_196,
  1, 169, :_reduce_197,
  2, 170, :_reduce_198,
  1, 172, :_reduce_199,
  1, 174, :_reduce_200,
  1, 175, :_reduce_201,
  2, 173, :_reduce_202,
  1, 176, :_reduce_203,
  1, 177, :_reduce_204,
  2, 177, :_reduce_205,
  2, 171, :_reduce_206,
  2, 178, :_reduce_207,
  2, 178, :_reduce_208,
  3, 95, :_reduce_209,
  0, 180, :_reduce_none,
  1, 180, :_reduce_none,
  0, 179, :_reduce_212,
  2, 179, :_reduce_213,
  4, 179, :_reduce_214,
  1, 123, :_reduce_215,
  3, 123, :_reduce_216,
  5, 123, :_reduce_217,
  1, 181, :_reduce_none,
  1, 181, :_reduce_none,
  1, 129, :_reduce_220,
  1, 127, :_reduce_221,
  0, 107, :_reduce_none,
  1, 107, :_reduce_223,
  0, 106, :_reduce_none,
  1, 106, :_reduce_none,
  1, 149, :_reduce_none,
  1, 149, :_reduce_none,
  1, 149, :_reduce_none,
  1, 149, :_reduce_none,
  1, 149, :_reduce_none,
  1, 149, :_reduce_none,
  1, 149, :_reduce_none,
  1, 149, :_reduce_none,
  1, 149, :_reduce_none,
  1, 149, :_reduce_none,
  1, 149, :_reduce_none,
  1, 149, :_reduce_none,
  1, 149, :_reduce_none,
  1, 149, :_reduce_none,
  1, 149, :_reduce_none,
  1, 149, :_reduce_none,
  1, 149, :_reduce_none,
  1, 149, :_reduce_none,
  1, 149, :_reduce_none,
  0, 142, :_reduce_245 ]

racc_reduce_n = 246

racc_shift_n = 429

racc_token_table = {
  false => 0,
  :error => 1,
  :STRING => 2,
  :DQPRE => 3,
  :DQMID => 4,
  :DQPOST => 5,
  :WORD => 6,
  :LBRACK => 7,
  :RBRACK => 8,
  :LBRACE => 9,
  :RBRACE => 10,
  :SYMBOL => 11,
  :FARROW => 12,
  :COMMA => 13,
  :TRUE => 14,
  :FALSE => 15,
  :EQUALS => 16,
  :APPENDS => 17,
  :DELETES => 18,
  :LESSEQUAL => 19,
  :NOTEQUAL => 20,
  :DOT => 21,
  :COLON => 22,
  :LLCOLLECT => 23,
  :RRCOLLECT => 24,
  :QMARK => 25,
  :LPAREN => 26,
  :RPAREN => 27,
  :ISEQUAL => 28,
  :GREATEREQUAL => 29,
  :GREATERTHAN => 30,
  :LESSTHAN => 31,
  :IF => 32,
  :ELSE => 33,
  :DEFINE => 34,
  :ELSIF => 35,
  :VARIABLE => 36,
  :CLASS => 37,
  :INHERITS => 38,
  :NODE => 39,
  :BOOLEAN => 40,
  :NAME => 41,
  :SEMIC => 42,
  :CASE => 43,
  :DEFAULT => 44,
  :AT => 45,
  :ATAT => 46,
  :LCOLLECT => 47,
  :RCOLLECT => 48,
  :CLASSREF => 49,
  :NOT => 50,
  :OR => 51,
  :AND => 52,
  :UNDEF => 53,
  :PARROW => 54,
  :PLUS => 55,
  :MINUS => 56,
  :TIMES => 57,
  :DIV => 58,
  :LSHIFT => 59,
  :RSHIFT => 60,
  :UMINUS => 61,
  :MATCH => 62,
  :NOMATCH => 63,
  :REGEX => 64,
  :IN_EDGE => 65,
  :OUT_EDGE => 66,
  :IN_EDGE_SUB => 67,
  :OUT_EDGE_SUB => 68,
  :IN => 69,
  :UNLESS => 70,
  :PIPE => 71,
  :LAMBDA => 72,
  :SELBRACE => 73,
  :NUMBER => 74,
  :HEREDOC => 75,
  :SUBLOCATE => 76,
  :RENDER_STRING => 77,
  :RENDER_EXPR => 78,
  :EPP_START => 79,
  :EPP_END => 80,
  :EPP_END_TRIM => 81,
  :FUNCTION => 82,
  :PRIVATE => 83,
  :ATTR => 84,
  :TYPE => 85,
  :LOW => 86,
  :APPLICATION => 87,
  :HIGH => 88,
  :LISTSTART => 89,
  :SPLAT => 90,
  :MODULO => 91 }

racc_nt_base = 92

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "STRING",
  "DQPRE",
  "DQMID",
  "DQPOST",
  "WORD",
  "LBRACK",
  "RBRACK",
  "LBRACE",
  "RBRACE",
  "SYMBOL",
  "FARROW",
  "COMMA",
  "TRUE",
  "FALSE",
  "EQUALS",
  "APPENDS",
  "DELETES",
  "LESSEQUAL",
  "NOTEQUAL",
  "DOT",
  "COLON",
  "LLCOLLECT",
  "RRCOLLECT",
  "QMARK",
  "LPAREN",
  "RPAREN",
  "ISEQUAL",
  "GREATEREQUAL",
  "GREATERTHAN",
  "LESSTHAN",
  "IF",
  "ELSE",
  "DEFINE",
  "ELSIF",
  "VARIABLE",
  "CLASS",
  "INHERITS",
  "NODE",
  "BOOLEAN",
  "NAME",
  "SEMIC",
  "CASE",
  "DEFAULT",
  "AT",
  "ATAT",
  "LCOLLECT",
  "RCOLLECT",
  "CLASSREF",
  "NOT",
  "OR",
  "AND",
  "UNDEF",
  "PARROW",
  "PLUS",
  "MINUS",
  "TIMES",
  "DIV",
  "LSHIFT",
  "RSHIFT",
  "UMINUS",
  "MATCH",
  "NOMATCH",
  "REGEX",
  "IN_EDGE",
  "OUT_EDGE",
  "IN_EDGE_SUB",
  "OUT_EDGE_SUB",
  "IN",
  "UNLESS",
  "PIPE",
  "LAMBDA",
  "SELBRACE",
  "NUMBER",
  "HEREDOC",
  "SUBLOCATE",
  "RENDER_STRING",
  "RENDER_EXPR",
  "EPP_START",
  "EPP_END",
  "EPP_END_TRIM",
  "FUNCTION",
  "PRIVATE",
  "ATTR",
  "TYPE",
  "LOW",
  "APPLICATION",
  "HIGH",
  "LISTSTART",
  "SPLAT",
  "MODULO",
  "$start",
  "program",
  "statements",
  "epp_expression",
  "syntactic_statements",
  "syntactic_statement",
  "assignment",
  "relationship",
  "assignments",
  "resource",
  "expression",
  "attribute_operations",
  "additional_resource_bodies",
  "resource_bodies",
  "endsemi",
  "endcomma",
  "resource_body",
  "primary_expression",
  "call_function_expression",
  "expressions",
  "selector_entries",
  "variable",
  "call_method_with_lambda_expression",
  "collection_expression",
  "case_expression",
  "if_expression",
  "unless_expression",
  "definition_expression",
  "application_expression",
  "hostclass_expression",
  "node_definition_expression",
  "epp_render_expression",
  "reserved_word",
  "array",
  "hash",
  "regex",
  "quotedtext",
  "type",
  "lambda",
  "call_method_expression",
  "named_access",
  "lambda_parameter_list",
  "lambda_rest",
  "parameters",
  "if_part",
  "else",
  "unless_else",
  "case_options",
  "case_option",
  "options_statements",
  "nil",
  "selector_entry",
  "selector_entry_list",
  "collect_query",
  "optional_query",
  "attribute_operation",
  "attribute_name",
  "keyword",
  "classname",
  "parameter_list",
  "opt_statements",
  "stacked_classname",
  "classparent",
  "classnameordefault",
  "hostnames",
  "nodeparent",
  "hostname",
  "dotted_name",
  "name_or_number",
  "parameter",
  "untyped_parameter",
  "typed_parameter",
  "regular_parameter",
  "splat_parameter",
  "parameter_type",
  "hashpairs",
  "hashpair",
  "string",
  "dq_string",
  "heredoc",
  "dqpre",
  "dqrval",
  "dqpost",
  "dqmid",
  "text_expression",
  "dqtail",
  "sublocated_text",
  "epp_parameters_list",
  "optional_statements",
  "epp_end" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

module_eval(<<'.,.,', 'egrammar.ra', 66)
  def _reduce_1(val, _values, result)
     result = create_program(Factory.block_or_expression(*val[0])) 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 67)
  def _reduce_2(val, _values, result)
     result = create_program(Factory.block_or_expression(*val[0])) 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 68)
  def _reduce_3(val, _values, result)
     result = create_empty_program() 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 72)
  def _reduce_4(val, _values, result)
     result = transform_calls(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 79)
  def _reduce_5(val, _values, result)
     result = [val[0]]
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 80)
  def _reduce_6(val, _values, result)
     result = val[0].push val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 81)
  def _reduce_7(val, _values, result)
     result = val[0].push val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 88)
  def _reduce_8(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 89)
  def _reduce_9(val, _values, result)
     result = aryfy(val[0]).push(val[1]).push(val[2]) 
    result
  end
.,.,

# reduce 10 omitted

module_eval(<<'.,.,', 'egrammar.ra', 94)
  def _reduce_11(val, _values, result)
     result = val[0].set(val[2])      ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 95)
  def _reduce_12(val, _values, result)
     result = val[0].plus_set(val[2]) ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 96)
  def _reduce_13(val, _values, result)
     result = val[0].minus_set(val[2]); loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 99)
  def _reduce_14(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 100)
  def _reduce_15(val, _values, result)
     result = val[0].push(val[2]) 
    result
  end
.,.,

# reduce 16 omitted

module_eval(<<'.,.,', 'egrammar.ra', 104)
  def _reduce_17(val, _values, result)
     result = val[0].relop(val[1][:value], val[2]); loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 105)
  def _reduce_18(val, _values, result)
     result = val[0].relop(val[1][:value], val[2]); loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 106)
  def _reduce_19(val, _values, result)
     result = val[0].relop(val[1][:value], val[2]); loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 107)
  def _reduce_20(val, _values, result)
     result = val[0].relop(val[1][:value], val[2]); loc result, val[1] 
    result
  end
.,.,

# reduce 21 omitted

module_eval(<<'.,.,', 'egrammar.ra', 116)
  def _reduce_22(val, _values, result)
          result = val[1]
      unless Factory.set_resource_form(result, :virtual)
        # This is equivalent to a syntax error - additional semantic restrictions apply
        error val[0], "Virtual (@) can only be applied to a Resource Expression"
      end
      # relocate the result
      loc result, val[0], val[1]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 127)
  def _reduce_23(val, _values, result)
          result = val[1]
      unless Factory.set_resource_form(result, :exported)
        # This is equivalent to a syntax error - additional semantic restrictions apply
        error val[0], "Exported (@@) can only be applied to a Resource Expression"
      end
      # relocate the result
      loc result, val[0], val[1]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 138)
  def _reduce_24(val, _values, result)
          bodies = [Factory.RESOURCE_BODY(val[2], val[4])] + val[5]
      result = Factory.RESOURCE(val[0], bodies)
      loc result, val[0], val[6]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 145)
  def _reduce_25(val, _values, result)
            result = Factory.RESOURCE(Factory.fqn(token_text(val[0])), val[2])
        loc result, val[0], val[4]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 154)
  def _reduce_26(val, _values, result)
           result = case Factory.resource_shape(val[0])
       when :resource, :class
        # This catches deprecated syntax.
        # If the attribute operations does not include +>, then the found expression
        # is actually a LEFT followed by LITERAL_HASH
        #
        unless tmp = transform_resource_wo_title(val[0], val[2])
          error val[1], "Syntax error resource body without title or hash with +>"
        end
        tmp
      when :defaults
        Factory.RESOURCE_DEFAULTS(val[0], val[2])
      when :override
        # This was only done for override in original - TODO should it be here at all
        Factory.RESOURCE_OVERRIDE(val[0], val[2])
      else
        error val[0], "Expression is not valid as a resource, resource-default, or resource-override"
      end
     loc result, val[0], val[4]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 176)
  def _reduce_27(val, _values, result)
     result = Factory.RESOURCE_BODY(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 179)
  def _reduce_28(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 180)
  def _reduce_29(val, _values, result)
     result = val[0].push val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 186)
  def _reduce_30(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 187)
  def _reduce_31(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 188)
  def _reduce_32(val, _values, result)
     result = val[2] 
    result
  end
.,.,

# reduce 33 omitted

# reduce 34 omitted

module_eval(<<'.,.,', 'egrammar.ra', 195)
  def _reduce_35(val, _values, result)
     result = val[0][*val[2]]         ; loc result, val[0], val[3] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 196)
  def _reduce_36(val, _values, result)
     result = val[0].in val[2]        ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 197)
  def _reduce_37(val, _values, result)
     result = val[0] =~  val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 198)
  def _reduce_38(val, _values, result)
     result = val[0].mne val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 199)
  def _reduce_39(val, _values, result)
     result = val[0] +   val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 200)
  def _reduce_40(val, _values, result)
     result = val[0] -   val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 201)
  def _reduce_41(val, _values, result)
     result = val[0] /   val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 202)
  def _reduce_42(val, _values, result)
     result = val[0] *   val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 203)
  def _reduce_43(val, _values, result)
     result = val[0] %   val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 204)
  def _reduce_44(val, _values, result)
     result = val[0] <<  val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 205)
  def _reduce_45(val, _values, result)
     result = val[0] >>  val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 206)
  def _reduce_46(val, _values, result)
     result = val[1].minus()          ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 207)
  def _reduce_47(val, _values, result)
     result = val[1].unfold()         ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 208)
  def _reduce_48(val, _values, result)
     result = val[0].ne  val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 209)
  def _reduce_49(val, _values, result)
     result = val[0] ==  val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 210)
  def _reduce_50(val, _values, result)
     result = val[0] >   val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 211)
  def _reduce_51(val, _values, result)
     result = val[0] >=  val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 212)
  def _reduce_52(val, _values, result)
     result = val[0] <   val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 213)
  def _reduce_53(val, _values, result)
     result = val[0] <=  val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 214)
  def _reduce_54(val, _values, result)
     result = val[1].not              ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 215)
  def _reduce_55(val, _values, result)
     result = val[0].and val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 216)
  def _reduce_56(val, _values, result)
     result = val[0].or  val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 217)
  def _reduce_57(val, _values, result)
     result = val[0].select(*val[2])  ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 218)
  def _reduce_58(val, _values, result)
     result = val[1].paren()          ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 228)
  def _reduce_59(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 229)
  def _reduce_60(val, _values, result)
     result = val[0].push(val[2]) 
    result
  end
.,.,

# reduce 61 omitted

# reduce 62 omitted

# reduce 63 omitted

# reduce 64 omitted

# reduce 65 omitted

# reduce 66 omitted

# reduce 67 omitted

# reduce 68 omitted

# reduce 69 omitted

# reduce 70 omitted

# reduce 71 omitted

# reduce 72 omitted

# reduce 73 omitted

# reduce 74 omitted

# reduce 75 omitted

# reduce 76 omitted

# reduce 77 omitted

module_eval(<<'.,.,', 'egrammar.ra', 251)
  def _reduce_78(val, _values, result)
     result = Factory.NUMBER(val[0][:value])          ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 252)
  def _reduce_79(val, _values, result)
     result = Factory.literal(val[0][:value])         ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 253)
  def _reduce_80(val, _values, result)
     result = Factory.literal(:default)               ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 254)
  def _reduce_81(val, _values, result)
     result = Factory.literal(:undef)                 ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 255)
  def _reduce_82(val, _values, result)
     result = Factory.QNAME_OR_NUMBER(val[0][:value]) ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 264)
  def _reduce_83(val, _values, result)
          result = Factory.CALL_NAMED(val[0], true, val[2])
      loc result, val[0], val[4]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 268)
  def _reduce_84(val, _values, result)
          result = Factory.CALL_NAMED(val[0], true, [])
      loc result, val[0], val[2]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 272)
  def _reduce_85(val, _values, result)
          result = Factory.CALL_NAMED(val[0], true, val[2])
      loc result, val[0], val[4]
      result.lambda = val[5]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 277)
  def _reduce_86(val, _values, result)
          result = Factory.CALL_NAMED(val[0], true, [])
      loc result, val[0], val[2]
      result.lambda = val[3]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 285)
  def _reduce_87(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 286)
  def _reduce_88(val, _values, result)
     result = val[0]; val[0].lambda = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 289)
  def _reduce_89(val, _values, result)
     result = Factory.CALL_METHOD(val[0], val[2]); loc result, val[1], val[3] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 290)
  def _reduce_90(val, _values, result)
     result = Factory.CALL_METHOD(val[0], []); loc result, val[1], val[3] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 291)
  def _reduce_91(val, _values, result)
     result = Factory.CALL_METHOD(val[0], []); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 295)
  def _reduce_92(val, _values, result)
            result = val[0].dot(Factory.fqn(val[2][:value]))
        loc result, val[1], val[2]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 303)
  def _reduce_93(val, _values, result)
          result = Factory.LAMBDA(val[0][:value], val[1][:value])
      loc result, val[0][:start], val[1][:end]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 308)
  def _reduce_94(val, _values, result)
     result = {:end => val[2], :value =>val[1] } 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 309)
  def _reduce_95(val, _values, result)
     result = {:end => val[1], :value => nil } 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 313)
  def _reduce_96(val, _values, result)
     result = {:start => val[0], :value => [] } 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 314)
  def _reduce_97(val, _values, result)
     result = {:start => val[0], :value => val[1] } 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 322)
  def _reduce_98(val, _values, result)
          result = val[1]
      loc(result, val[0], val[1])
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 329)
  def _reduce_99(val, _values, result)
            result = Factory.IF(val[0], Factory.block_or_expression(*val[2]), val[4])
        loc(result, val[0], (val[4] ? val[4] : val[3]))
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 333)
  def _reduce_100(val, _values, result)
            result = Factory.IF(val[0], nil, val[3])
        loc(result, val[0], (val[3] ? val[3] : val[2]))
      
    result
  end
.,.,

# reduce 101 omitted

module_eval(<<'.,.,', 'egrammar.ra', 341)
  def _reduce_102(val, _values, result)
            result = val[1]
        loc(result, val[0], val[1])
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 345)
  def _reduce_103(val, _values, result)
            result = Factory.block_or_expression(*val[2])
        loc result, val[0], val[3]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 349)
  def _reduce_104(val, _values, result)
            result = nil # don't think a nop is needed here either
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 356)
  def _reduce_105(val, _values, result)
          result = Factory.UNLESS(val[1], Factory.block_or_expression(*val[3]), val[5])
      loc result, val[0], val[4]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 360)
  def _reduce_106(val, _values, result)
          result = Factory.UNLESS(val[1], nil, nil)
      loc result, val[0], val[4]
    
    result
  end
.,.,

# reduce 107 omitted

module_eval(<<'.,.,', 'egrammar.ra', 370)
  def _reduce_108(val, _values, result)
            result = Factory.block_or_expression(*val[2])
        loc result, val[0], val[3]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 374)
  def _reduce_109(val, _values, result)
            result = nil # don't think a nop is needed here either
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 381)
  def _reduce_110(val, _values, result)
          result = Factory.CASE(val[1], *val[3])
      loc result, val[0], val[4]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 387)
  def _reduce_111(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 388)
  def _reduce_112(val, _values, result)
     result = val[0].push val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 393)
  def _reduce_113(val, _values, result)
            result = Factory.WHEN(val[0], val[3]); loc result, val[1], val[4]
      
    result
  end
.,.,

# reduce 114 omitted

# reduce 115 omitted

# reduce 116 omitted

module_eval(<<'.,.,', 'egrammar.ra', 409)
  def _reduce_117(val, _values, result)
            result = val[1]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 414)
  def _reduce_118(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 415)
  def _reduce_119(val, _values, result)
     result = val[0].push val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 420)
  def _reduce_120(val, _values, result)
     result = Factory.MAP(val[0], val[2]) ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 430)
  def _reduce_121(val, _values, result)
          result = Factory.COLLECT(val[0], val[1], val[3])
      loc result, val[0], val[5]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 434)
  def _reduce_122(val, _values, result)
          result = Factory.COLLECT(val[0], val[1], [])
      loc result, val[0], val[1]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 439)
  def _reduce_123(val, _values, result)
     result = Factory.VIRTUAL_QUERY(val[1])   ; loc result, val[0], val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 440)
  def _reduce_124(val, _values, result)
     result = Factory.EXPORTED_QUERY(val[1])  ; loc result, val[0], val[2] 
    result
  end
.,.,

# reduce 125 omitted

# reduce 126 omitted

module_eval(<<'.,.,', 'egrammar.ra', 449)
  def _reduce_127(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 450)
  def _reduce_128(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 451)
  def _reduce_129(val, _values, result)
     result = val[0].push(val[2]) 
    result
  end
.,.,

# reduce 130 omitted

# reduce 131 omitted

module_eval(<<'.,.,', 'egrammar.ra', 467)
  def _reduce_132(val, _values, result)
            result = Factory.ATTRIBUTE_OP(val[0][:value], :'=>', val[2])
        loc result, val[0], val[2]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 471)
  def _reduce_133(val, _values, result)
            result = Factory.ATTRIBUTE_OP(val[0][:value], :'+>', val[2])
        loc result, val[0], val[2]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 475)
  def _reduce_134(val, _values, result)
          result = Factory.ATTRIBUTES_OP(val[2]) ; loc result, val[0], val[2]
   
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 484)
  def _reduce_135(val, _values, result)
          result = add_definition(Factory.DEFINITION(classname(val[1][:value]), val[2], val[4]))
      loc result, val[0], val[5]
      # New lexer does not keep track of this, this is done in validation
      if @lexer.respond_to?(:'indefine=')
        @lexer.indefine = false
      end
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 495)
  def _reduce_136(val, _values, result)
        result = Factory.APPLICATION(classname(val[1][:value]), val[2], val[4])
    loc result, val[0], val[5]
  
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 505)
  def _reduce_137(val, _values, result)
          # Remove this class' name from the namestack as all nested classes have been parsed
      namepop
      result = add_definition(Factory.HOSTCLASS(classname(val[1][:value]), val[2], token_text(val[3]), val[5]))
      loc result, val[0], val[6]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 515)
  def _reduce_138(val, _values, result)
     namestack(val[0][:value]) ; result = val[0] 
    result
  end
.,.,

# reduce 139 omitted

# reduce 140 omitted

# reduce 141 omitted

module_eval(<<'.,.,', 'egrammar.ra', 524)
  def _reduce_142(val, _values, result)
     result = val[1] 
    result
  end
.,.,

# reduce 143 omitted

# reduce 144 omitted

module_eval(<<'.,.,', 'egrammar.ra', 541)
  def _reduce_145(val, _values, result)
          result = add_definition(Factory.NODE(val[1], val[3], val[5]))
      loc result, val[0], val[6]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 545)
  def _reduce_146(val, _values, result)
          result = add_definition(Factory.NODE(val[1], val[3], nil))
      loc result, val[0], val[5]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 555)
  def _reduce_147(val, _values, result)
     result = [result] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 556)
  def _reduce_148(val, _values, result)
     result = val[0].push(val[2]) 
    result
  end
.,.,

# reduce 149 omitted

# reduce 150 omitted

module_eval(<<'.,.,', 'egrammar.ra', 563)
  def _reduce_151(val, _values, result)
     result = Factory.literal(:default); loc result, val[0] 
    result
  end
.,.,

# reduce 152 omitted

module_eval(<<'.,.,', 'egrammar.ra', 567)
  def _reduce_153(val, _values, result)
     result = Factory.literal(val[0][:value]); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 568)
  def _reduce_154(val, _values, result)
     result = Factory.concat(val[0], '.', val[2][:value]); loc result, val[0], val[2] 
    result
  end
.,.,

# reduce 155 omitted

# reduce 156 omitted

# reduce 157 omitted

module_eval(<<'.,.,', 'egrammar.ra', 577)
  def _reduce_158(val, _values, result)
     result = val[1] 
    result
  end
.,.,

# reduce 159 omitted

# reduce 160 omitted

# reduce 161 omitted

module_eval(<<'.,.,', 'egrammar.ra', 596)
  def _reduce_162(val, _values, result)
     error val[0], "'class' is not a valid classname" 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 600)
  def _reduce_163(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 601)
  def _reduce_164(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 602)
  def _reduce_165(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 606)
  def _reduce_166(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 607)
  def _reduce_167(val, _values, result)
     result = val[0].push(val[2]) 
    result
  end
.,.,

# reduce 168 omitted

# reduce 169 omitted

# reduce 170 omitted

# reduce 171 omitted

module_eval(<<'.,.,', 'egrammar.ra', 619)
  def _reduce_172(val, _values, result)
     result = Factory.PARAM(val[0][:value], val[2]) ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 620)
  def _reduce_173(val, _values, result)
     result = Factory.PARAM(val[0][:value]); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 623)
  def _reduce_174(val, _values, result)
     result = val[1]; val[1].captures_rest() 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 626)
  def _reduce_175(val, _values, result)
     val[1].type_expr(val[0]) ; result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 629)
  def _reduce_176(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 630)
  def _reduce_177(val, _values, result)
     result = val[0][*val[2]] ; loc result, val[0], val[3] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 635)
  def _reduce_178(val, _values, result)
     result = Factory.fqn(val[0][:value]).var ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 640)
  def _reduce_179(val, _values, result)
     result = Factory.RESERVED(val[0][:value]) ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 641)
  def _reduce_180(val, _values, result)
     result = Factory.RESERVED(val[0][:value]) ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 642)
  def _reduce_181(val, _values, result)
     result = Factory.RESERVED(val[0][:value]) ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 643)
  def _reduce_182(val, _values, result)
     result = Factory.RESERVED(val[0][:value]) ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 649)
  def _reduce_183(val, _values, result)
     result = Factory.LIST(val[1]); loc result, val[0], val[3] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 650)
  def _reduce_184(val, _values, result)
     result = Factory.literal([]) ; loc result, val[0], val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 651)
  def _reduce_185(val, _values, result)
     result = Factory.LIST(val[1]); loc result, val[0], val[3] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 652)
  def _reduce_186(val, _values, result)
     result = Factory.literal([]) ; loc result, val[0], val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 655)
  def _reduce_187(val, _values, result)
     result = Factory.HASH(val[1]); loc result, val[0], val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 656)
  def _reduce_188(val, _values, result)
     result = Factory.HASH(val[1]); loc result, val[0], val[3] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 657)
  def _reduce_189(val, _values, result)
     result = Factory.literal({}) ; loc result, val[0], val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 660)
  def _reduce_190(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 661)
  def _reduce_191(val, _values, result)
     result = val[0].push val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 664)
  def _reduce_192(val, _values, result)
     result = Factory.KEY_ENTRY(val[0], val[2]); loc result, val[1] 
    result
  end
.,.,

# reduce 193 omitted

# reduce 194 omitted

# reduce 195 omitted

module_eval(<<'.,.,', 'egrammar.ra', 672)
  def _reduce_196(val, _values, result)
     result = Factory.literal(val[0][:value]) ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 673)
  def _reduce_197(val, _values, result)
     result = Factory.literal(val[0][:value]) ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 675)
  def _reduce_198(val, _values, result)
     result = Factory.string(val[0], *val[1]) ; loc result, val[0], val[1][-1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 676)
  def _reduce_199(val, _values, result)
     result = Factory.literal(val[0][:value]); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 677)
  def _reduce_200(val, _values, result)
     result = Factory.literal(val[0][:value]); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 678)
  def _reduce_201(val, _values, result)
     result = Factory.literal(val[0][:value]); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 679)
  def _reduce_202(val, _values, result)
     result = [val[0]] + val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 680)
  def _reduce_203(val, _values, result)
     result = Factory.TEXT(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 683)
  def _reduce_204(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 684)
  def _reduce_205(val, _values, result)
     result = [val[0]] + val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 687)
  def _reduce_206(val, _values, result)
     result = Factory.HEREDOC(val[0][:value], val[1]); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 690)
  def _reduce_207(val, _values, result)
     result = Factory.SUBLOCATE(val[0], val[1]); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 691)
  def _reduce_208(val, _values, result)
     result = Factory.SUBLOCATE(val[0], val[1]); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 694)
  def _reduce_209(val, _values, result)
     result = Factory.EPP(val[1], val[2]); loc result, val[0] 
    result
  end
.,.,

# reduce 210 omitted

# reduce 211 omitted

module_eval(<<'.,.,', 'egrammar.ra', 701)
  def _reduce_212(val, _values, result)
     result = nil 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 702)
  def _reduce_213(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 703)
  def _reduce_214(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 706)
  def _reduce_215(val, _values, result)
     result = Factory.RENDER_STRING(val[0][:value]); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 707)
  def _reduce_216(val, _values, result)
     result = Factory.RENDER_EXPR(val[1]); loc result, val[0], val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 708)
  def _reduce_217(val, _values, result)
     result = Factory.RENDER_EXPR(Factory.block_or_expression(*val[2])); loc result, val[0], val[4] 
    result
  end
.,.,

# reduce 218 omitted

# reduce 219 omitted

module_eval(<<'.,.,', 'egrammar.ra', 714)
  def _reduce_220(val, _values, result)
     result = Factory.QREF(val[0][:value])  ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 717)
  def _reduce_221(val, _values, result)
     result = Factory.literal(val[0][:value]); loc result, val[0] 
    result
  end
.,.,

# reduce 222 omitted

module_eval(<<'.,.,', 'egrammar.ra', 723)
  def _reduce_223(val, _values, result)
     result = nil 
    result
  end
.,.,

# reduce 224 omitted

# reduce 225 omitted

# reduce 226 omitted

# reduce 227 omitted

# reduce 228 omitted

# reduce 229 omitted

# reduce 230 omitted

# reduce 231 omitted

# reduce 232 omitted

# reduce 233 omitted

# reduce 234 omitted

# reduce 235 omitted

# reduce 236 omitted

# reduce 237 omitted

# reduce 238 omitted

# reduce 239 omitted

# reduce 240 omitted

# reduce 241 omitted

# reduce 242 omitted

# reduce 243 omitted

# reduce 244 omitted

module_eval(<<'.,.,', 'egrammar.ra', 751)
  def _reduce_245(val, _values, result)
     result = nil
    result
  end
.,.,

def _reduce_none(val, _values, result)
  val[0]
end

      end   # class Parser
      end   # module Parser
    end   # module Pops
  end   # module Puppet
