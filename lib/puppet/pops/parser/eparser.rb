#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.9
# from Racc grammer file "".
#

require 'racc/parser.rb'

require 'puppet'
require 'puppet/pops'

module Puppet
  class ParseError < Puppet::Error; end
  class ImportError < Racc::ParseError; end
  class AlreadyImportedError < ImportError; end
end

module Puppet
  module Pops
    module Parser
      class Parser < Racc::Parser

module_eval(<<'...end egrammar.ra/module_eval...', 'egrammar.ra', 782)

# Make emacs happy
# Local Variables:
# mode: ruby
# End:
...end egrammar.ra/module_eval...
##### State transition tables begin ###

clist = [
'64,66,332,322,51,59,247,60,247,126,-131,-242,247,292,115,115,333,266',
'111,251,267,411,390,141,18,251,292,248,115,248,44,350,47,248,53,12,-245',
'50,38,41,351,46,39,10,11,117,117,52,17,114,114,40,-131,-242,15,16,142',
'116,116,117,64,66,71,114,51,59,376,60,45,115,236,116,37,67,115,69,70',
'68,-245,321,54,55,57,56,18,48,-161,-244,58,-243,44,386,47,385,53,119',
'-164,50,38,41,117,46,39,115,114,117,239,52,17,114,327,40,116,291,15',
'16,440,116,292,439,64,66,71,289,51,59,268,60,45,-244,-240,-243,37,67',
'117,69,70,-231,114,357,54,55,57,56,18,48,116,386,58,385,44,268,47,359',
'53,12,317,50,38,41,73,46,39,10,11,290,237,52,17,64,66,40,-240,143,15',
'16,270,269,315,-231,64,66,71,314,51,59,346,60,45,76,77,78,37,67,115',
'69,70,281,282,261,54,55,57,56,18,48,367,368,58,287,44,288,47,370,53',
'12,236,50,38,41,125,46,39,10,11,117,373,52,17,114,263,40,327,378,15',
'16,379,116,79,81,80,82,71,342,115,83,83,226,45,383,64,66,37,67,143,69',
'70,341,387,389,54,55,57,56,247,48,64,66,58,262,51,59,225,60,429,117',
'75,251,162,114,159,398,263,400,263,248,287,116,157,141,18,-163,138,64',
'66,-162,44,143,47,279,53,12,331,50,38,41,133,46,39,10,11,404,71,52,17',
'75,125,40,83,287,15,16,142,67,83,410,236,247,71,328,125,414,141,389',
'45,138,64,66,37,67,143,69,70,416,417,418,54,55,57,56,247,48,64,66,58',
'71,51,59,419,60,427,-161,83,251,423,142,67,424,425,83,83,248,75,287',
'434,141,18,72,138,436,437,438,44,327,47,240,53,12,317,50,38,41,407,46',
'39,10,11,,71,52,17,,,40,,,15,16,142,67,,,64,66,71,,51,59,,60,45,,,,37',
'67,,69,70,,,,54,55,57,56,18,48,,,58,,44,,47,,53,119,,50,38,41,,46,39',
',,,,52,17,,,40,,,15,16,,,,,64,66,71,,51,59,,60,45,,,,37,67,,69,70,,',
',54,55,57,56,18,48,,,58,,44,,47,,53,12,,50,38,41,,46,39,10,11,,,52,17',
',,40,,,15,16,,,,,64,66,71,,51,59,,60,45,,,,37,67,,69,70,,,,54,55,57',
'56,18,48,,,58,,44,,47,,53,12,,50,38,41,,46,39,10,11,,,52,17,,,40,,,15',
'16,,,,,,,71,,,,,,45,,64,66,37,67,143,69,70,,,,54,55,57,56,,48,64,66',
'58,,51,59,,60,422,,,,,,,,,,,,,,,141,18,,138,,,,44,,47,,53,12,,50,38',
'41,,46,39,10,11,,71,52,17,,,40,,,15,16,142,67,,,64,66,71,,51,59,,60',
'45,,,,37,67,,69,70,,,,54,55,57,56,18,48,,,58,,44,,47,,53,119,,50,38',
'41,,46,39,,,,,52,17,,,40,,,15,16,,,,,64,66,71,,51,59,,60,45,,,,37,67',
',69,70,,,,54,55,57,56,18,48,,,58,,44,,47,,53,119,,50,38,41,,46,39,,',
',,52,17,,,40,,,15,16,,,,,64,66,71,,51,59,,60,45,,,,37,67,,69,70,,,,54',
'55,57,56,18,48,,,58,,44,,47,,53,119,,50,38,41,,46,39,,,,,52,17,,,40',
',,15,16,,,,,64,66,71,,51,59,,60,45,,,,37,67,,69,70,,,,54,55,57,56,18',
'48,,,58,,44,,47,,53,12,,50,38,41,,46,39,10,11,,,52,17,,,40,,,15,16,',
',,,64,66,71,,51,59,,60,45,,,,37,67,,69,70,,,,54,55,57,56,18,48,,,58',
',44,,47,,53,119,,50,38,41,,46,39,,,,,52,17,,,40,,,15,16,,,,,64,66,71',
',51,59,,60,45,,,,37,67,,69,70,,,,54,55,57,56,18,48,,,58,,44,,47,,53',
'119,,50,38,41,,46,39,,,,,52,17,,,40,,,15,16,,,,,64,66,71,,51,59,,60',
'45,,,,37,67,,69,70,,,,54,55,57,56,18,48,,,58,,44,,47,,53,119,,50,38',
'41,,46,39,,,,,52,17,,,40,,,15,16,,,,,64,66,71,,51,59,,60,45,,,,37,67',
',69,70,,,,54,55,57,56,18,48,,,58,,44,,47,,53,119,,50,38,41,,46,39,,',
',,52,17,,,40,,,15,16,,,,,64,66,71,,51,59,,60,45,,,,37,67,,69,70,,,,54',
'55,57,56,18,48,,,58,,44,,47,,53,119,,50,38,41,,46,39,,,,,52,17,,,40',
',,15,16,,,,,64,66,71,,51,59,,60,45,,,,37,67,,69,70,,,,54,55,57,56,18',
'48,,,58,,44,,47,,53,119,,50,38,41,,46,39,,,,,52,17,,,40,,,15,16,,,,',
'64,66,71,,51,59,,60,45,,,,37,67,,69,70,,,,54,55,57,56,18,48,,,58,,44',
',47,,53,12,,50,38,41,,46,39,10,11,,,52,17,,,40,,,15,16,,,,,64,66,71',
',51,59,,60,45,,,,37,67,,69,70,,,,54,55,57,56,18,48,,,58,,44,,47,,53',
'119,,50,38,41,,46,39,,,,,52,17,,,40,,,15,16,,,,,64,66,71,,51,59,,60',
'45,,288,,37,67,,69,70,,,,54,55,57,56,18,48,,,58,,44,,47,,53,119,,50',
'38,41,,46,39,,,,,52,17,,,40,,,15,16,,,,,,,71,,,,,,45,,,,37,67,,69,70',
',,,54,55,57,56,,48,64,66,58,,51,59,,60,150,84,,,,,,,,,,,,,,105,18,108',
',103,104,,44,,47,,53,12,,50,38,41,,46,39,10,11,,,52,17,107,,40,,,15',
'16,,,,,64,66,71,,51,59,,60,45,,,85,37,67,,69,70,,,,54,55,57,56,18,48',
',,58,,44,,47,,53,12,,50,38,41,,46,39,10,11,,,52,17,,,40,,,15,16,,,,',
'64,66,71,,51,59,,60,45,,,,37,67,,69,70,,,,54,55,57,56,18,48,,,58,,44',
',47,,53,119,,50,38,41,,46,39,,,,,52,17,,,40,,,15,16,,,,,64,66,71,,51',
'59,146,60,45,,,,37,67,,69,70,,,,54,55,57,56,18,48,,,58,,44,,47,,53,12',
',50,38,41,,46,39,10,11,,,52,17,,,40,,,15,16,,,,,64,66,71,,51,59,148',
'60,45,,,,37,67,,69,70,,,,54,55,57,56,18,48,,,58,,44,,47,,53,12,,50,38',
'41,,46,39,10,11,,,52,17,,,40,,,15,16,,,,,,,71,,,,,,45,,,,37,67,,69,70',
',,,54,55,57,56,,48,64,66,58,,51,59,,60,150,84,,,,,,,,,,,,,,105,18,108',
',103,104,,44,,47,,53,12,,50,38,41,,46,39,10,11,,,52,17,107,,40,,,15',
'16,,,,,64,66,71,,51,59,,60,45,,,85,37,67,,69,70,,,,54,55,57,56,18,48',
',,58,,44,,47,,53,12,,50,38,41,,46,39,10,11,,,52,17,,,40,,,15,16,,,,',
',,71,,,,,,45,,,,37,67,,69,70,,,,54,55,57,56,,48,64,66,58,,51,59,,60',
'325,84,,,,,,,,,,,,,,105,18,108,,103,104,,44,,47,,53,12,,50,38,41,,46',
'39,10,11,,,52,17,107,,40,,,15,16,,,,,64,66,71,,51,59,,60,45,,,,37,67',
',69,70,,,,54,55,57,56,18,48,,,58,,44,,47,,53,119,,50,38,41,,46,39,,',
',,52,17,,,40,,,15,16,,,,,64,66,71,,51,59,,161,45,,,,37,67,,69,70,,,',
'54,55,57,56,18,48,,,58,,44,,47,,53,119,,50,38,41,,46,39,,,,,52,17,,',
'40,,,15,16,,,,,64,66,71,,51,59,,60,45,,,,37,67,,69,70,,,,54,55,57,56',
'18,48,,,58,,44,,47,,53,12,,50,38,41,,46,39,10,11,,,52,17,,,40,,,15,16',
',,,,64,66,71,,51,59,,60,45,,,,37,67,,69,70,,,,54,55,57,56,18,48,,,58',
',44,,47,,53,12,,50,38,41,,46,39,10,11,,,52,17,,,40,,,15,16,,,,,64,66',
'71,,51,59,,60,45,,,,37,67,,69,70,,,,54,55,57,56,18,48,,,58,,44,,47,',
'53,12,,50,38,41,,46,39,10,11,,,52,17,,,40,,,15,16,,,,,64,66,71,,51,59',
',60,45,,,,37,67,,69,70,,,,54,55,57,56,18,48,,,58,,44,,47,,53,12,,50',
'38,41,,46,39,10,11,,,52,17,,,40,,,15,16,,,,,64,66,71,,51,59,,60,45,',
',,37,67,,69,70,,,,54,55,57,56,18,48,,,58,,44,,47,,53,12,,50,38,41,,46',
'39,10,11,,,52,17,,,40,,,15,16,,,,,64,66,71,,51,59,,60,45,,,,37,67,,69',
'70,,,,54,55,57,56,18,48,,,58,,44,,47,,53,12,,50,38,41,,46,39,10,11,',
',52,17,,,40,,,15,16,,,,,64,66,71,,51,59,,60,45,,,,37,67,,69,70,,,,54',
'55,57,56,18,48,,,58,,44,,47,,53,12,,50,38,41,,46,39,10,11,,,52,17,,',
'40,,,15,16,,,,,64,66,71,,51,59,,60,45,,,,37,67,,69,70,,,,54,55,57,56',
'18,48,,,58,,44,,47,,53,12,,50,38,41,,46,39,10,11,,,52,17,,,40,,,15,16',
',,,,64,66,71,,51,59,,60,45,,,,37,67,,69,70,,,,54,55,57,56,18,48,,,58',
',44,,47,,53,12,,50,38,41,,46,39,10,11,,,52,17,,,40,,,15,16,,,,,64,66',
'71,,51,59,,60,45,,,,37,67,,69,70,,,,54,55,57,56,18,48,,,58,,44,,47,',
'53,12,,50,38,41,,46,39,10,11,,,52,17,,,40,,,15,16,,,,,64,66,71,,51,59',
',60,45,,,,37,67,,69,70,,,,54,55,57,56,18,48,,,58,,44,,47,,53,12,,50',
'38,41,,46,39,10,11,,,52,17,,,40,,,15,16,,,,,64,66,71,,51,59,,60,45,',
',,37,67,,69,70,,,,54,55,57,56,18,48,,,58,,178,193,184,194,53,186,196',
'187,38,177,,180,175,,,,,52,17,197,192,176,,,15,174,,,,,,,71,,,,,195',
'179,,,,37,67,,69,70,,,,188,189,191,190,,185,198,,58,64,66,,84,51,59',
',60,,84,,,,,,,,105,,108,,103,104,105,18,108,,103,104,,44,,47,,53,119',
',50,38,41,,46,39,107,,,,52,17,107,,40,,,15,16,,,,,64,66,71,,51,59,,60',
'45,,,,37,67,,69,70,,,,54,55,57,56,18,48,,,58,,44,,47,,53,119,,50,38',
'41,,46,39,,,,,52,17,,,40,,,15,16,,,,,64,66,71,,51,59,,60,45,,,,37,67',
',69,70,,,,54,55,57,56,18,48,,,58,,44,,47,,53,119,,50,38,41,,46,39,,',
',,52,17,,,40,,,15,16,,,,,64,66,71,,51,59,,60,45,,,,37,67,,69,70,,,,54',
'55,57,56,18,48,,,58,,44,,47,,53,119,,50,38,41,,46,39,,,,,52,17,,,40',
',,15,16,,,,,64,66,71,,51,59,,60,45,,,,37,67,,69,70,,,,54,55,57,56,18',
'48,,,58,,44,,47,,53,119,,50,38,41,,46,39,,,,,52,17,,,40,,,15,16,,,,',
'64,66,71,,51,59,,60,45,,,,37,67,,69,70,,,,54,55,57,56,18,48,,,58,,44',
',47,,53,119,,50,38,41,,46,39,,,,,52,17,,,40,,,15,16,,,,,64,66,71,,51',
'59,,60,45,,,,37,67,,69,70,,,,54,55,57,56,18,48,,,58,,44,,47,,53,119',
',50,38,41,,46,39,,,,,52,17,,,40,,,15,16,,,,,64,66,71,,51,59,,60,45,',
',,37,67,,69,70,,,,54,55,57,56,18,48,,,58,,44,,47,,53,119,,50,38,41,',
'46,39,,,,,52,17,,,40,,,15,16,,,,,64,66,71,,51,59,,60,45,,,,37,67,,69',
'70,,,,54,55,57,56,18,48,,,58,,44,,47,,53,119,,50,38,41,,46,39,,,,,52',
'17,,,40,,,15,16,,,,,64,66,71,,51,59,,60,45,,,,37,67,,69,70,,,,54,55',
'57,56,18,48,,,58,,44,,47,,53,119,,50,38,41,,46,39,,,,,52,17,,,40,,,15',
'16,,,,,64,66,71,,51,59,,60,45,,,,37,67,,69,70,,,,54,55,57,56,18,48,',
',58,,44,,47,,53,119,,50,38,41,,46,39,,,,,52,17,,,40,,,15,16,,,,,64,66',
'71,,51,59,,60,45,,,,37,67,,69,70,,,,54,55,57,56,18,48,,,58,,44,,47,',
'53,119,,50,38,41,,46,39,,,,,52,17,,,40,,,15,16,,,,,64,66,71,,51,59,',
'60,45,,,,37,67,,69,70,,,,54,55,57,56,18,48,,,58,,44,,47,,53,119,,50',
'38,41,,46,39,,,,,52,17,,,40,,,15,16,,,,,64,66,71,,51,59,,60,45,,,,37',
'67,,69,70,,,,54,55,57,56,18,48,,,58,,44,,47,,53,119,,50,38,41,,46,39',
',,,,52,17,,,40,,,15,16,,,,,64,66,71,,51,59,,60,45,,,,37,67,,69,70,,',
',54,55,57,56,18,48,,,58,,44,,47,,53,119,,50,38,41,,46,39,,,,,52,17,',
',40,,,15,16,,,,,64,66,71,,51,59,,60,45,,,,37,67,,69,70,,,,54,55,57,56',
'18,48,,,58,,44,,47,,53,119,,50,38,41,,46,39,,,,,52,17,,,40,,,15,16,',
',,,64,66,71,,51,59,,60,45,,,,37,67,,69,70,,,,54,55,57,56,18,48,,,58',
',44,,47,,53,119,,50,38,41,,46,39,,,,,52,17,,,40,,,15,16,,,,,64,66,71',
',51,59,,60,45,,,,37,67,,69,70,,,,54,55,57,56,18,48,,,58,,44,,47,,53',
'119,,50,38,41,,46,39,,,,,52,17,,,40,,,15,16,,,,,64,66,71,,51,59,,60',
'45,,,,37,67,,69,70,,,,54,55,57,56,18,48,,,58,,44,,47,,53,119,,50,38',
'41,,46,39,,,,,52,17,,,40,,,15,16,,,,,64,66,71,,51,59,,60,45,,,,37,67',
',69,70,,,,54,55,57,56,18,48,,,58,,44,,47,,53,119,,50,38,41,,46,39,,',
',,52,17,,,40,,,15,16,,,,,,,71,,,,,,45,,,222,37,67,,69,70,,,,54,55,57',
'56,,48,64,66,58,,51,59,,60,305,193,304,194,,302,196,306,,299,,301,303',
',,,18,224,,197,192,307,44,,47,300,53,12,,50,38,41,,46,39,10,11,195,308',
'52,17,,,40,,,15,16,,,311,312,310,309,71,313,198,,,,45,,,,37,67,,69,70',
',,,54,55,57,56,,48,64,66,58,84,51,59,,60,391,,,,,,,,,105,,108,,103,104',
',18,,,,,,44,,47,,53,119,,50,38,41,,46,39,107,,,,52,17,,,40,,,15,16,',
',,,64,66,71,,51,59,,60,45,,,,37,67,,69,70,,,,54,55,57,56,18,48,,,58',
',44,,47,,53,12,,50,38,41,,46,39,10,11,,,52,17,,,40,,,15,16,,,,,64,66',
'71,,51,59,,60,45,,,,37,67,,69,70,,,,54,55,57,56,18,48,,,58,,44,,47,',
'53,119,,50,38,41,,46,39,,,,,52,17,,,40,,,15,16,,,,,64,66,71,,51,59,',
'60,45,,,,37,67,,69,70,,,,54,55,57,56,18,48,,,58,,44,,47,,53,119,,50',
'38,41,,46,39,,,,,52,17,,,40,,,15,16,,,,,64,66,71,,51,59,,60,45,,,,37',
'67,,69,70,,,,54,55,57,56,18,48,,,58,,44,,47,,53,119,,50,38,41,,46,39',
',,,,52,17,,,40,,,15,16,,,,,64,66,71,,51,59,,60,45,,,,37,67,,69,70,,',
',54,55,57,56,18,48,,,58,,44,,47,,53,119,,50,38,41,,46,39,,,,,52,17,',
',40,,,15,16,,,,,64,66,71,,51,59,,60,45,,,,37,67,,69,70,,,,54,55,57,56',
'18,48,,,58,,44,,47,,53,119,,50,38,41,,46,39,,,,,52,17,,,40,,,15,16,',
',,,64,66,71,,51,59,,60,45,,,,37,67,,69,70,,,,54,55,57,56,18,48,,,58',
',44,,47,,53,119,,50,38,41,,46,39,,,,,52,17,,,40,,,15,16,,,,,64,66,71',
',51,59,,60,45,,,,37,67,,69,70,,,,54,55,57,56,18,48,,,58,,44,,47,,53',
'119,,50,38,41,,46,39,,,,,52,17,,,40,,,15,16,,,,,64,66,71,,51,59,,60',
'45,,,,37,67,,69,70,,,,54,55,57,56,18,48,,,58,,44,,47,,53,119,,50,38',
'41,,46,39,,,,,52,17,,,40,,,15,16,,,,,64,66,71,,51,59,,60,45,,,,37,67',
',69,70,,,,54,55,57,56,18,48,,,58,,44,,47,,53,119,,50,38,41,,46,39,,',
',,52,17,,,40,,,15,16,,,,,64,66,71,,51,59,,60,45,,,,37,67,,69,70,,,,54',
'55,57,56,18,48,,,58,,44,,47,,53,119,,50,38,41,,46,39,,,,,52,17,,,40',
',,15,16,,,,,64,66,71,,51,59,,60,45,,,,37,67,,69,70,,,,54,55,57,56,18',
'48,,,58,,44,,47,,53,119,,50,38,41,,46,39,,,,,52,17,,,40,,,15,16,,,,',
'64,66,71,,51,59,,60,45,,,,37,67,,69,70,,,,54,55,57,56,18,48,,,58,,44',
',47,,53,12,,50,38,41,,46,39,10,11,,,52,17,,,40,,,15,16,,,,,64,66,71',
',51,59,,60,45,,,,37,67,,69,70,,,,54,55,57,56,18,48,,,58,,44,,47,,53',
'12,,50,38,41,,46,39,10,11,,,52,17,,,40,,,15,16,,,,,,,71,,,,,,45,,,,37',
'67,,69,70,,,,54,55,57,56,,48,64,66,58,,51,59,,60,305,193,304,194,,302',
'196,306,,299,,301,303,,,,18,253,,197,192,307,44,,47,300,53,12,,50,38',
'41,,46,39,10,11,195,308,52,17,,,40,,,15,16,,,311,312,310,309,71,313',
'198,,,,45,,,,37,67,,69,70,,,,54,55,57,56,,48,64,66,58,,51,59,,60,335',
'84,,,,,,,,,,,,,,105,18,108,,103,104,,44,,47,,53,12,,50,38,41,,46,39',
'10,11,,,52,17,107,,40,,,15,16,,,,,,,71,,86,87,,,45,,,85,37,67,,69,70',
',,,54,55,57,56,,48,64,66,58,,51,59,,60,337,,,,,,,,,,,,,,,,18,,,,,,44',
',47,,53,12,,50,38,41,,46,39,10,11,,,52,17,,,40,,,15,16,,,,,64,66,71',
',51,59,,60,45,,,,37,67,,69,70,,,,54,55,57,56,18,48,,,58,,44,,47,,53',
'119,,50,38,41,,46,39,,,,,52,17,,,40,,,15,16,,,,,,,71,,,,,,45,,,,37,67',
',69,70,,,,54,55,57,56,,48,64,66,58,,51,59,,60,352,,,,,,,,,,,,,,,,18',
',,,,,44,,47,,53,12,,50,38,41,,46,39,10,11,,,52,17,,,40,,,15,16,,,,,64',
'66,71,,51,59,,60,45,,,,37,67,,69,70,,,,54,55,57,56,18,48,,,58,,44,,47',
',53,12,,50,38,41,,46,39,10,11,,,52,17,,,40,,,15,16,,,,,64,66,71,,51',
'59,,60,45,,,,37,67,,69,70,,,,54,55,57,56,18,48,,,58,,44,,47,,53,119',
',50,38,41,,46,39,,,,,52,17,,,40,,,15,16,,,,,,,71,,,,,,45,,,,37,67,,69',
'70,84,,343,54,55,57,56,,48,,,58,100,95,105,,108,,103,104,,96,98,97,99',
',,,,,,,,,,,,,,,107,,,,102,101,,,88,89,91,90,93,94,,86,87,84,,256,,,85',
',,,,,,100,95,105,,108,,103,104,,96,98,97,99,,,,92,,,,,,,,,,,,107,,,',
'102,101,,,88,89,91,90,93,94,,86,87,84,,255,,,85,,,,,,,100,95,105,,108',
',103,104,,96,98,97,99,,,,92,,,,,,,,,,,,107,,,,102,101,,,88,89,91,90',
'93,94,,86,87,84,,254,,,85,,,,,,,100,95,105,,108,84,103,104,,96,98,97',
'99,,,,92,,,105,,108,,103,104,,,,107,,,,102,101,,84,88,89,91,90,93,94',
',86,87,107,,100,95,105,85,108,,103,104,,96,98,97,99,86,87,,,,,,85,,',
',,,92,,107,,,,102,101,,,88,89,91,90,93,94,84,86,87,,,,,,85,,,,100,95',
'105,318,108,,103,104,,96,98,97,99,,,,,,,92,,,,,,,,,107,,,,102,101,,84',
'88,89,91,90,93,94,,86,87,,,100,95,105,85,108,84,103,104,,96,98,97,99',
',,,,,,105,,108,,103,104,,92,,107,,,,102,101,,84,88,89,91,90,93,94,,86',
'87,107,,100,95,105,85,108,,103,104,,96,98,97,99,86,87,,,,,,85,,,,,,92',
',107,,,,102,101,,84,88,89,91,90,93,94,,86,87,,,100,95,105,85,108,,103',
'104,,96,98,97,99,,,,,,,,,,,,,,92,,107,,,,102,101,,,88,89,91,90,93,94',
'84,86,87,,,293,,,85,,,,100,95,105,,108,,103,104,,96,98,97,99,,,,,,,92',
',,,,,,,,107,,,,102,101,,84,88,89,91,90,93,94,,86,87,,,100,95,105,85',
'108,,103,104,,96,98,97,99,,,,,,,,,,,,,,92,,107,,,,102,101,,84,88,89',
'91,90,93,94,,86,87,,,100,95,105,85,108,,103,104,,96,98,97,99,,281,282',
',,,,,,,,,,92,,107,,,,102,101,,84,88,89,91,90,93,94,,86,87,,,100,95,105',
'85,108,,103,104,,96,98,97,99,,,,,,,,,,,,,,92,,107,,,,,101,,84,88,89',
'91,90,93,94,,86,87,,,100,95,105,85,108,,103,104,,96,98,97,99,,,,,,,',
',,,,,,92,,107,,,,,,,84,88,89,91,90,93,94,,86,87,,,,95,105,85,108,,103',
'104,,96,,,,,,,,,,,,,,,,,92,,107,,,,,,,84,88,89,91,90,93,94,,86,87,,',
',95,105,85,108,,103,104,,96,,,,,,84,,,,,,,,,,,92,,107,105,,108,,103',
'104,84,88,89,91,90,93,94,,86,87,,,,95,105,85,108,,103,104,107,96,,,',
',,,88,89,91,90,93,94,,86,87,,92,,107,,85,,,,,,88,89,91,90,93,94,84,86',
'87,,,,,,85,,,92,100,95,105,285,108,,103,104,84,96,98,97,99,,,,,,,92',
',95,105,,108,,103,104,107,96,,,102,101,,,88,89,91,90,93,94,,86,87,,',
',107,,85,,,,,,88,89,91,90,93,94,84,86,87,,,,,,85,,,92,100,95,105,,108',
',103,104,84,96,98,97,99,,,,,,,92,,,105,,108,,103,104,107,,,,102,101',
',84,88,89,91,90,93,94,,86,87,,,,107,105,85,108,,103,104,,88,89,91,90',
'93,94,84,86,87,,,,,,85,,,92,,107,105,,108,,103,104,84,88,89,91,90,,',
',86,87,,92,100,95,105,85,108,,103,104,107,96,98,97,99,,,,88,89,91,90',
',,,86,87,,92,,107,,85,,102,101,,,88,89,91,90,93,94,84,86,87,,,,,,85',
',,92,100,95,105,420,108,,103,104,,96,98,97,99,,,,,,,92,,,,,,,,,107,',
',,102,101,,84,88,89,91,90,93,94,,86,87,,,100,95,105,85,108,84,103,104',
',96,98,97,99,,,,,,,105,,108,,103,104,,92,,107,,,,102,101,,,88,89,91',
'90,93,94,,86,87,107,,,,,85,,,,,91,90,,84,,86,87,,,,,,85,,,100,95,105',
'92,108,84,103,104,,96,98,97,99,,,,,,,105,92,108,,103,104,,,,107,,,,102',
'101,,,88,89,91,90,93,94,,86,87,107,,,,,85,,,,,91,90,,,,86,87,,305,193',
'304,194,85,302,196,306,,299,92,301,303,,,,,,,197,192,307,,,,300,,92',
',,,,,,,,,195,308,,,,,,,,,,,,311,312,310,309,,313,198,305,193,304,194',
',302,196,306,,299,,301,303,,,,,,,197,192,307,,,,300,,,,,,,,,,,,195,308',
',,,,,,,,,,,311,312,310,309,,313,198,305,193,304,194,,302,196,306,,299',
',301,303,,,,,,,197,192,307,,,,300,,,,,,,,,,,,195,308,,,,,,,,,,,,311',
'312,310,309,,313,198,305,193,304,194,,302,196,306,,299,,301,303,,,,',
',,197,192,307,,,,300,,,,,,,,,,,,195,308,,,,,,,,,,,,311,312,310,309,',
'313,198' ]
        racc_action_table = arr = ::Array.new(7130, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

clist = [
'0,0,252,236,0,0,327,0,249,43,177,190,236,338,186,12,252,149,12,327,149',
'382,338,262,0,236,382,327,321,249,0,264,0,236,0,0,189,0,0,0,265,0,0',
'0,0,186,12,0,0,186,12,0,177,190,0,0,262,186,12,321,424,424,0,321,424',
'424,321,424,0,185,131,321,0,0,119,0,0,0,189,234,0,0,0,0,424,0,177,188',
'0,191,424,383,424,383,424,424,186,424,424,424,185,424,424,47,185,119',
'124,424,424,119,278,424,185,200,424,424,433,119,200,433,4,4,424,183',
'4,4,283,4,424,188,176,191,424,424,47,424,424,175,47,284,424,424,424',
'424,4,424,47,335,424,335,4,152,4,286,4,4,231,4,4,4,4,4,4,4,4,183,122',
'4,4,157,157,4,176,157,4,4,154,154,230,175,417,417,4,228,417,417,260',
'417,4,7,7,7,4,4,184,4,4,357,357,134,4,4,4,4,417,4,294,296,4,298,417',
'300,417,316,417,417,112,417,417,417,224,417,417,417,417,184,319,417',
'417,184,223,417,323,324,417,417,326,184,7,7,7,7,417,258,48,110,109,106',
'417,334,187,187,417,417,187,417,417,257,336,337,417,417,417,417,159',
'417,416,416,417,136,416,416,105,416,416,48,74,159,72,48,68,344,145,356',
'147,159,358,48,67,187,416,52,187,346,346,51,416,346,416,159,416,416',
'250,416,416,416,49,416,416,416,416,366,187,416,416,163,368,416,168,372',
'416,416,187,187,169,377,132,248,416,247,42,386,346,387,416,346,261,261',
'416,416,261,416,416,389,390,393,416,416,416,416,125,416,414,414,416',
'346,414,414,396,414,414,41,170,125,402,346,346,403,409,8,171,125,5,173',
'421,261,414,1,261,426,428,430,414,241,414,125,414,414,435,414,414,414',
'369,414,414,414,414,,261,414,414,,,414,,,414,414,261,261,,,180,180,414',
',180,180,,180,414,,,,414,414,,414,414,,,,414,414,414,414,180,414,,,414',
',180,,180,,180,180,,180,180,180,,180,180,,,,,180,180,,,180,,,180,180',
',,,,10,10,180,,10,10,,10,180,,,,180,180,,180,180,,,,180,180,180,180',
'10,180,,,180,,10,,10,,10,10,,10,10,10,,10,10,10,10,,,10,10,,,10,,,10',
'10,,,,,11,11,10,,11,11,,11,10,,,,10,10,,10,10,,,,10,10,10,10,11,10,',
',10,,11,,11,,11,11,,11,11,11,,11,11,11,11,,,11,11,,,11,,,11,11,,,,,',
',11,,,,,,11,,50,50,11,11,50,11,11,,,,11,11,11,11,,11,398,398,11,,398',
'398,,398,398,,,,,,,,,,,,,,,50,398,,50,,,,398,,398,,398,398,,398,398',
'398,,398,398,398,398,,50,398,398,,,398,,,398,398,50,50,,,15,15,398,',
'15,15,,15,398,,,,398,398,,398,398,,,,398,398,398,398,15,398,,,398,,15',
',15,,15,15,,15,15,15,,15,15,,,,,15,15,,,15,,,15,15,,,,,16,16,15,,16',
'16,,16,15,,,,15,15,,15,15,,,,15,15,15,15,16,15,,,15,,16,,16,,16,16,',
'16,16,16,,16,16,,,,,16,16,,,16,,,16,16,,,,,17,17,16,,17,17,,17,16,,',
',16,16,,16,16,,,,16,16,16,16,17,16,,,16,,17,,17,,17,17,,17,17,17,,17',
'17,,,,,17,17,,,17,,,17,17,,,,,18,18,17,,18,18,,18,17,,,,17,17,,17,17',
',,,17,17,17,17,18,17,,,17,,18,,18,,18,18,,18,18,18,,18,18,18,18,,,18',
'18,,,18,,,18,18,,,,,179,179,18,,179,179,,179,18,,,,18,18,,18,18,,,,18',
'18,18,18,179,18,,,18,,179,,179,,179,179,,179,179,179,,179,179,,,,,179',
'179,,,179,,,179,179,,,,,385,385,179,,385,385,,385,179,,,,179,179,,179',
'179,,,,179,179,179,179,385,179,,,179,,385,,385,,385,385,,385,385,385',
',385,385,,,,,385,385,,,385,,,385,385,,,,,178,178,385,,178,178,,178,385',
',,,385,385,,385,385,,,,385,385,385,385,178,385,,,385,,178,,178,,178',
'178,,178,178,178,,178,178,,,,,178,178,,,178,,,178,178,,,,,44,44,178',
',44,44,,44,178,,,,178,178,,178,178,,,,178,178,178,178,44,178,,,178,',
'44,,44,,44,44,,44,44,44,,44,44,,,,,44,44,,,44,,,44,44,,,,,45,45,44,',
'45,45,,45,44,,,,44,44,,44,44,,,,44,44,44,44,45,44,,,44,,45,,45,,45,45',
',45,45,45,,45,45,,,,,45,45,,,45,,,45,45,,,,,46,46,45,,46,46,,46,45,',
',,45,45,,45,45,,,,45,45,45,45,46,45,,,45,,46,,46,,46,46,,46,46,46,,46',
'46,,,,,46,46,,,46,,,46,46,,,,,373,373,46,,373,373,,373,46,,,,46,46,',
'46,46,,,,46,46,46,46,373,46,,,46,,373,,373,,373,373,,373,373,373,,373',
'373,373,373,,,373,373,,,373,,,373,373,,,,,367,367,373,,367,367,,367',
'373,,,,373,373,,373,373,,,,373,373,373,373,367,373,,,373,,367,,367,',
'367,367,,367,367,367,,367,367,,,,,367,367,,,367,,,367,367,,,,,174,174',
'367,,174,174,,174,367,,174,,367,367,,367,367,,,,367,367,367,367,174',
'367,,,367,,174,,174,,174,174,,174,174,174,,174,174,,,,,174,174,,,174',
',,174,174,,,,,,,174,,,,,,174,,,,174,174,,174,174,,,,174,174,174,174',
',174,161,161,174,,161,161,,161,161,203,,,,,,,,,,,,,,203,161,203,,203',
'203,,161,,161,,161,161,,161,161,161,,161,161,161,161,,,161,161,203,',
'161,,,161,161,,,,,158,158,161,,158,158,,158,161,,,203,161,161,,161,161',
',,,161,161,161,161,158,161,,,161,,158,,158,,158,158,,158,158,158,,158',
'158,158,158,,,158,158,,,158,,,158,158,,,,,222,222,158,,222,222,,222',
'158,,,,158,158,,158,158,,,,158,158,158,158,222,158,,,158,,222,,222,',
'222,222,,222,222,222,,222,222,,,,,222,222,,,222,,,222,222,,,,,58,58',
'222,,58,58,58,58,222,,,,222,222,,222,222,,,,222,222,222,222,58,222,',
',222,,58,,58,,58,58,,58,58,58,,58,58,58,58,,,58,58,,,58,,,58,58,,,,',
'59,59,58,,59,59,59,59,58,,,,58,58,,58,58,,,,58,58,58,58,59,58,,,58,',
'59,,59,,59,59,,59,59,59,,59,59,59,59,,,59,59,,,59,,,59,59,,,,,,,59,',
',,,,59,,,,59,59,,59,59,,,,59,59,59,59,,59,60,60,59,,60,60,,60,60,202',
',,,,,,,,,,,,,202,60,202,,202,202,,60,,60,,60,60,,60,60,60,,60,60,60',
'60,,,60,60,202,,60,,,60,60,,,,,65,65,60,,65,65,,65,60,,,202,60,60,,60',
'60,,,,60,60,60,60,65,60,,,60,,65,,65,,65,65,,65,65,65,,65,65,65,65,',
',65,65,,,65,,,65,65,,,,,,,65,,,,,,65,,,,65,65,,65,65,,,,65,65,65,65',
',65,239,239,65,,239,239,,239,239,121,,,,,,,,,,,,,,121,239,121,,121,121',
',239,,239,,239,239,,239,239,239,,239,239,239,239,,,239,239,121,,239',
',,239,239,,,,,343,343,239,,343,343,,343,239,,,,239,239,,239,239,,,,239',
'239,239,239,343,239,,,239,,343,,343,,343,343,,343,343,343,,343,343,',
',,,343,343,,,343,,,343,343,,,,,70,70,343,,70,70,,70,343,,,,343,343,',
'343,343,,,,343,343,343,343,70,343,,,343,,70,,70,,70,70,,70,70,70,,70',
'70,,,,,70,70,,,70,,,70,70,,,,,342,342,70,,342,342,,342,70,,,,70,70,',
'70,70,,,,70,70,70,70,342,70,,,70,,342,,342,,342,342,,342,342,342,,342',
'342,342,342,,,342,342,,,342,,,342,342,,,,,73,73,342,,73,73,,73,342,',
',,342,342,,342,342,,,,342,342,342,342,73,342,,,342,,73,,73,,73,73,,73',
'73,73,,73,73,73,73,,,73,73,,,73,,,73,73,,,,,341,341,73,,341,341,,341',
'73,,,,73,73,,73,73,,,,73,73,73,73,341,73,,,73,,341,,341,,341,341,,341',
'341,341,,341,341,341,341,,,341,341,,,341,,,341,341,,,,,75,75,341,,75',
'75,,75,341,,,,341,341,,341,341,,,,341,341,341,341,75,341,,,341,,75,',
'75,,75,75,,75,75,75,,75,75,75,75,,,75,75,,,75,,,75,75,,,,,76,76,75,',
'76,76,,76,75,,,,75,75,,75,75,,,,75,75,75,75,76,75,,,75,,76,,76,,76,76',
',76,76,76,,76,76,76,76,,,76,76,,,76,,,76,76,,,,,77,77,76,,77,77,,77',
'76,,,,76,76,,76,76,,,,76,76,76,76,77,76,,,76,,77,,77,,77,77,,77,77,77',
',77,77,77,77,,,77,77,,,77,,,77,77,,,,,78,78,77,,78,78,,78,77,,,,77,77',
',77,77,,,,77,77,77,77,78,77,,,77,,78,,78,,78,78,,78,78,78,,78,78,78',
'78,,,78,78,,,78,,,78,78,,,,,79,79,78,,79,79,,79,78,,,,78,78,,78,78,',
',,78,78,78,78,79,78,,,78,,79,,79,,79,79,,79,79,79,,79,79,79,79,,,79',
'79,,,79,,,79,79,,,,,80,80,79,,80,80,,80,79,,,,79,79,,79,79,,,,79,79',
'79,79,80,79,,,79,,80,,80,,80,80,,80,80,80,,80,80,80,80,,,80,80,,,80',
',,80,80,,,,,81,81,80,,81,81,,81,80,,,,80,80,,80,80,,,,80,80,80,80,81',
'80,,,80,,81,,81,,81,81,,81,81,81,,81,81,81,81,,,81,81,,,81,,,81,81,',
',,,82,82,81,,82,82,,82,81,,,,81,81,,81,81,,,,81,81,81,81,82,81,,,81',
',82,,82,,82,82,,82,82,82,,82,82,82,82,,,82,82,,,82,,,82,82,,,,,83,83',
'82,,83,83,,83,82,,,,82,82,,82,82,,,,82,82,82,82,83,82,,,82,,83,83,83',
'83,83,83,83,83,83,83,,83,83,,,,,83,83,83,83,83,,,83,83,,,,,,,83,,,,',
'83,83,,,,83,83,,83,83,,,,83,83,83,83,,83,83,,83,84,84,,201,84,84,,84',
',120,,,,,,,,201,,201,,201,201,120,84,120,,120,120,,84,,84,,84,84,,84',
'84,84,,84,84,201,,,,84,84,120,,84,,,84,84,,,,,85,85,84,,85,85,,85,84',
',,,84,84,,84,84,,,,84,84,84,84,85,84,,,84,,85,,85,,85,85,,85,85,85,',
'85,85,,,,,85,85,,,85,,,85,85,,,,,86,86,85,,86,86,,86,85,,,,85,85,,85',
'85,,,,85,85,85,85,86,85,,,85,,86,,86,,86,86,,86,86,86,,86,86,,,,,86',
'86,,,86,,,86,86,,,,,87,87,86,,87,87,,87,86,,,,86,86,,86,86,,,,86,86',
'86,86,87,86,,,86,,87,,87,,87,87,,87,87,87,,87,87,,,,,87,87,,,87,,,87',
'87,,,,,88,88,87,,88,88,,88,87,,,,87,87,,87,87,,,,87,87,87,87,88,87,',
',87,,88,,88,,88,88,,88,88,88,,88,88,,,,,88,88,,,88,,,88,88,,,,,89,89',
'88,,89,89,,89,88,,,,88,88,,88,88,,,,88,88,88,88,89,88,,,88,,89,,89,',
'89,89,,89,89,89,,89,89,,,,,89,89,,,89,,,89,89,,,,,90,90,89,,90,90,,90',
'89,,,,89,89,,89,89,,,,89,89,89,89,90,89,,,89,,90,,90,,90,90,,90,90,90',
',90,90,,,,,90,90,,,90,,,90,90,,,,,91,91,90,,91,91,,91,90,,,,90,90,,90',
'90,,,,90,90,90,90,91,90,,,90,,91,,91,,91,91,,91,91,91,,91,91,,,,,91',
'91,,,91,,,91,91,,,,,92,92,91,,92,92,,92,91,,,,91,91,,91,91,,,,91,91',
'91,91,92,91,,,91,,92,,92,,92,92,,92,92,92,,92,92,,,,,92,92,,,92,,,92',
'92,,,,,93,93,92,,93,93,,93,92,,,,92,92,,92,92,,,,92,92,92,92,93,92,',
',92,,93,,93,,93,93,,93,93,93,,93,93,,,,,93,93,,,93,,,93,93,,,,,94,94',
'93,,94,94,,94,93,,,,93,93,,93,93,,,,93,93,93,93,94,93,,,93,,94,,94,',
'94,94,,94,94,94,,94,94,,,,,94,94,,,94,,,94,94,,,,,95,95,94,,95,95,,95',
'94,,,,94,94,,94,94,,,,94,94,94,94,95,94,,,94,,95,,95,,95,95,,95,95,95',
',95,95,,,,,95,95,,,95,,,95,95,,,,,96,96,95,,96,96,,96,95,,,,95,95,,95',
'95,,,,95,95,95,95,96,95,,,95,,96,,96,,96,96,,96,96,96,,96,96,,,,,96',
'96,,,96,,,96,96,,,,,97,97,96,,97,97,,97,96,,,,96,96,,96,96,,,,96,96',
'96,96,97,96,,,96,,97,,97,,97,97,,97,97,97,,97,97,,,,,97,97,,,97,,,97',
'97,,,,,98,98,97,,98,98,,98,97,,,,97,97,,97,97,,,,97,97,97,97,98,97,',
',97,,98,,98,,98,98,,98,98,98,,98,98,,,,,98,98,,,98,,,98,98,,,,,99,99',
'98,,99,99,,99,98,,,,98,98,,98,98,,,,98,98,98,98,99,98,,,98,,99,,99,',
'99,99,,99,99,99,,99,99,,,,,99,99,,,99,,,99,99,,,,,100,100,99,,100,100',
',100,99,,,,99,99,,99,99,,,,99,99,99,99,100,99,,,99,,100,,100,,100,100',
',100,100,100,,100,100,,,,,100,100,,,100,,,100,100,,,,,101,101,100,,101',
'101,,101,100,,,,100,100,,100,100,,,,100,100,100,100,101,100,,,100,,101',
',101,,101,101,,101,101,101,,101,101,,,,,101,101,,,101,,,101,101,,,,',
'102,102,101,,102,102,,102,101,,,,101,101,,101,101,,,,101,101,101,101',
'102,101,,,101,,102,,102,,102,102,,102,102,102,,102,102,,,,,102,102,',
',102,,,102,102,,,,,103,103,102,,103,103,,103,102,,,,102,102,,102,102',
',,,102,102,102,102,103,102,,,102,,103,,103,,103,103,,103,103,103,,103',
'103,,,,,103,103,,,103,,,103,103,,,,,,,103,,,,,,103,,,103,103,103,,103',
'103,,,,103,103,103,103,,103,104,104,103,,104,104,,104,285,285,285,285',
',285,285,285,,285,,285,285,,,,104,104,,285,285,285,104,,104,285,104',
'104,,104,104,104,,104,104,104,104,285,285,104,104,,,104,,,104,104,,',
'285,285,285,285,104,285,285,,,,104,,,,104,104,,104,104,,,,104,104,104',
'104,,104,339,339,104,118,339,339,,339,339,,,,,,,,,118,,118,,118,118',
',339,,,,,,339,,339,,339,339,,339,339,339,,339,339,118,,,,339,339,,,339',
',,339,339,,,,,332,332,339,,332,332,,332,339,,,,339,339,,339,339,,,,339',
'339,339,339,332,339,,,339,,332,,332,,332,332,,332,332,332,,332,332,332',
'332,,,332,332,,,332,,,332,332,,,,,107,107,332,,107,107,,107,332,,,,332',
'332,,332,332,,,,332,332,332,332,107,332,,,332,,107,,107,,107,107,,107',
'107,107,,107,107,,,,,107,107,,,107,,,107,107,,,,,108,108,107,,108,108',
',108,107,,,,107,107,,107,107,,,,107,107,107,107,108,107,,,107,,108,',
'108,,108,108,,108,108,108,,108,108,,,,,108,108,,,108,,,108,108,,,,,331',
'331,108,,331,331,,331,108,,,,108,108,,108,108,,,,108,108,108,108,331',
'108,,,108,,331,,331,,331,331,,331,331,331,,331,331,,,,,331,331,,,331',
',,331,331,,,,,328,328,331,,328,328,,328,331,,,,331,331,,331,331,,,,331',
'331,331,331,328,331,,,331,,328,,328,,328,328,,328,328,328,,328,328,',
',,,328,328,,,328,,,328,328,,,,,111,111,328,,111,111,,111,328,,,,328',
'328,,328,328,,,,328,328,328,328,111,328,,,328,,111,,111,,111,111,,111',
'111,111,,111,111,,,,,111,111,,,111,,,111,111,,,,,317,317,111,,317,317',
',317,111,,,,111,111,,111,111,,,,111,111,111,111,317,111,,,111,,317,',
'317,,317,317,,317,317,317,,317,317,,,,,317,317,,,317,,,317,317,,,,,293',
'293,317,,293,293,,293,317,,,,317,317,,317,317,,,,317,317,317,317,293',
'317,,,317,,293,,293,,293,293,,293,293,293,,293,293,,,,,293,293,,,293',
',,293,293,,,,,292,292,293,,292,292,,292,293,,,,293,293,,293,293,,,,293',
'293,293,293,292,293,,,293,,292,,292,,292,292,,292,292,292,,292,292,',
',,,292,292,,,292,,,292,292,,,,,290,290,292,,290,290,,290,292,,,,292',
'292,,292,292,,,,292,292,292,292,290,292,,,292,,290,,290,,290,290,,290',
'290,290,,290,290,,,,,290,290,,,290,,,290,290,,,,,289,289,290,,289,289',
',289,290,,,,290,290,,290,290,,,,290,290,290,290,289,290,,,290,,289,',
'289,,289,289,,289,289,289,,289,289,,,,,289,289,,,289,,,289,289,,,,,288',
'288,289,,288,288,,288,289,,,,289,289,,289,289,,,,289,289,289,289,288',
'289,,,289,,288,,288,,288,288,,288,288,288,,288,288,,,,,288,288,,,288',
',,288,288,,,,,273,273,288,,273,273,,273,288,,,,288,288,,288,288,,,,288',
'288,288,288,273,288,,,288,,273,,273,,273,273,,273,273,273,,273,273,273',
'273,,,273,273,,,273,,,273,273,,,,,268,268,273,,268,268,,268,273,,,,273',
'273,,273,273,,,,273,273,273,273,268,273,,,273,,268,,268,,268,268,,268',
'268,268,,268,268,268,268,,,268,268,,,268,,,268,268,,,,,,,268,,,,,,268',
',,,268,268,,268,268,,,,268,268,268,268,,268,126,126,268,,126,126,,126',
'287,287,287,287,,287,287,287,,287,,287,287,,,,126,126,,287,287,287,126',
',126,287,126,126,,126,126,126,,126,126,126,126,287,287,126,126,,,126',
',,126,126,,,287,287,287,287,126,287,287,,,,126,,,,126,126,,126,126,',
',,126,126,126,126,,126,254,254,126,,254,254,,254,254,208,,,,,,,,,,,',
',,208,254,208,,208,208,,254,,254,,254,254,,254,254,254,,254,254,254',
'254,,,254,254,208,,254,,,254,254,,,,,,,254,,208,208,,,254,,,208,254',
'254,,254,254,,,,254,254,254,254,,254,255,255,254,,255,255,,255,255,',
',,,,,,,,,,,,,,255,,,,,,255,,255,,255,255,,255,255,255,,255,255,255,255',
',,255,255,,,255,,,255,255,,,,,256,256,255,,256,256,,256,255,,,,255,255',
',255,255,,,,255,255,255,255,256,255,,,255,,256,,256,,256,256,,256,256',
'256,,256,256,,,,,256,256,,,256,,,256,256,,,,,,,256,,,,,,256,,,,256,256',
',256,256,,,,256,256,256,256,,256,267,267,256,,267,267,,267,267,,,,,',
',,,,,,,,,,267,,,,,,267,,267,,267,267,,267,267,267,,267,267,267,267,',
',267,267,,,267,,,267,267,,,,,263,263,267,,263,263,,263,267,,,,267,267',
',267,267,,,,267,267,267,267,263,267,,,267,,263,,263,,263,263,,263,263',
'263,,263,263,263,263,,,263,263,,,263,,,263,263,,,,,133,133,263,,133',
'133,,133,263,,,,263,263,,263,263,,,,263,263,263,263,133,263,,,263,,133',
',133,,133,133,,133,133,133,,133,133,,,,,133,133,,,133,,,133,133,,,,',
',,133,,,,,,133,,,,133,133,,133,133,259,,259,133,133,133,133,,133,,,133',
'259,259,259,,259,,259,259,,259,259,259,259,,,,,,,,,,,,,,,,259,,,,259',
'259,,,259,259,259,259,259,259,,259,259,130,,130,,,259,,,,,,,130,130',
'130,,130,,130,130,,130,130,130,130,,,,259,,,,,,,,,,,,130,,,,130,130',
',,130,130,130,130,130,130,,130,130,129,,129,,,130,,,,,,,129,129,129',
',129,,129,129,,129,129,129,129,,,,130,,,,,,,,,,,,129,,,,129,129,,,129',
'129,129,129,129,129,,129,129,127,,127,,,129,,,,,,,127,127,127,,127,206',
'127,127,,127,127,127,127,,,,129,,,206,,206,,206,206,,,,127,,,,127,127',
',361,127,127,127,127,127,127,,127,127,206,,361,361,361,127,361,,361',
'361,,361,361,361,361,206,206,,,,,,206,,,,,,127,,361,,,,361,361,,,361',
'361,361,361,361,361,232,361,361,,,,,,361,,,,232,232,232,232,232,,232',
'232,,232,232,232,232,,,,,,,361,,,,,,,,,232,,,,232,232,,227,232,232,232',
'232,232,232,,232,232,,,227,227,227,232,227,207,227,227,,227,227,227',
'227,,,,,,,207,,207,,207,207,,232,,227,,,,227,227,,362,227,227,227,227',
'227,227,,227,227,207,,362,362,362,227,362,,362,362,,362,362,362,362',
'207,207,,,,,,207,,,,,,227,,362,,,,362,362,,363,362,362,362,362,362,362',
',362,362,,,363,363,363,362,363,,363,363,,363,363,363,363,,,,,,,,,,,',
',,362,,363,,,,363,363,,,363,363,363,363,363,363,219,363,363,,,219,,',
'363,,,,219,219,219,,219,,219,219,,219,219,219,219,,,,,,,363,,,,,,,,',
'219,,,,219,219,,160,219,219,219,219,219,219,,219,219,,,160,160,160,219',
'160,,160,160,,160,160,160,160,,,,,,,,,,,,,,219,,160,,,,160,160,,364',
'160,160,160,160,160,160,,160,160,,,364,364,364,160,364,,364,364,,364',
'364,364,364,,160,160,,,,,,,,,,,160,,364,,,,364,364,,218,364,364,364',
'364,364,364,,364,364,,,218,218,218,364,218,,218,218,,218,218,218,218',
',,,,,,,,,,,,,364,,218,,,,,218,,217,218,218,218,218,218,218,,218,218',
',,217,217,217,218,217,,217,217,,217,217,217,217,,,,,,,,,,,,,,218,,217',
',,,,,,216,217,217,217,217,217,217,,217,217,,,,216,216,217,216,,216,216',
',216,,,,,,,,,,,,,,,,,217,,216,,,,,,,215,216,216,216,216,216,216,,216',
'216,,,,215,215,216,215,,215,215,,215,,,,,,212,,,,,,,,,,,216,,215,212',
',212,,212,212,214,215,215,215,215,215,215,,215,215,,,,214,214,215,214',
',214,214,212,214,,,,,,,212,212,212,212,212,212,,212,212,,215,,214,,212',
',,,,,214,214,214,214,214,214,172,214,214,,,,,,214,,,212,172,172,172',
'172,172,,172,172,213,172,172,172,172,,,,,,,214,,213,213,,213,,213,213',
'172,213,,,172,172,,,172,172,172,172,172,172,,172,172,,,,213,,172,,,',
',,213,213,213,213,213,213,365,213,213,,,,,,213,,,172,365,365,365,,365',
',365,365,211,365,365,365,365,,,,,,,213,,,211,,211,,211,211,365,,,,365',
'365,,210,365,365,365,365,365,365,,365,365,,,,211,210,365,210,,210,210',
',211,211,211,211,211,211,209,211,211,,,,,,211,,,365,,210,209,,209,,209',
'209,381,210,210,210,210,,,,210,210,,211,381,381,381,210,381,,381,381',
'209,381,381,381,381,,,,209,209,209,209,,,,209,209,,210,,381,,209,,381',
'381,,,381,381,381,381,381,381,397,381,381,,,,,,381,,,209,397,397,397',
'397,397,,397,397,,397,397,397,397,,,,,,,381,,,,,,,,,397,,,,397,397,',
'9,397,397,397,397,397,397,,397,397,,,9,9,9,397,9,205,9,9,,9,9,9,9,,',
',,,,205,,205,,205,205,,397,,9,,,,9,9,,,9,9,9,9,9,9,,9,9,205,,,,,9,,',
',,205,205,,199,,205,205,,,,,,205,,,199,199,199,9,199,204,199,199,,199',
'199,199,199,,,,,,,204,205,204,,204,204,,,,199,,,,199,199,,,199,199,199',
'199,199,199,,199,199,204,,,,,199,,,,,204,204,,,,204,204,,318,318,318',
'318,204,318,318,318,,318,199,318,318,,,,,,,318,318,318,,,,318,,204,',
',,,,,,,,318,318,,,,,,,,,,,,318,318,318,318,,318,318,420,420,420,420',
',420,420,420,,420,,420,420,,,,,,,420,420,420,,,,420,,,,,,,,,,,,420,420',
',,,,,,,,,,,420,420,420,420,,420,420,226,226,226,226,,226,226,226,,226',
',226,226,,,,,,,226,226,226,,,,226,,,,,,,,,,,,226,226,,,,,,,,,,,,226',
'226,226,226,,226,226,439,439,439,439,,439,439,439,,439,,439,439,,,,',
',,439,439,439,,,,439,,,,,,,,,,,,439,439,,,,,,,,,,,,439,439,439,439,',
'439,439' ]
        racc_action_check = arr = ::Array.new(7130, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

racc_action_pointer = [
    -2,   377,   nil,   nil,   118,   359,   nil,   173,   360,  6750,
   470,   530,     9,   nil,   nil,   676,   736,   796,   856,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   273,   259,   -17,  1096,  1156,  1216,    97,   238,   218,
   600,   207,   203,   nil,   nil,   nil,   nil,   nil,  1662,  1722,
  1808,   nil,   nil,   nil,   nil,  1868,   nil,   212,   209,   nil,
  2074,   nil,   278,  2194,   263,  2314,  2374,  2434,  2494,  2554,
  2614,  2674,  2734,  2794,  2883,  2943,  3003,  3063,  3123,  3183,
  3243,  3303,  3363,  3423,  3483,  3543,  3603,  3663,  3723,  3783,
  3843,  3903,  3963,  4023,  4109,   231,   238,  4315,  4375,   237,
   236,  4555,   190,   nil,   nil,   nil,   nil,   nil,  4193,    68,
  2887,  1958,   139,   nil,    97,   314,  5121,  5802,   nil,  5745,
  5688,    44,   300,  5559,   186,   nil,   248,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   269,   nil,   271,   nil,     7,
   nil,   nil,   139,   nil,   172,   nil,   nil,   167,  1542,   228,
  6145,  1482,   nil,   302,   nil,   nil,   nil,   nil,   309,   315,
   353,   361,  6481,   360,  1396,   125,   118,    -2,  1036,   916,
   410,   nil,   nil,   111,   188,    63,     8,   248,    75,    24,
    -1,    77,   nil,   nil,   nil,   nil,   nil,   nil,   nil,  6820,
   105,  2881,  1812,  1486,  6837,  6767,  5819,  5967,  5211,  6629,
  6602,  6575,  6407,  6501,  6427,  6380,  6333,  6286,  6239,  6098,
   nil,   nil,  1602,   217,   149,   nil,  6984,  5950,   135,   nil,
   154,   114,  5903,   nil,    41,   nil,   -24,   nil,   nil,  1954,
   nil,   370,   nil,   nil,   nil,   nil,   nil,   313,   291,   -28,
   295,   nil,   -11,   nil,  5207,  5293,  5353,   248,   234,  5631,
   148,   334,   -18,  5499,    23,    32,   nil,  5439,  5035,   nil,
   nil,   nil,   nil,  4975,   nil,   nil,   nil,   nil,    97,   nil,
   nil,   nil,   nil,   114,   129,  4087,   143,  5099,  4915,  4855,
  4795,   nil,  4735,  4675,   193,   nil,   180,   nil,   196,   nil,
   199,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   203,  4615,  6870,   217,
   nil,    22,   nil,   219,   223,   nil,   165,   -30,  4495,   nil,
   nil,  4435,  4255,   nil,   239,   114,   248,   226,     0,  4195,
   nil,  2254,  2134,  2014,   272,   nil,   291,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   212,   117,   273,   nil,
   nil,  5849,  5997,  6044,  6192,  6555,   301,  1336,   245,   382,
   nil,   nil,   306,  1276,   nil,   nil,   nil,   298,   nil,   nil,
   nil,  6649,    13,    58,   nil,   976,   322,   300,   nil,   334,
   335,   nil,   nil,   335,   nil,   nil,   348,  6703,   616,   nil,
   nil,   nil,   354,   325,   nil,   nil,   nil,   nil,   nil,   358,
   nil,   nil,   nil,   nil,   350,   nil,   264,   178,   nil,   nil,
  6927,   364,   nil,   nil,    58,   nil,   369,   nil,   370,   nil,
   371,   nil,   nil,   106,   nil,   346,   nil,   nil,   nil,  7041,
   nil,   nil ]

racc_action_default = [
    -3,  -249,    -1,    -2,    -4,    -5,    -8,   -10,   -16,   -21,
  -249,  -249,  -164,   -33,   -34,  -249,  -249,  -249,  -249,   -61,
   -62,   -63,   -64,   -65,   -66,   -67,   -68,   -69,   -70,   -71,
   -72,   -73,   -74,   -75,   -76,   -77,   -78,   -79,   -80,   -81,
   -82,   -83,   -88,   -92,  -249,  -249,  -249,  -249,  -249,  -249,
  -249,  -199,  -222,  -180,  -181,  -182,  -183,  -184,  -249,  -249,
  -249,  -195,  -196,  -197,  -198,  -249,  -201,  -249,  -214,  -217,
  -249,  -223,  -249,  -249,    -7,  -249,  -249,  -249,  -249,  -249,
  -249,  -249,  -249,  -128,  -249,  -249,  -249,  -249,  -249,  -249,
  -249,  -249,  -249,  -249,  -249,  -249,  -249,  -249,  -249,  -249,
  -249,  -249,  -249,  -249,  -249,  -249,  -123,  -248,  -248,   -22,
   -23,  -249,  -248,  -140,  -161,  -162,  -163,  -164,   -46,  -164,
   -47,   -54,  -249,   -89,  -249,  -249,  -249,  -249,   -99,  -249,
  -249,  -248,  -248,  -249,  -224,  -149,  -151,  -152,  -153,  -154,
  -155,  -157,  -158,  -199,   -14,  -224,  -186,  -224,  -188,  -249,
  -191,  -192,  -249,  -200,  -249,  -205,  -208,  -249,  -212,  -249,
  -249,  -249,   442,    -6,    -9,   -11,   -12,   -13,   -17,   -18,
   -19,   -20,  -249,  -224,  -249,   -81,   -82,   -83,  -235,  -241,
  -229,  -129,  -132,  -249,  -232,  -246,  -230,  -238,  -181,  -182,
  -183,  -184,  -228,  -233,  -234,  -236,  -237,  -239,  -247,   -59,
  -249,   -36,   -37,   -38,   -39,   -40,   -41,   -42,   -43,   -44,
   -45,   -48,   -49,   -50,   -51,   -52,   -53,   -55,   -56,  -249,
   -57,  -117,  -249,  -224,   -85,   -93,  -128,  -127,  -249,  -126,
  -249,  -226,  -249,   -28,  -248,  -165,  -249,   -58,   -94,  -249,
   -97,  -224,  -168,  -170,  -171,  -172,  -173,  -175,  -249,  -249,
  -178,  -222,  -249,   -91,  -249,  -249,  -249,  -249,  -249,  -249,
  -248,  -225,  -249,  -225,  -249,  -249,  -189,  -249,  -249,  -202,
  -203,  -204,  -206,  -249,  -209,  -210,  -211,  -213,  -224,  -215,
  -218,  -220,  -221,    -8,  -249,  -128,  -249,  -225,  -249,  -249,
  -249,   -35,  -249,  -249,  -224,  -119,  -249,   -87,  -224,  -131,
  -249,  -229,  -230,  -231,  -232,  -235,  -238,  -240,  -241,  -242,
  -243,  -244,  -245,  -246,  -124,  -125,  -249,  -227,  -128,  -249,
  -143,  -249,  -166,  -224,  -249,   -96,  -249,  -225,  -249,  -176,
  -177,  -249,  -249,   -90,  -249,  -102,  -249,  -108,  -249,  -249,
  -112,  -248,  -248,  -249,  -249,  -159,  -249,  -150,  -156,   -15,
  -185,  -187,  -190,  -193,  -194,  -207,  -249,  -249,  -224,   -26,
  -130,  -135,  -133,  -134,   -60,  -121,  -249,  -225,   -84,  -249,
   -25,   -29,  -224,  -248,  -144,  -145,  -146,  -249,   -95,   -98,
  -169,  -174,  -249,  -102,  -101,  -249,  -249,  -108,  -107,  -249,
  -249,  -111,  -113,  -249,  -141,  -142,  -249,  -249,  -249,  -160,
  -216,  -219,  -249,   -30,  -118,  -120,   -86,  -122,   -27,  -249,
  -167,  -179,  -100,  -103,  -249,  -106,  -249,  -248,  -136,  -137,
  -128,  -249,  -148,   -24,   -31,  -139,  -249,  -105,  -249,  -110,
  -249,  -115,  -116,  -249,  -147,  -226,  -104,  -109,  -114,  -249,
  -138,   -32 ]

racc_goto_table = [
     2,   118,   120,   121,   123,   173,   231,   113,   139,   137,
   200,   316,   280,   221,   229,   229,   153,   360,   241,   250,
   384,   347,    74,   430,   340,   393,   396,   294,   260,   234,
   127,   129,   130,   228,   230,   339,   413,   238,   220,   264,
   371,   265,   131,   132,   145,   147,   388,   319,   257,   258,
   374,   344,   278,   250,   402,   348,   160,   409,   380,   330,
   329,   353,   274,   122,   275,     3,   272,   286,   412,   172,
   199,   201,   202,   203,   204,   205,   206,   207,   208,   209,
   210,   211,   212,   213,   214,   215,   216,   217,   218,   219,
   223,   163,   273,   227,   227,   271,   415,   232,   156,   158,
   276,     1,   nil,   144,   144,   152,   399,   392,   nil,   nil,
   155,   nil,   252,   nil,   113,   nil,   nil,   296,   nil,   259,
   164,   165,   166,   167,   109,   110,   nil,   nil,   nil,   323,
   250,   nil,   295,   nil,   nil,   326,   nil,   nil,   nil,   nil,
   nil,   320,   nil,   nil,   nil,   139,   137,   nil,   298,   144,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   277,   nil,
   120,   284,   nil,   nil,   127,   129,   130,   345,   nil,   360,
   nil,   144,   356,   nil,   nil,   nil,   nil,   nil,   nil,   131,
   132,   113,   nil,   nil,   nil,   nil,   297,   nil,   366,   nil,
   nil,   nil,   369,   168,   169,   170,   171,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   283,   358,   219,   401,
   nil,   nil,   nil,   nil,   nil,   441,   nil,   377,   nil,   139,
   137,   250,   nil,   nil,   355,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   324,
   372,   nil,   199,   nil,   nil,   nil,   nil,   nil,   395,   395,
   nil,   nil,   403,   nil,   334,   336,   nil,   382,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   408,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   361,   362,   363,   405,   364,   365,
   395,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   232,   139,   137,   nil,   nil,   349,   nil,
   nil,   nil,   152,   354,   381,   nil,   375,   199,   155,   435,
   nil,   nil,   nil,   nil,   431,   199,   nil,   nil,   nil,   397,
   406,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   433,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   219,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   127,   nil,   nil,   nil,   nil,   nil,   349,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   421,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   232,   nil,   nil,   nil,   426,   nil,   428,   432 ]

racc_goto_check = [
     2,    10,    10,    10,    39,    11,    13,    59,    36,    37,
    19,    14,    90,    52,    51,    51,    82,    56,    44,    38,
    46,    67,     5,    50,    49,    61,    61,    53,    15,    60,
    10,    10,    10,    55,    55,    48,    45,    43,    20,    15,
    16,    15,    59,    59,     8,     8,    47,    63,    60,    60,
    64,    66,    44,    38,    12,    69,    10,    61,    70,    71,
    73,    77,    78,     6,    79,     3,    83,    15,    46,    10,
    10,    10,    10,    10,    10,    10,    10,    10,    10,    10,
    10,    10,    10,    10,    10,    10,    10,    10,    10,    10,
     8,     5,    84,    10,    10,    86,    47,    10,    87,    88,
    89,     1,   nil,     6,     6,     6,    67,    49,   nil,   nil,
     6,   nil,     8,   nil,    59,   nil,   nil,    15,   nil,    10,
     6,     6,     6,     6,     9,     9,   nil,   nil,   nil,    44,
    38,   nil,    52,   nil,   nil,    15,   nil,   nil,   nil,   nil,
   nil,    51,   nil,   nil,   nil,    36,    37,   nil,    11,     6,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,     2,   nil,
    10,     2,   nil,   nil,    10,    10,    10,    51,   nil,    56,
   nil,     6,    15,   nil,   nil,   nil,   nil,   nil,   nil,    59,
    59,    59,   nil,   nil,   nil,   nil,    39,   nil,    15,   nil,
   nil,   nil,    15,     9,     9,     9,     9,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,     6,    11,    10,    90,
   nil,   nil,   nil,   nil,   nil,    14,   nil,    15,   nil,    36,
    37,    38,   nil,   nil,    82,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,     2,
    11,   nil,    10,   nil,   nil,   nil,   nil,   nil,    51,    51,
   nil,   nil,    15,   nil,     2,     2,   nil,    19,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,    15,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,    10,    10,    10,    52,    10,    10,
    51,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,    10,    36,    37,   nil,   nil,     6,   nil,
   nil,   nil,     6,     6,    10,   nil,    59,    10,     6,    13,
   nil,   nil,   nil,   nil,    51,    10,   nil,   nil,   nil,    10,
    39,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,    11,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,    10,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,    10,   nil,   nil,   nil,   nil,   nil,     6,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,     2,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
    10,   nil,   nil,   nil,     2,   nil,     2,     2 ]

racc_goto_pointer = [
   nil,   101,     0,    65,   nil,    18,    45,   nil,   -14,   114,
   -14,   -78,  -304,  -105,  -220,  -106,  -277,   nil,   nil,   -74,
   -65,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   -42,   -41,  -106,   -38,
   nil,   nil,   nil,   -87,  -107,  -349,  -315,  -291,  -221,  -232,
  -394,   -93,   -90,  -195,   nil,   -74,  -270,   nil,   nil,    -5,
   -83,  -316,   nil,  -187,  -271,   nil,  -209,  -240,   nil,  -207,
  -269,  -190,   nil,  -188,   nil,   nil,   nil,  -206,   -95,   -93,
   nil,   nil,   -49,   -88,   -62,   nil,   -59,    31,    31,   -58,
  -148 ]

racc_goto_default = [
   nil,   nil,   394,   nil,     4,     5,     6,     7,   nil,     8,
     9,   nil,   nil,   nil,   nil,   nil,   233,    13,    14,   338,
   nil,    19,    20,    21,    22,    23,    24,    25,    26,    27,
    28,    29,    30,    31,    32,    33,    34,    35,    36,   nil,
    42,    43,   124,   nil,   nil,   128,   nil,   nil,   nil,   nil,
   nil,   235,   nil,   nil,   106,   nil,   181,   183,   182,    49,
   nil,   nil,   112,   nil,   nil,   134,   nil,   135,   136,   140,
   242,   243,   244,   245,   246,   249,   149,   151,    61,    62,
    63,    65,   nil,   nil,   nil,   154,   nil,   nil,   nil,   nil,
   nil ]

racc_reduce_table = [
  0, 0, :racc_error,
  1, 94, :_reduce_1,
  1, 94, :_reduce_2,
  0, 94, :_reduce_3,
  1, 95, :_reduce_4,
  1, 97, :_reduce_5,
  3, 97, :_reduce_6,
  2, 97, :_reduce_7,
  1, 98, :_reduce_8,
  3, 98, :_reduce_9,
  1, 99, :_reduce_none,
  3, 99, :_reduce_11,
  3, 99, :_reduce_12,
  3, 99, :_reduce_13,
  1, 101, :_reduce_14,
  3, 101, :_reduce_15,
  1, 100, :_reduce_none,
  3, 100, :_reduce_17,
  3, 100, :_reduce_18,
  3, 100, :_reduce_19,
  3, 100, :_reduce_20,
  1, 102, :_reduce_none,
  2, 102, :_reduce_22,
  2, 102, :_reduce_23,
  7, 102, :_reduce_24,
  5, 102, :_reduce_25,
  5, 102, :_reduce_26,
  4, 109, :_reduce_27,
  1, 106, :_reduce_28,
  3, 106, :_reduce_29,
  1, 105, :_reduce_30,
  2, 105, :_reduce_31,
  4, 105, :_reduce_32,
  1, 103, :_reduce_none,
  1, 103, :_reduce_none,
  4, 103, :_reduce_35,
  3, 103, :_reduce_36,
  3, 103, :_reduce_37,
  3, 103, :_reduce_38,
  3, 103, :_reduce_39,
  3, 103, :_reduce_40,
  3, 103, :_reduce_41,
  3, 103, :_reduce_42,
  3, 103, :_reduce_43,
  3, 103, :_reduce_44,
  3, 103, :_reduce_45,
  2, 103, :_reduce_46,
  2, 103, :_reduce_47,
  3, 103, :_reduce_48,
  3, 103, :_reduce_49,
  3, 103, :_reduce_50,
  3, 103, :_reduce_51,
  3, 103, :_reduce_52,
  3, 103, :_reduce_53,
  2, 103, :_reduce_54,
  3, 103, :_reduce_55,
  3, 103, :_reduce_56,
  3, 103, :_reduce_57,
  3, 103, :_reduce_58,
  1, 112, :_reduce_59,
  3, 112, :_reduce_60,
  1, 110, :_reduce_none,
  1, 110, :_reduce_none,
  1, 110, :_reduce_none,
  1, 110, :_reduce_none,
  1, 110, :_reduce_none,
  1, 110, :_reduce_none,
  1, 110, :_reduce_none,
  1, 110, :_reduce_none,
  1, 110, :_reduce_none,
  1, 110, :_reduce_none,
  1, 110, :_reduce_none,
  1, 110, :_reduce_none,
  1, 110, :_reduce_none,
  1, 110, :_reduce_none,
  1, 110, :_reduce_none,
  1, 110, :_reduce_none,
  1, 110, :_reduce_none,
  1, 110, :_reduce_none,
  1, 110, :_reduce_79,
  1, 110, :_reduce_80,
  1, 110, :_reduce_81,
  1, 110, :_reduce_82,
  1, 110, :_reduce_83,
  5, 111, :_reduce_84,
  3, 111, :_reduce_85,
  6, 111, :_reduce_86,
  4, 111, :_reduce_87,
  1, 115, :_reduce_88,
  2, 115, :_reduce_89,
  4, 133, :_reduce_90,
  3, 133, :_reduce_91,
  1, 133, :_reduce_92,
  3, 134, :_reduce_93,
  2, 132, :_reduce_94,
  3, 136, :_reduce_95,
  2, 136, :_reduce_96,
  2, 135, :_reduce_97,
  4, 135, :_reduce_98,
  2, 118, :_reduce_99,
  5, 138, :_reduce_100,
  4, 138, :_reduce_101,
  0, 139, :_reduce_none,
  2, 139, :_reduce_103,
  4, 139, :_reduce_104,
  3, 139, :_reduce_105,
  6, 119, :_reduce_106,
  5, 119, :_reduce_107,
  0, 140, :_reduce_none,
  4, 140, :_reduce_109,
  3, 140, :_reduce_110,
  5, 117, :_reduce_111,
  1, 141, :_reduce_112,
  2, 141, :_reduce_113,
  5, 142, :_reduce_114,
  1, 143, :_reduce_none,
  1, 143, :_reduce_none,
  1, 113, :_reduce_none,
  4, 113, :_reduce_118,
  1, 146, :_reduce_119,
  3, 146, :_reduce_120,
  3, 145, :_reduce_121,
  6, 116, :_reduce_122,
  2, 116, :_reduce_123,
  3, 147, :_reduce_124,
  3, 147, :_reduce_125,
  1, 148, :_reduce_none,
  1, 148, :_reduce_none,
  0, 104, :_reduce_128,
  1, 104, :_reduce_129,
  3, 104, :_reduce_130,
  1, 150, :_reduce_none,
  1, 150, :_reduce_none,
  3, 149, :_reduce_133,
  3, 149, :_reduce_134,
  3, 149, :_reduce_135,
  6, 120, :_reduce_136,
  6, 121, :_reduce_137,
  8, 122, :_reduce_138,
  7, 123, :_reduce_139,
  1, 155, :_reduce_140,
  1, 154, :_reduce_none,
  1, 154, :_reduce_none,
  1, 156, :_reduce_none,
  2, 156, :_reduce_144,
  1, 157, :_reduce_none,
  1, 157, :_reduce_none,
  7, 124, :_reduce_147,
  6, 124, :_reduce_148,
  1, 158, :_reduce_149,
  3, 158, :_reduce_150,
  1, 160, :_reduce_none,
  1, 160, :_reduce_none,
  1, 160, :_reduce_153,
  1, 160, :_reduce_none,
  1, 161, :_reduce_155,
  3, 161, :_reduce_156,
  1, 162, :_reduce_none,
  1, 162, :_reduce_none,
  1, 159, :_reduce_none,
  2, 159, :_reduce_160,
  1, 152, :_reduce_none,
  1, 152, :_reduce_none,
  1, 152, :_reduce_none,
  1, 152, :_reduce_164,
  1, 153, :_reduce_165,
  2, 153, :_reduce_166,
  4, 153, :_reduce_167,
  1, 137, :_reduce_168,
  3, 137, :_reduce_169,
  1, 163, :_reduce_none,
  1, 163, :_reduce_none,
  1, 164, :_reduce_none,
  1, 164, :_reduce_none,
  3, 166, :_reduce_174,
  1, 166, :_reduce_175,
  2, 167, :_reduce_176,
  2, 165, :_reduce_177,
  1, 168, :_reduce_178,
  4, 168, :_reduce_179,
  1, 114, :_reduce_180,
  1, 126, :_reduce_181,
  1, 126, :_reduce_182,
  1, 126, :_reduce_183,
  1, 126, :_reduce_184,
  4, 127, :_reduce_185,
  2, 127, :_reduce_186,
  4, 127, :_reduce_187,
  2, 127, :_reduce_188,
  3, 128, :_reduce_189,
  4, 128, :_reduce_190,
  2, 128, :_reduce_191,
  1, 169, :_reduce_192,
  3, 169, :_reduce_193,
  3, 170, :_reduce_194,
  1, 130, :_reduce_none,
  1, 130, :_reduce_none,
  1, 130, :_reduce_none,
  1, 171, :_reduce_198,
  1, 171, :_reduce_199,
  2, 172, :_reduce_200,
  1, 174, :_reduce_201,
  1, 176, :_reduce_202,
  1, 177, :_reduce_203,
  2, 175, :_reduce_204,
  1, 178, :_reduce_205,
  1, 179, :_reduce_206,
  2, 179, :_reduce_207,
  2, 173, :_reduce_208,
  2, 180, :_reduce_209,
  2, 180, :_reduce_210,
  3, 96, :_reduce_211,
  0, 182, :_reduce_none,
  1, 182, :_reduce_none,
  0, 181, :_reduce_214,
  2, 181, :_reduce_215,
  4, 181, :_reduce_216,
  1, 125, :_reduce_217,
  3, 125, :_reduce_218,
  5, 125, :_reduce_219,
  1, 183, :_reduce_none,
  1, 183, :_reduce_none,
  1, 131, :_reduce_222,
  1, 129, :_reduce_223,
  0, 108, :_reduce_none,
  1, 108, :_reduce_225,
  0, 107, :_reduce_none,
  1, 107, :_reduce_none,
  1, 151, :_reduce_none,
  1, 151, :_reduce_none,
  1, 151, :_reduce_none,
  1, 151, :_reduce_none,
  1, 151, :_reduce_none,
  1, 151, :_reduce_none,
  1, 151, :_reduce_none,
  1, 151, :_reduce_none,
  1, 151, :_reduce_none,
  1, 151, :_reduce_none,
  1, 151, :_reduce_none,
  1, 151, :_reduce_none,
  1, 151, :_reduce_none,
  1, 151, :_reduce_none,
  1, 151, :_reduce_none,
  1, 151, :_reduce_none,
  1, 151, :_reduce_none,
  1, 151, :_reduce_none,
  1, 151, :_reduce_none,
  1, 151, :_reduce_none,
  0, 144, :_reduce_248 ]

racc_reduce_n = 249

racc_shift_n = 442

racc_token_table = {
  false => 0,
  :error => 1,
  :STRING => 2,
  :DQPRE => 3,
  :DQMID => 4,
  :DQPOST => 5,
  :WORD => 6,
  :LBRACK => 7,
  :RBRACK => 8,
  :LBRACE => 9,
  :RBRACE => 10,
  :SYMBOL => 11,
  :FARROW => 12,
  :COMMA => 13,
  :TRUE => 14,
  :FALSE => 15,
  :EQUALS => 16,
  :APPENDS => 17,
  :DELETES => 18,
  :LESSEQUAL => 19,
  :NOTEQUAL => 20,
  :DOT => 21,
  :COLON => 22,
  :LLCOLLECT => 23,
  :RRCOLLECT => 24,
  :QMARK => 25,
  :LPAREN => 26,
  :RPAREN => 27,
  :ISEQUAL => 28,
  :GREATEREQUAL => 29,
  :GREATERTHAN => 30,
  :LESSTHAN => 31,
  :IF => 32,
  :ELSE => 33,
  :DEFINE => 34,
  :ELSIF => 35,
  :VARIABLE => 36,
  :CLASS => 37,
  :INHERITS => 38,
  :NODE => 39,
  :BOOLEAN => 40,
  :NAME => 41,
  :SEMIC => 42,
  :CASE => 43,
  :DEFAULT => 44,
  :AT => 45,
  :ATAT => 46,
  :LCOLLECT => 47,
  :RCOLLECT => 48,
  :CLASSREF => 49,
  :NOT => 50,
  :OR => 51,
  :AND => 52,
  :UNDEF => 53,
  :PARROW => 54,
  :PLUS => 55,
  :MINUS => 56,
  :TIMES => 57,
  :DIV => 58,
  :LSHIFT => 59,
  :RSHIFT => 60,
  :UMINUS => 61,
  :MATCH => 62,
  :NOMATCH => 63,
  :REGEX => 64,
  :IN_EDGE => 65,
  :OUT_EDGE => 66,
  :IN_EDGE_SUB => 67,
  :OUT_EDGE_SUB => 68,
  :IN => 69,
  :UNLESS => 70,
  :PIPE => 71,
  :LAMBDA => 72,
  :SELBRACE => 73,
  :NUMBER => 74,
  :HEREDOC => 75,
  :SUBLOCATE => 76,
  :RENDER_STRING => 77,
  :RENDER_EXPR => 78,
  :EPP_START => 79,
  :EPP_END => 80,
  :EPP_END_TRIM => 81,
  :FUNCTION => 82,
  :PRIVATE => 83,
  :ATTR => 84,
  :TYPE => 85,
  :LOW => 86,
  :APPLICATION => 87,
  :PRODUCES => 88,
  :HIGH => 89,
  :LISTSTART => 90,
  :SPLAT => 91,
  :MODULO => 92 }

racc_nt_base = 93

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "STRING",
  "DQPRE",
  "DQMID",
  "DQPOST",
  "WORD",
  "LBRACK",
  "RBRACK",
  "LBRACE",
  "RBRACE",
  "SYMBOL",
  "FARROW",
  "COMMA",
  "TRUE",
  "FALSE",
  "EQUALS",
  "APPENDS",
  "DELETES",
  "LESSEQUAL",
  "NOTEQUAL",
  "DOT",
  "COLON",
  "LLCOLLECT",
  "RRCOLLECT",
  "QMARK",
  "LPAREN",
  "RPAREN",
  "ISEQUAL",
  "GREATEREQUAL",
  "GREATERTHAN",
  "LESSTHAN",
  "IF",
  "ELSE",
  "DEFINE",
  "ELSIF",
  "VARIABLE",
  "CLASS",
  "INHERITS",
  "NODE",
  "BOOLEAN",
  "NAME",
  "SEMIC",
  "CASE",
  "DEFAULT",
  "AT",
  "ATAT",
  "LCOLLECT",
  "RCOLLECT",
  "CLASSREF",
  "NOT",
  "OR",
  "AND",
  "UNDEF",
  "PARROW",
  "PLUS",
  "MINUS",
  "TIMES",
  "DIV",
  "LSHIFT",
  "RSHIFT",
  "UMINUS",
  "MATCH",
  "NOMATCH",
  "REGEX",
  "IN_EDGE",
  "OUT_EDGE",
  "IN_EDGE_SUB",
  "OUT_EDGE_SUB",
  "IN",
  "UNLESS",
  "PIPE",
  "LAMBDA",
  "SELBRACE",
  "NUMBER",
  "HEREDOC",
  "SUBLOCATE",
  "RENDER_STRING",
  "RENDER_EXPR",
  "EPP_START",
  "EPP_END",
  "EPP_END_TRIM",
  "FUNCTION",
  "PRIVATE",
  "ATTR",
  "TYPE",
  "LOW",
  "APPLICATION",
  "PRODUCES",
  "HIGH",
  "LISTSTART",
  "SPLAT",
  "MODULO",
  "$start",
  "program",
  "statements",
  "epp_expression",
  "syntactic_statements",
  "syntactic_statement",
  "assignment",
  "relationship",
  "assignments",
  "resource",
  "expression",
  "attribute_operations",
  "additional_resource_bodies",
  "resource_bodies",
  "endsemi",
  "endcomma",
  "resource_body",
  "primary_expression",
  "call_function_expression",
  "expressions",
  "selector_entries",
  "variable",
  "call_method_with_lambda_expression",
  "collection_expression",
  "case_expression",
  "if_expression",
  "unless_expression",
  "definition_expression",
  "application_expression",
  "produces_expression",
  "hostclass_expression",
  "node_definition_expression",
  "epp_render_expression",
  "reserved_word",
  "array",
  "hash",
  "regex",
  "quotedtext",
  "type",
  "lambda",
  "call_method_expression",
  "named_access",
  "lambda_parameter_list",
  "lambda_rest",
  "parameters",
  "if_part",
  "else",
  "unless_else",
  "case_options",
  "case_option",
  "options_statements",
  "nil",
  "selector_entry",
  "selector_entry_list",
  "collect_query",
  "optional_query",
  "attribute_operation",
  "attribute_name",
  "keyword",
  "classname",
  "parameter_list",
  "opt_statements",
  "stacked_classname",
  "classparent",
  "classnameordefault",
  "hostnames",
  "nodeparent",
  "hostname",
  "dotted_name",
  "name_or_number",
  "parameter",
  "untyped_parameter",
  "typed_parameter",
  "regular_parameter",
  "splat_parameter",
  "parameter_type",
  "hashpairs",
  "hashpair",
  "string",
  "dq_string",
  "heredoc",
  "dqpre",
  "dqrval",
  "dqpost",
  "dqmid",
  "text_expression",
  "dqtail",
  "sublocated_text",
  "epp_parameters_list",
  "optional_statements",
  "epp_end" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

module_eval(<<'.,.,', 'egrammar.ra', 66)
  def _reduce_1(val, _values, result)
     result = create_program(Factory.block_or_expression(*val[0])) 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 67)
  def _reduce_2(val, _values, result)
     result = create_program(Factory.block_or_expression(*val[0])) 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 68)
  def _reduce_3(val, _values, result)
     result = create_empty_program() 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 72)
  def _reduce_4(val, _values, result)
     result = transform_calls(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 79)
  def _reduce_5(val, _values, result)
     result = [val[0]]
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 80)
  def _reduce_6(val, _values, result)
     result = val[0].push val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 81)
  def _reduce_7(val, _values, result)
     result = val[0].push val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 88)
  def _reduce_8(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 89)
  def _reduce_9(val, _values, result)
     result = aryfy(val[0]).push(val[1]).push(val[2]) 
    result
  end
.,.,

# reduce 10 omitted

module_eval(<<'.,.,', 'egrammar.ra', 94)
  def _reduce_11(val, _values, result)
     result = val[0].set(val[2])      ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 95)
  def _reduce_12(val, _values, result)
     result = val[0].plus_set(val[2]) ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 96)
  def _reduce_13(val, _values, result)
     result = val[0].minus_set(val[2]); loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 99)
  def _reduce_14(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 100)
  def _reduce_15(val, _values, result)
     result = val[0].push(val[2]) 
    result
  end
.,.,

# reduce 16 omitted

module_eval(<<'.,.,', 'egrammar.ra', 104)
  def _reduce_17(val, _values, result)
     result = val[0].relop(val[1][:value], val[2]); loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 105)
  def _reduce_18(val, _values, result)
     result = val[0].relop(val[1][:value], val[2]); loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 106)
  def _reduce_19(val, _values, result)
     result = val[0].relop(val[1][:value], val[2]); loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 107)
  def _reduce_20(val, _values, result)
     result = val[0].relop(val[1][:value], val[2]); loc result, val[1] 
    result
  end
.,.,

# reduce 21 omitted

module_eval(<<'.,.,', 'egrammar.ra', 116)
  def _reduce_22(val, _values, result)
          result = val[1]
      unless Factory.set_resource_form(result, :virtual)
        # This is equivalent to a syntax error - additional semantic restrictions apply
        error val[0], "Virtual (@) can only be applied to a Resource Expression"
      end
      # relocate the result
      loc result, val[0], val[1]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 127)
  def _reduce_23(val, _values, result)
          result = val[1]
      unless Factory.set_resource_form(result, :exported)
        # This is equivalent to a syntax error - additional semantic restrictions apply
        error val[0], "Exported (@@) can only be applied to a Resource Expression"
      end
      # relocate the result
      loc result, val[0], val[1]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 138)
  def _reduce_24(val, _values, result)
          bodies = [Factory.RESOURCE_BODY(val[2], val[4])] + val[5]
      result = Factory.RESOURCE(val[0], bodies)
      loc result, val[0], val[6]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 145)
  def _reduce_25(val, _values, result)
            result = Factory.RESOURCE(Factory.fqn(token_text(val[0])), val[2])
        loc result, val[0], val[4]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 154)
  def _reduce_26(val, _values, result)
           result = case Factory.resource_shape(val[0])
       when :resource, :class
        # This catches deprecated syntax.
        # If the attribute operations does not include +>, then the found expression
        # is actually a LEFT followed by LITERAL_HASH
        #
        unless tmp = transform_resource_wo_title(val[0], val[2])
          error val[1], "Syntax error resource body without title or hash with +>"
        end
        tmp
      when :defaults
        Factory.RESOURCE_DEFAULTS(val[0], val[2])
      when :override
        # This was only done for override in original - TODO should it be here at all
        Factory.RESOURCE_OVERRIDE(val[0], val[2])
      else
        error val[0], "Expression is not valid as a resource, resource-default, or resource-override"
      end
     loc result, val[0], val[4]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 176)
  def _reduce_27(val, _values, result)
     result = Factory.RESOURCE_BODY(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 179)
  def _reduce_28(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 180)
  def _reduce_29(val, _values, result)
     result = val[0].push val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 186)
  def _reduce_30(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 187)
  def _reduce_31(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 188)
  def _reduce_32(val, _values, result)
     result = val[2] 
    result
  end
.,.,

# reduce 33 omitted

# reduce 34 omitted

module_eval(<<'.,.,', 'egrammar.ra', 195)
  def _reduce_35(val, _values, result)
     result = val[0][*val[2]]         ; loc result, val[0], val[3] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 196)
  def _reduce_36(val, _values, result)
     result = val[0].in val[2]        ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 197)
  def _reduce_37(val, _values, result)
     result = val[0] =~  val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 198)
  def _reduce_38(val, _values, result)
     result = val[0].mne val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 199)
  def _reduce_39(val, _values, result)
     result = val[0] +   val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 200)
  def _reduce_40(val, _values, result)
     result = val[0] -   val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 201)
  def _reduce_41(val, _values, result)
     result = val[0] /   val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 202)
  def _reduce_42(val, _values, result)
     result = val[0] *   val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 203)
  def _reduce_43(val, _values, result)
     result = val[0] %   val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 204)
  def _reduce_44(val, _values, result)
     result = val[0] <<  val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 205)
  def _reduce_45(val, _values, result)
     result = val[0] >>  val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 206)
  def _reduce_46(val, _values, result)
     result = val[1].minus()          ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 207)
  def _reduce_47(val, _values, result)
     result = val[1].unfold()         ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 208)
  def _reduce_48(val, _values, result)
     result = val[0].ne  val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 209)
  def _reduce_49(val, _values, result)
     result = val[0] ==  val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 210)
  def _reduce_50(val, _values, result)
     result = val[0] >   val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 211)
  def _reduce_51(val, _values, result)
     result = val[0] >=  val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 212)
  def _reduce_52(val, _values, result)
     result = val[0] <   val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 213)
  def _reduce_53(val, _values, result)
     result = val[0] <=  val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 214)
  def _reduce_54(val, _values, result)
     result = val[1].not              ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 215)
  def _reduce_55(val, _values, result)
     result = val[0].and val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 216)
  def _reduce_56(val, _values, result)
     result = val[0].or  val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 217)
  def _reduce_57(val, _values, result)
     result = val[0].select(*val[2])  ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 218)
  def _reduce_58(val, _values, result)
     result = val[1].paren()          ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 228)
  def _reduce_59(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 229)
  def _reduce_60(val, _values, result)
     result = val[0].push(val[2]) 
    result
  end
.,.,

# reduce 61 omitted

# reduce 62 omitted

# reduce 63 omitted

# reduce 64 omitted

# reduce 65 omitted

# reduce 66 omitted

# reduce 67 omitted

# reduce 68 omitted

# reduce 69 omitted

# reduce 70 omitted

# reduce 71 omitted

# reduce 72 omitted

# reduce 73 omitted

# reduce 74 omitted

# reduce 75 omitted

# reduce 76 omitted

# reduce 77 omitted

# reduce 78 omitted

module_eval(<<'.,.,', 'egrammar.ra', 252)
  def _reduce_79(val, _values, result)
     result = Factory.NUMBER(val[0][:value])          ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 253)
  def _reduce_80(val, _values, result)
     result = Factory.literal(val[0][:value])         ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 254)
  def _reduce_81(val, _values, result)
     result = Factory.literal(:default)               ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 255)
  def _reduce_82(val, _values, result)
     result = Factory.literal(:undef)                 ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 256)
  def _reduce_83(val, _values, result)
     result = Factory.QNAME_OR_NUMBER(val[0][:value]) ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 265)
  def _reduce_84(val, _values, result)
          result = Factory.CALL_NAMED(val[0], true, val[2])
      loc result, val[0], val[4]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 269)
  def _reduce_85(val, _values, result)
          result = Factory.CALL_NAMED(val[0], true, [])
      loc result, val[0], val[2]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 273)
  def _reduce_86(val, _values, result)
          result = Factory.CALL_NAMED(val[0], true, val[2])
      loc result, val[0], val[4]
      result.lambda = val[5]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 278)
  def _reduce_87(val, _values, result)
          result = Factory.CALL_NAMED(val[0], true, [])
      loc result, val[0], val[2]
      result.lambda = val[3]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 286)
  def _reduce_88(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 287)
  def _reduce_89(val, _values, result)
     result = val[0]; val[0].lambda = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 290)
  def _reduce_90(val, _values, result)
     result = Factory.CALL_METHOD(val[0], val[2]); loc result, val[1], val[3] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 291)
  def _reduce_91(val, _values, result)
     result = Factory.CALL_METHOD(val[0], []); loc result, val[1], val[3] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 292)
  def _reduce_92(val, _values, result)
     result = Factory.CALL_METHOD(val[0], []); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 296)
  def _reduce_93(val, _values, result)
            result = val[0].dot(Factory.fqn(val[2][:value]))
        loc result, val[1], val[2]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 304)
  def _reduce_94(val, _values, result)
          result = Factory.LAMBDA(val[0][:value], val[1][:value])
      loc result, val[0][:start], val[1][:end]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 309)
  def _reduce_95(val, _values, result)
     result = {:end => val[2], :value =>val[1] } 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 310)
  def _reduce_96(val, _values, result)
     result = {:end => val[1], :value => nil } 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 314)
  def _reduce_97(val, _values, result)
     result = {:start => val[0], :value => [] } 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 315)
  def _reduce_98(val, _values, result)
     result = {:start => val[0], :value => val[1] } 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 323)
  def _reduce_99(val, _values, result)
          result = val[1]
      loc(result, val[0], val[1])
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 330)
  def _reduce_100(val, _values, result)
            result = Factory.IF(val[0], Factory.block_or_expression(*val[2]), val[4])
        loc(result, val[0], (val[4] ? val[4] : val[3]))
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 334)
  def _reduce_101(val, _values, result)
            result = Factory.IF(val[0], nil, val[3])
        loc(result, val[0], (val[3] ? val[3] : val[2]))
      
    result
  end
.,.,

# reduce 102 omitted

module_eval(<<'.,.,', 'egrammar.ra', 342)
  def _reduce_103(val, _values, result)
            result = val[1]
        loc(result, val[0], val[1])
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 346)
  def _reduce_104(val, _values, result)
            result = Factory.block_or_expression(*val[2])
        loc result, val[0], val[3]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 350)
  def _reduce_105(val, _values, result)
            result = nil # don't think a nop is needed here either
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 357)
  def _reduce_106(val, _values, result)
          result = Factory.UNLESS(val[1], Factory.block_or_expression(*val[3]), val[5])
      loc result, val[0], val[4]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 361)
  def _reduce_107(val, _values, result)
          result = Factory.UNLESS(val[1], nil, nil)
      loc result, val[0], val[4]
    
    result
  end
.,.,

# reduce 108 omitted

module_eval(<<'.,.,', 'egrammar.ra', 371)
  def _reduce_109(val, _values, result)
            result = Factory.block_or_expression(*val[2])
        loc result, val[0], val[3]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 375)
  def _reduce_110(val, _values, result)
            result = nil # don't think a nop is needed here either
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 382)
  def _reduce_111(val, _values, result)
          result = Factory.CASE(val[1], *val[3])
      loc result, val[0], val[4]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 388)
  def _reduce_112(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 389)
  def _reduce_113(val, _values, result)
     result = val[0].push val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 394)
  def _reduce_114(val, _values, result)
            result = Factory.WHEN(val[0], val[3]); loc result, val[1], val[4]
      
    result
  end
.,.,

# reduce 115 omitted

# reduce 116 omitted

# reduce 117 omitted

module_eval(<<'.,.,', 'egrammar.ra', 410)
  def _reduce_118(val, _values, result)
            result = val[1]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 415)
  def _reduce_119(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 416)
  def _reduce_120(val, _values, result)
     result = val[0].push val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 421)
  def _reduce_121(val, _values, result)
     result = Factory.MAP(val[0], val[2]) ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 431)
  def _reduce_122(val, _values, result)
          result = Factory.COLLECT(val[0], val[1], val[3])
      loc result, val[0], val[5]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 435)
  def _reduce_123(val, _values, result)
          result = Factory.COLLECT(val[0], val[1], [])
      loc result, val[0], val[1]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 440)
  def _reduce_124(val, _values, result)
     result = Factory.VIRTUAL_QUERY(val[1])   ; loc result, val[0], val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 441)
  def _reduce_125(val, _values, result)
     result = Factory.EXPORTED_QUERY(val[1])  ; loc result, val[0], val[2] 
    result
  end
.,.,

# reduce 126 omitted

# reduce 127 omitted

module_eval(<<'.,.,', 'egrammar.ra', 450)
  def _reduce_128(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 451)
  def _reduce_129(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 452)
  def _reduce_130(val, _values, result)
     result = val[0].push(val[2]) 
    result
  end
.,.,

# reduce 131 omitted

# reduce 132 omitted

module_eval(<<'.,.,', 'egrammar.ra', 468)
  def _reduce_133(val, _values, result)
            result = Factory.ATTRIBUTE_OP(val[0][:value], :'=>', val[2])
        loc result, val[0], val[2]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 472)
  def _reduce_134(val, _values, result)
            result = Factory.ATTRIBUTE_OP(val[0][:value], :'+>', val[2])
        loc result, val[0], val[2]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 476)
  def _reduce_135(val, _values, result)
          result = Factory.ATTRIBUTES_OP(val[2]) ; loc result, val[0], val[2]
   
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 485)
  def _reduce_136(val, _values, result)
          result = add_definition(Factory.DEFINITION(classname(val[1][:value]), val[2], val[4]))
      loc result, val[0], val[5]
      # New lexer does not keep track of this, this is done in validation
      if @lexer.respond_to?(:'indefine=')
        @lexer.indefine = false
      end
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 496)
  def _reduce_137(val, _values, result)
        result = add_definition(Factory.APPLICATION(classname(val[1][:value]), val[2], val[4]))
    loc result, val[0], val[5]
  
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 505)
  def _reduce_138(val, _values, result)
        body = [Factory.RESOURCE_BODY(val[4], val[6])]
    resource = Factory.RESOURCE(val[2], body)

    result = Factory.PRODUCES(classname(val[0][:value]), resource)
    loc result, val[0], val[7]
    add_produces(result)
  
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 519)
  def _reduce_139(val, _values, result)
          # Remove this class' name from the namestack as all nested classes have been parsed
      namepop
      result = add_definition(Factory.HOSTCLASS(classname(val[1][:value]), val[2], token_text(val[3]), val[5]))
      loc result, val[0], val[6]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 529)
  def _reduce_140(val, _values, result)
     namestack(val[0][:value]) ; result = val[0] 
    result
  end
.,.,

# reduce 141 omitted

# reduce 142 omitted

# reduce 143 omitted

module_eval(<<'.,.,', 'egrammar.ra', 538)
  def _reduce_144(val, _values, result)
     result = val[1] 
    result
  end
.,.,

# reduce 145 omitted

# reduce 146 omitted

module_eval(<<'.,.,', 'egrammar.ra', 555)
  def _reduce_147(val, _values, result)
          result = add_definition(Factory.NODE(val[1], val[3], val[5]))
      loc result, val[0], val[6]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 559)
  def _reduce_148(val, _values, result)
          result = add_definition(Factory.NODE(val[1], val[3], nil))
      loc result, val[0], val[5]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 569)
  def _reduce_149(val, _values, result)
     result = [result] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 570)
  def _reduce_150(val, _values, result)
     result = val[0].push(val[2]) 
    result
  end
.,.,

# reduce 151 omitted

# reduce 152 omitted

module_eval(<<'.,.,', 'egrammar.ra', 577)
  def _reduce_153(val, _values, result)
     result = Factory.literal(:default); loc result, val[0] 
    result
  end
.,.,

# reduce 154 omitted

module_eval(<<'.,.,', 'egrammar.ra', 581)
  def _reduce_155(val, _values, result)
     result = Factory.literal(val[0][:value]); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 582)
  def _reduce_156(val, _values, result)
     result = Factory.concat(val[0], '.', val[2][:value]); loc result, val[0], val[2] 
    result
  end
.,.,

# reduce 157 omitted

# reduce 158 omitted

# reduce 159 omitted

module_eval(<<'.,.,', 'egrammar.ra', 591)
  def _reduce_160(val, _values, result)
     result = val[1] 
    result
  end
.,.,

# reduce 161 omitted

# reduce 162 omitted

# reduce 163 omitted

module_eval(<<'.,.,', 'egrammar.ra', 610)
  def _reduce_164(val, _values, result)
     error val[0], "'class' is not a valid classname" 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 614)
  def _reduce_165(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 615)
  def _reduce_166(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 616)
  def _reduce_167(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 620)
  def _reduce_168(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 621)
  def _reduce_169(val, _values, result)
     result = val[0].push(val[2]) 
    result
  end
.,.,

# reduce 170 omitted

# reduce 171 omitted

# reduce 172 omitted

# reduce 173 omitted

module_eval(<<'.,.,', 'egrammar.ra', 633)
  def _reduce_174(val, _values, result)
     result = Factory.PARAM(val[0][:value], val[2]) ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 634)
  def _reduce_175(val, _values, result)
     result = Factory.PARAM(val[0][:value]); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 637)
  def _reduce_176(val, _values, result)
     result = val[1]; val[1].captures_rest() 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 640)
  def _reduce_177(val, _values, result)
     val[1].type_expr(val[0]) ; result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 643)
  def _reduce_178(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 644)
  def _reduce_179(val, _values, result)
     result = val[0][*val[2]] ; loc result, val[0], val[3] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 649)
  def _reduce_180(val, _values, result)
     result = Factory.fqn(val[0][:value]).var ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 654)
  def _reduce_181(val, _values, result)
     result = Factory.RESERVED(val[0][:value]) ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 655)
  def _reduce_182(val, _values, result)
     result = Factory.RESERVED(val[0][:value]) ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 656)
  def _reduce_183(val, _values, result)
     result = Factory.RESERVED(val[0][:value]) ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 657)
  def _reduce_184(val, _values, result)
     result = Factory.RESERVED(val[0][:value]) ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 663)
  def _reduce_185(val, _values, result)
     result = Factory.LIST(val[1]); loc result, val[0], val[3] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 664)
  def _reduce_186(val, _values, result)
     result = Factory.literal([]) ; loc result, val[0], val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 665)
  def _reduce_187(val, _values, result)
     result = Factory.LIST(val[1]); loc result, val[0], val[3] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 666)
  def _reduce_188(val, _values, result)
     result = Factory.literal([]) ; loc result, val[0], val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 669)
  def _reduce_189(val, _values, result)
     result = Factory.HASH(val[1]); loc result, val[0], val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 670)
  def _reduce_190(val, _values, result)
     result = Factory.HASH(val[1]); loc result, val[0], val[3] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 671)
  def _reduce_191(val, _values, result)
     result = Factory.literal({}) ; loc result, val[0], val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 674)
  def _reduce_192(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 675)
  def _reduce_193(val, _values, result)
     result = val[0].push val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 678)
  def _reduce_194(val, _values, result)
     result = Factory.KEY_ENTRY(val[0], val[2]); loc result, val[1] 
    result
  end
.,.,

# reduce 195 omitted

# reduce 196 omitted

# reduce 197 omitted

module_eval(<<'.,.,', 'egrammar.ra', 686)
  def _reduce_198(val, _values, result)
     result = Factory.literal(val[0][:value]) ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 687)
  def _reduce_199(val, _values, result)
     result = Factory.literal(val[0][:value]) ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 689)
  def _reduce_200(val, _values, result)
     result = Factory.string(val[0], *val[1]) ; loc result, val[0], val[1][-1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 690)
  def _reduce_201(val, _values, result)
     result = Factory.literal(val[0][:value]); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 691)
  def _reduce_202(val, _values, result)
     result = Factory.literal(val[0][:value]); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 692)
  def _reduce_203(val, _values, result)
     result = Factory.literal(val[0][:value]); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 693)
  def _reduce_204(val, _values, result)
     result = [val[0]] + val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 694)
  def _reduce_205(val, _values, result)
     result = Factory.TEXT(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 697)
  def _reduce_206(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 698)
  def _reduce_207(val, _values, result)
     result = [val[0]] + val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 701)
  def _reduce_208(val, _values, result)
     result = Factory.HEREDOC(val[0][:value], val[1]); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 704)
  def _reduce_209(val, _values, result)
     result = Factory.SUBLOCATE(val[0], val[1]); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 705)
  def _reduce_210(val, _values, result)
     result = Factory.SUBLOCATE(val[0], val[1]); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 708)
  def _reduce_211(val, _values, result)
     result = Factory.EPP(val[1], val[2]); loc result, val[0] 
    result
  end
.,.,

# reduce 212 omitted

# reduce 213 omitted

module_eval(<<'.,.,', 'egrammar.ra', 715)
  def _reduce_214(val, _values, result)
     result = nil 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 716)
  def _reduce_215(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 717)
  def _reduce_216(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 720)
  def _reduce_217(val, _values, result)
     result = Factory.RENDER_STRING(val[0][:value]); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 721)
  def _reduce_218(val, _values, result)
     result = Factory.RENDER_EXPR(val[1]); loc result, val[0], val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 722)
  def _reduce_219(val, _values, result)
     result = Factory.RENDER_EXPR(Factory.block_or_expression(*val[2])); loc result, val[0], val[4] 
    result
  end
.,.,

# reduce 220 omitted

# reduce 221 omitted

module_eval(<<'.,.,', 'egrammar.ra', 728)
  def _reduce_222(val, _values, result)
     result = Factory.QREF(val[0][:value])  ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 731)
  def _reduce_223(val, _values, result)
     result = Factory.literal(val[0][:value]); loc result, val[0] 
    result
  end
.,.,

# reduce 224 omitted

module_eval(<<'.,.,', 'egrammar.ra', 737)
  def _reduce_225(val, _values, result)
     result = nil 
    result
  end
.,.,

# reduce 226 omitted

# reduce 227 omitted

# reduce 228 omitted

# reduce 229 omitted

# reduce 230 omitted

# reduce 231 omitted

# reduce 232 omitted

# reduce 233 omitted

# reduce 234 omitted

# reduce 235 omitted

# reduce 236 omitted

# reduce 237 omitted

# reduce 238 omitted

# reduce 239 omitted

# reduce 240 omitted

# reduce 241 omitted

# reduce 242 omitted

# reduce 243 omitted

# reduce 244 omitted

# reduce 245 omitted

# reduce 246 omitted

# reduce 247 omitted

module_eval(<<'.,.,', 'egrammar.ra', 766)
  def _reduce_248(val, _values, result)
     result = nil
    result
  end
.,.,

def _reduce_none(val, _values, result)
  val[0]
end

      end   # class Parser
      end   # module Parser
    end   # module Pops
  end   # module Puppet
