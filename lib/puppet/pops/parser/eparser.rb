#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.9
# from Racc grammer file "".
#

require 'racc/parser.rb'

require 'puppet'
require 'puppet/pops'

module Puppet
  class ParseError < Puppet::Error; end
  class ImportError < Racc::ParseError; end
  class AlreadyImportedError < ImportError; end
end

module Puppet
  module Pops
    module Parser
      class Parser < Racc::Parser

module_eval(<<'...end egrammar.ra/module_eval...', 'egrammar.ra', 781)

# Make emacs happy
# Local Variables:
# mode: ruby
# End:
...end egrammar.ra/module_eval...
##### State transition tables begin ###

clist = [
'65,67,337,-234,53,60,73,61,251,85,-132,-243,76,297,294,116,338,-248',
'392,84,391,-233,396,106,18,109,296,104,105,252,45,297,48,144,55,12,-245',
'51,39,42,126,47,40,10,11,-234,118,54,17,108,115,41,-132,-243,15,16,295',
'127,117,-248,65,67,72,-233,53,60,145,61,46,161,-246,86,38,68,116,70',
'71,69,-245,163,52,56,58,57,18,49,-165,-165,116,59,45,112,48,271,55,12',
'272,51,39,42,74,47,40,10,11,118,166,54,17,115,76,41,-246,418,15,16,251',
'117,297,118,65,67,72,115,53,60,251,61,46,255,229,117,38,68,116,70,71',
'252,230,255,52,56,58,57,18,49,84,252,116,59,45,244,48,428,55,12,427',
'51,39,42,84,47,40,10,11,118,240,54,17,115,392,41,391,241,15,16,251,117',
'243,118,65,67,72,115,53,60,240,61,46,255,240,117,38,68,116,70,71,252',
'-165,-165,52,56,58,57,18,49,135,136,116,59,45,284,48,265,55,12,266,51',
'39,42,240,47,40,10,11,118,268,54,17,115,268,41,65,67,15,16,146,117,273',
'118,65,67,72,115,53,60,76,61,46,116,84,117,38,68,116,70,71,-166,-166',
'84,52,56,58,57,18,49,-167,-167,116,59,45,84,48,84,55,120,292,51,39,42',
'118,47,40,268,115,118,126,54,17,115,319,41,117,320,15,16,322,117,326',
'118,65,67,72,115,53,60,332,61,46,275,274,117,38,68,116,70,71,286,287',
'333,52,56,58,57,18,49,251,336,346,59,45,347,48,348,55,120,351,51,39',
'42,354,47,40,356,327,118,357,54,17,115,332,41,382,251,15,16,273,117',
'363,365,65,67,72,373,53,60,255,61,46,374,292,293,38,68,252,70,71,376',
'379,332,52,56,58,57,18,49,384,385,389,59,45,393,48,395,55,120,404,51',
'39,42,407,47,40,292,411,126,414,54,17,292,417,41,421,395,15,16,423,424',
'425,426,65,67,72,431,53,60,432,61,46,433,434,442,38,68,444,70,71,445',
'446,322,52,56,58,57,18,49,,,,59,45,,48,,55,12,,51,39,42,,47,40,10,11',
',,54,17,,,41,,,15,16,,,,,65,67,72,,53,60,,61,46,,,,38,68,,70,71,,,,52',
'56,58,57,18,49,,,,59,45,,48,,55,120,,51,39,42,,47,40,,,,,54,17,,,41',
',,15,16,,,,,65,67,72,,53,60,,61,46,,,,38,68,,70,71,,,,52,56,58,57,18',
'49,,,,59,45,,48,,55,120,,51,39,42,,47,40,,,,,54,17,,,41,,,15,16,,,,',
'65,67,72,,53,60,,61,46,,,,38,68,,70,71,,,,52,56,58,57,18,49,,,,59,45',
',48,,55,120,,51,39,42,,47,40,,,,,54,17,,,41,,,15,16,,,,,65,67,72,,53',
'60,150,61,46,,,,38,68,,70,71,,,,52,56,58,57,18,49,,,,59,45,,48,,55,12',
',51,39,42,,47,40,10,11,,,54,17,,,41,,,15,16,,,,,65,67,72,,53,60,152',
'61,46,77,78,79,38,68,,70,71,,,,52,56,58,57,18,49,,,,59,45,,48,,55,12',
',51,39,42,,47,40,10,11,,,54,17,,,41,,,15,16,,,80,82,81,83,72,,,,,,46',
',65,67,38,68,146,70,71,,,,52,56,58,57,,49,65,67,,59,53,60,,61,154,,',
',,,,,,,,,,,,144,18,,141,,,,45,,48,,55,12,,51,39,42,,47,40,10,11,,72',
'54,17,,,41,,,15,16,145,68,,,65,67,72,,53,60,,61,46,,,,38,68,,70,71,',
',,52,56,58,57,18,49,,,,59,45,,48,,55,12,,51,39,42,,47,40,10,11,,,54',
'17,,,41,,,15,16,,,,,65,67,72,,53,60,,165,46,,,,38,68,,70,71,,,,52,56',
'58,57,18,49,,,,59,45,,48,,55,120,,51,39,42,,47,40,,,,,54,17,,,41,,,15',
'16,,,,,65,67,72,,53,60,,61,46,,,,38,68,,70,71,,,,52,56,58,57,18,49,',
',,59,45,,48,,55,12,,51,39,42,,47,40,10,11,,,54,17,,,41,,,15,16,,,,,65',
'67,72,,53,60,,61,46,,,,38,68,,70,71,,,,52,56,58,57,18,49,,,,59,45,,48',
',55,12,,51,39,42,,47,40,10,11,,,54,17,,,41,,,15,16,,,,,65,67,72,,53',
'60,,61,46,,,,38,68,,70,71,,,,52,56,58,57,18,49,,,,59,45,,48,,55,12,',
'51,39,42,,47,40,10,11,,,54,17,,,41,,,15,16,,,,,65,67,72,,53,60,,61,46',
',,,38,68,,70,71,,,,52,56,58,57,18,49,,,,59,45,,48,,55,12,,51,39,42,',
'47,40,10,11,,,54,17,,,41,,,15,16,,,,,65,67,72,,53,60,,61,46,,,,38,68',
',70,71,,,,52,56,58,57,18,49,,,,59,45,,48,,55,12,,51,39,42,,47,40,10',
'11,,,54,17,,,41,,,15,16,,,,,65,67,72,,53,60,,61,46,,,,38,68,,70,71,',
',,52,56,58,57,18,49,,,,59,45,,48,,55,12,,51,39,42,,47,40,10,11,,,54',
'17,,,41,,,15,16,,,,,65,67,72,,53,60,,61,46,,,,38,68,,70,71,,,,52,56',
'58,57,18,49,,,,59,45,,48,,55,12,,51,39,42,,47,40,10,11,,,54,17,,,41',
',,15,16,,,,,65,67,72,,53,60,,61,46,,,,38,68,,70,71,,,,52,56,58,57,18',
'49,,,,59,45,,48,,55,12,,51,39,42,,47,40,10,11,,,54,17,,,41,,,15,16,',
',,,65,67,72,,53,60,,61,46,,,,38,68,,70,71,,,,52,56,58,57,18,49,,,,59',
'45,,48,,55,12,,51,39,42,,47,40,10,11,,,54,17,,,41,,,15,16,,,,,65,67',
'72,,53,60,,61,46,,,,38,68,,70,71,,,,52,56,58,57,18,49,,,,59,182,197',
'188,198,55,190,200,191,39,181,,184,179,,,,,54,17,201,196,180,,,15,178',
',,,,,,72,,,,,199,183,,,,38,68,,70,71,,,,192,193,195,194,,189,202,65',
'67,59,85,53,60,,61,,85,,,,,,,,106,,109,,104,105,106,18,109,,104,105',
',45,,48,,55,120,,51,39,42,,47,40,108,,,,54,17,108,,41,,,15,16,,,,,65',
'67,72,,53,60,,61,46,,,86,38,68,,70,71,,,,52,56,58,57,18,49,,,,59,45',
',48,,55,120,,51,39,42,,47,40,,,,,54,17,,,41,,,15,16,,,,,65,67,72,,53',
'60,,61,46,,,,38,68,,70,71,,,,52,56,58,57,18,49,,,,59,45,,48,,55,120',
',51,39,42,,47,40,,,,,54,17,,,41,,,15,16,,,,,65,67,72,,53,60,,61,46,',
',,38,68,,70,71,,,,52,56,58,57,18,49,,,,59,45,,48,,55,120,,51,39,42,',
'47,40,,,,,54,17,,,41,,,15,16,,,,,65,67,72,,53,60,,61,46,,,,38,68,,70',
'71,,,,52,56,58,57,18,49,,,,59,45,,48,,55,120,,51,39,42,,47,40,,,,,54',
'17,,,41,,,15,16,,,,,65,67,72,,53,60,,61,46,,,,38,68,,70,71,,,,52,56',
'58,57,18,49,,,,59,45,,48,,55,120,,51,39,42,,47,40,,,,,54,17,,,41,,,15',
'16,,,,,65,67,72,,53,60,,61,46,,,,38,68,,70,71,,,,52,56,58,57,18,49,',
',,59,45,,48,,55,120,,51,39,42,,47,40,,,,,54,17,,,41,,,15,16,,,,,65,67',
'72,,53,60,,61,46,,,,38,68,,70,71,,,,52,56,58,57,18,49,,,,59,45,,48,',
'55,120,,51,39,42,,47,40,,,,,54,17,,,41,,,15,16,,,,,65,67,72,,53,60,',
'61,46,,,,38,68,,70,71,,,,52,56,58,57,18,49,,,,59,45,,48,,55,120,,51',
'39,42,,47,40,,,,,54,17,,,41,,,15,16,,,,,65,67,72,,53,60,,61,46,,,,38',
'68,,70,71,,,,52,56,58,57,18,49,,,,59,45,,48,,55,120,,51,39,42,,47,40',
',,,,54,17,,,41,,,15,16,,,,,65,67,72,,53,60,,61,46,,,,38,68,,70,71,,',
',52,56,58,57,18,49,,,,59,45,,48,,55,120,,51,39,42,,47,40,,,,,54,17,',
',41,,,15,16,,,,,65,67,72,,53,60,,61,46,,,,38,68,,70,71,,,,52,56,58,57',
'18,49,,,,59,45,,48,,55,120,,51,39,42,,47,40,,,,,54,17,,,41,,,15,16,',
',,,65,67,72,,53,60,,61,46,,,,38,68,,70,71,,,,52,56,58,57,18,49,,,,59',
'45,,48,,55,120,,51,39,42,,47,40,,,,,54,17,,,41,,,15,16,,,,,65,67,72',
',53,60,,61,46,,,,38,68,,70,71,,,,52,56,58,57,18,49,,,,59,45,,48,,55',
'120,,51,39,42,,47,40,,,,,54,17,,,41,,,15,16,,,,,65,67,72,,53,60,,61',
'46,,,,38,68,,70,71,,,,52,56,58,57,18,49,,,,59,45,,48,,55,120,,51,39',
'42,,47,40,,,,,54,17,,,41,,,15,16,,,,,65,67,72,,53,60,,61,46,,,,38,68',
',70,71,,,,52,56,58,57,18,49,,,,59,45,,48,,55,120,,51,39,42,,47,40,,',
',,54,17,,,41,,,15,16,,,,,65,67,72,,53,60,,61,46,,,,38,68,,70,71,,,,52',
'56,58,57,18,49,,,,59,45,,48,,55,120,,51,39,42,,47,40,,,,,54,17,,,41',
',,15,16,,,,,65,67,72,,53,60,,61,46,,,,38,68,,70,71,,,,52,56,58,57,18',
'49,,,,59,45,,48,,55,120,,51,39,42,,47,40,,,,,54,17,,,41,,,15,16,,,,',
'65,67,72,,53,60,,61,46,,,,38,68,,70,71,,,,52,56,58,57,18,49,,,,59,45',
',48,,55,120,,51,39,42,,47,40,,,,,54,17,,,41,,,15,16,,,,,65,67,72,,53',
'60,,61,46,,,,38,68,,70,71,,,,52,56,58,57,18,49,,,,59,45,,48,,55,120',
',51,39,42,,47,40,,,,,54,17,,,41,,,15,16,,,,,,,72,,,,,,46,,,226,38,68',
',70,71,,,,52,56,58,57,,49,65,67,,59,53,60,,61,,,,,,,,,,,,,,,,,18,228',
',,,,45,,48,,55,12,,51,39,42,,47,40,10,11,,,54,17,,,41,,,15,16,,,,,65',
'67,72,,53,60,,61,46,,,,38,68,,70,71,,,,52,56,58,57,18,49,,,,59,45,,48',
',55,120,,51,39,42,,47,40,,,,,54,17,,,41,,,15,16,,,,,65,67,72,,53,60',
',61,46,,,,38,68,,70,71,,,,52,56,58,57,18,49,,,,59,45,,48,,55,120,,51',
'39,42,,47,40,,,,,54,17,,,41,,,15,16,,,,,65,67,72,,53,60,,61,46,,,,38',
'68,,70,71,,,,52,56,58,57,18,49,,,,59,45,,48,,55,120,,51,39,42,,47,40',
',,,,54,17,,,41,,,15,16,,,,,,,72,,,,,,46,,65,67,38,68,146,70,71,,,,52',
'56,58,57,,49,65,67,,59,53,60,,61,,,,,,,,,,,,,,,,144,18,257,141,,,,45',
',48,,55,12,,51,39,42,,47,40,10,11,,72,54,17,,,41,,,15,16,145,68,,,65',
'67,72,,53,60,,61,46,,,,38,68,,70,71,,,,52,56,58,57,18,49,,,,59,45,,48',
',55,12,,51,39,42,,47,40,10,11,,,54,17,,,41,,,15,16,,,,,,,72,,,,,,46',
',65,67,38,68,146,70,71,,,,52,56,58,57,,49,65,67,,59,53,60,,61,154,,',
',,,,,,,,,,,,144,18,,141,,,,45,,48,,55,12,,51,39,42,,47,40,10,11,,72',
'54,17,,,41,,,15,16,145,68,,,65,67,72,,53,60,,61,46,,293,,38,68,,70,71',
',,,52,56,58,57,18,49,,,,59,45,,48,,55,120,,51,39,42,,47,40,,,,,54,17',
',,41,,,15,16,,,,,65,67,72,,53,60,,61,46,,,,38,68,,70,71,,,,52,56,58',
'57,18,49,,,,59,45,,48,,55,120,,51,39,42,,47,40,,,,,54,17,,,41,,,15,16',
',,,,65,67,72,,53,60,,61,46,,,,38,68,,70,71,,,,52,56,58,57,18,49,,,,59',
'45,,48,,55,120,,51,39,42,,47,40,,,,,54,17,,,41,,,15,16,,,,,65,67,72',
',53,60,,61,46,,,,38,68,,70,71,,,,52,56,58,57,18,49,,,,59,45,,48,,55',
'120,,51,39,42,,47,40,,,,,54,17,,,41,,,15,16,,,,,65,67,72,,53,60,,61',
'46,,,,38,68,,70,71,,,,52,56,58,57,18,49,,,,59,45,,48,,55,120,,51,39',
'42,,47,40,,,,,54,17,,,41,,,15,16,,,,,,,72,,,,,,46,,,,38,68,,70,71,,',
',52,56,58,57,,49,65,67,,59,53,60,,61,330,85,,,,,,,,,,,,,,106,18,109',
',104,105,,45,,48,,55,12,,51,39,42,,47,40,10,11,,,54,17,108,,41,,,15',
'16,,,,92,91,,72,,87,88,,,46,,,86,38,68,,70,71,,,,52,56,58,57,,49,65',
'67,,59,53,60,,61,340,93,,,,,,,,,,,,,,,18,,,,,,45,,48,,55,12,,51,39,42',
',47,40,10,11,,,54,17,,,41,,,15,16,,,,,,,72,,,,,,46,,65,67,38,68,146',
'70,71,,,,52,56,58,57,,49,65,67,,59,53,60,,61,342,,,,,,,,,,,,,,,144,18',
',141,,,,45,,48,,55,12,,51,39,42,,47,40,10,11,,72,54,17,,,41,,,15,16',
'145,68,,,65,67,72,,53,60,,61,46,,,,38,68,,70,71,,,,52,56,58,57,18,49',
',,,59,45,,48,,55,120,,51,39,42,,47,40,,,,,54,17,,,41,,,15,16,,,,,65',
'67,72,,53,60,,61,46,,,,38,68,,70,71,,,,52,56,58,57,18,49,,,,59,45,,48',
',55,12,,51,39,42,,47,40,10,11,,,54,17,,,41,,,15,16,,,,,,,72,,,,,,46',
',,,38,68,,70,71,,,,52,56,58,57,,49,65,67,,59,53,60,,61,358,85,,,,,,',
',,,,,,,106,18,109,,104,105,,45,,48,,55,12,,51,39,42,,47,40,10,11,,,54',
'17,108,,41,,,15,16,,,,,65,67,72,,53,60,,61,46,,,,38,68,,70,71,,,,52',
'56,58,57,18,49,,,,59,45,,48,,55,12,,51,39,42,,47,40,10,11,,,54,17,,',
'41,,,15,16,,,,,65,67,72,,53,60,,61,46,,,,38,68,,70,71,,,,52,56,58,57',
'18,49,,,,59,45,,48,,55,12,,51,39,42,,47,40,10,11,,,54,17,,,41,,,15,16',
',,,,65,67,72,,53,60,,61,46,,,,38,68,,70,71,,,,52,56,58,57,18,49,,,,59',
'45,,48,,55,120,,51,39,42,,47,40,,,,,54,17,,,41,,,15,16,,,,,65,67,72',
',53,60,,61,46,,,,38,68,,70,71,,,,52,56,58,57,18,49,,,,59,45,,48,,55',
'120,,51,39,42,,47,40,,,,,54,17,,,41,,,15,16,,,,,65,67,72,,53,60,,61',
'46,,,,38,68,,70,71,,,,52,56,58,57,18,49,,,,59,45,,48,,55,120,,51,39',
'42,,47,40,,,,,54,17,,,41,,,15,16,,,,,65,67,72,,53,60,,61,46,,,,38,68',
',70,71,,,,52,56,58,57,18,49,,,,59,45,,48,,55,120,,51,39,42,,47,40,,',
',,54,17,,,41,,,15,16,,,,,65,67,72,,53,60,,61,46,,,,38,68,,70,71,,,,52',
'56,58,57,18,49,,,,59,45,,48,,55,120,,51,39,42,,47,40,,,,,54,17,,,41',
',,15,16,,,,,65,67,72,,53,60,,61,46,,,,38,68,,70,71,,,,52,56,58,57,18',
'49,,,,59,45,,48,,55,120,,51,39,42,,47,40,,,,,54,17,,,41,,,15,16,,,,',
'65,67,72,,53,60,,61,46,,,,38,68,,70,71,,,,52,56,58,57,18,49,,,,59,45',
',48,,55,120,,51,39,42,,47,40,,,,,54,17,,,41,,,15,16,,,,,65,67,72,,53',
'60,,61,46,,,,38,68,,70,71,,,,52,56,58,57,18,49,,,,59,45,,48,,55,120',
',51,39,42,,47,40,,,,,54,17,,,41,,,15,16,,,,,65,67,72,,53,60,,61,46,',
',,38,68,,70,71,,,,52,56,58,57,18,49,,,,59,45,,48,,55,12,,51,39,42,,47',
'40,10,11,,,54,17,,,41,,,15,16,,,,,,,72,,,,,,46,,,,38,68,,70,71,,,,52',
'56,58,57,,49,65,67,,59,53,60,,61,397,85,,,,,,,,,,,,,,106,18,109,,104',
'105,,45,,48,,55,120,,51,39,42,,47,40,,,,,54,17,108,,41,,,15,16,,,,,65',
'67,72,,53,60,,61,46,,,,38,68,,70,71,,,,52,56,58,57,18,49,,,,59,45,,48',
',55,12,,51,39,42,,47,40,10,11,,,54,17,,,41,,,15,16,,,,,65,67,72,,53',
'60,,61,46,,,,38,68,,70,71,,,,52,56,58,57,18,49,,,,59,45,,48,,55,12,',
'51,39,42,,47,40,10,11,,,54,17,,,41,,,15,16,,,,,65,67,72,,53,60,,61,46',
',,,38,68,,70,71,,,,52,56,58,57,18,49,,,,59,45,,48,,55,12,,51,39,42,',
'47,40,10,11,,,54,17,,,41,,,15,16,,,,,65,67,72,,53,60,,61,46,,,,38,68',
',70,71,,,,52,56,58,57,18,49,,,,59,45,,48,,55,120,,51,39,42,,47,40,,',
',,54,17,,,41,,,15,16,,,,,65,67,72,,53,60,,61,46,,,,38,68,,70,71,,,,52',
'56,58,57,18,49,,,,59,45,,48,,55,12,,51,39,42,,47,40,10,11,,,54,17,,',
'41,,,15,16,,,,,65,67,72,,53,60,,61,46,,,,38,68,,70,71,,,,52,56,58,57',
'18,49,,,,59,45,,48,,55,120,,51,39,42,,47,40,,,,,54,17,,,41,,,15,16,',
',,,,,72,,,,,,46,,,,38,68,,70,71,,,,52,56,58,57,,49,65,67,,59,53,60,',
'61,430,85,,,,,,,,,,,,,,106,18,109,,104,105,,45,,48,,55,12,,51,39,42',
',47,40,10,11,,,54,17,108,,41,,,15,16,,,,92,91,,72,,87,88,,,46,,,86,38',
'68,,70,71,,,,52,56,58,57,,49,65,67,,59,53,60,,61,436,93,,,,,,,,,,,,',
',,18,,,,,,45,,48,,55,12,,51,39,42,,47,40,10,11,,,54,17,,,41,,,15,16',
',,,,,,72,,,,,,46,,,,38,68,,70,71,,,,52,56,58,57,,49,65,67,,59,53,60',
',61,438,85,,,,,,,,,,,,,,106,18,109,,104,105,,45,,48,,55,12,,51,39,42',
',47,40,10,11,,,54,17,108,,41,,,15,16,,,,,65,67,72,,53,60,,61,46,,,,38',
'68,,70,71,,,,52,56,58,57,18,49,,,,59,45,,48,,55,12,,51,39,42,,47,40',
'10,11,,,54,17,,,41,,,15,16,,,,,65,67,72,,53,60,,61,46,,,,38,68,,70,71',
',,,52,56,58,57,18,49,,,,59,45,,48,,55,120,,51,39,42,,47,40,,,,,54,17',
',,41,,,15,16,,,,,,,72,,,,,,46,,,,38,68,85,70,71,,,,52,56,58,57,,49,101',
'96,106,59,109,,104,105,,97,99,98,100,,,,,,,,,,,,,,,,108,,,,103,102,',
',89,90,92,91,94,95,,87,88,85,,258,,,86,,,,,,,101,96,106,,109,,104,105',
',97,99,98,100,,,,,93,,,,,,,,,,,108,,,,103,102,,,89,90,92,91,94,95,,87',
'88,85,,259,,,86,,,,,,,101,96,106,,109,,104,105,,97,99,98,100,,,,,93',
',,,,,,,,,,108,,,,103,102,,,89,90,92,91,94,95,,87,88,85,,260,,,86,,,',
',,,101,96,106,,109,85,104,105,,97,99,98,100,,,,,93,,106,,109,,104,105',
',,,108,,,,103,102,,85,89,90,92,91,94,95,,87,88,108,,101,96,106,86,109',
',104,105,,97,99,98,100,87,88,,,,,,86,,,,,,,93,108,,,,103,102,,,89,90',
'92,91,94,95,,87,88,,,,,,86,,,,85,,,,,,,286,287,,,,101,96,106,290,109',
'85,104,105,93,97,99,98,100,,,,,,,106,,109,,104,105,,,,108,,,,103,102',
',85,89,90,92,91,94,95,,87,88,108,,101,96,106,86,109,85,104,105,,97,99',
'98,100,87,88,,,,,106,86,109,,104,105,,,93,108,,,,103,102,,,89,90,92',
'91,94,95,,87,88,108,,,,,86,,85,89,90,92,91,,,,87,88,,,,,106,86,109,85',
'104,105,,,93,,,,,,,,,106,,109,,104,105,,,93,108,,,,,85,,,89,90,92,91',
',,,87,88,108,,106,,109,86,104,105,89,90,92,91,94,95,,87,88,,,,,,86,',
',,,,108,93,,,,,,85,89,90,92,91,94,95,,87,88,,93,,96,106,86,109,85,104',
'105,,97,,,,,,,,,96,106,,109,,104,105,,97,93,108,,,,,,,,89,90,92,91,94',
'95,,87,88,108,,,,,86,,85,89,90,92,91,94,95,,87,88,,,,96,106,86,109,85',
'104,105,,97,93,,,,,,,,96,106,,109,,104,105,,97,93,108,,,,,,,,89,90,92',
'91,94,95,,87,88,108,,,,,86,,,89,90,92,91,94,95,85,87,88,,,,,,86,,,,101',
'96,106,93,109,,104,105,85,97,99,98,100,,,,,,,,93,,106,,109,,104,105',
'108,,,,,85,,,89,90,92,91,94,95,,87,88,101,96,106,108,109,86,104,105',
',97,99,98,100,,,,,,87,88,,,,,,86,,,108,93,,,,102,,,89,90,92,91,94,95',
'85,87,88,,,298,,,86,,,,101,96,106,,109,,104,105,,97,99,98,100,,,,,,',
',93,,,,,,,,108,,,,103,102,,85,89,90,92,91,94,95,,87,88,,,101,96,106',
'86,109,,104,105,,97,99,98,100,,,,,,,,,,,,,,,93,108,,,,103,102,,,89,90',
'92,91,94,95,85,87,88,,,,,,86,,,,101,96,106,323,109,,104,105,,97,99,98',
'100,,,,,,,,93,,,,,,,,108,,,,103,102,,85,89,90,92,91,94,95,,87,88,,,101',
'96,106,86,109,,104,105,,97,99,98,100,,,,,,,,,,,,,,,93,108,,,,103,102',
',85,89,90,92,91,94,95,,87,88,,,101,96,106,86,109,,104,105,,97,99,98',
'100,,,,,,,,,,,,,,,93,108,,,,103,102,,85,89,90,92,91,94,95,,87,88,,,101',
'96,106,86,109,,104,105,,97,99,98,100,,,,,,,,,,,,,,,93,108,,,,103,102',
',85,89,90,92,91,94,95,,87,88,,,101,96,106,86,109,,104,105,,97,99,98',
'100,,,,,,,,,,,,,,,93,108,,,,103,102,,85,89,90,92,91,94,95,,87,88,,,101',
'96,106,86,109,,104,105,,97,99,98,100,,,,,,,,,,,,,,,93,108,,,,103,102',
',85,89,90,92,91,94,95,,87,88,,,101,96,106,86,109,,104,105,,97,99,98',
'100,,,,,,,,,,,,,,,93,108,,,,103,102,,,89,90,92,91,94,95,,87,88,,310',
'197,309,198,86,307,200,311,,304,,306,308,,,,,,,201,196,312,,,,305,,',
'93,,,,,,,,,199,313,,,,,,,,,,,,316,317,315,314,,318,202,310,197,309,198',
',307,200,311,,304,,306,308,,,,,,,201,196,312,,,,305,,,,,,,,,,,,199,313',
',,,,,,,,,,,316,317,315,314,,318,202,310,197,309,198,,307,200,311,,304',
',306,308,,,,,,,201,196,312,,,,305,,,,,,,,,,,,199,313,,,,,,,,,,,,316',
'317,315,314,,318,202,310,197,309,198,,307,200,311,,304,,306,308,,,,',
',,201,196,312,,,,305,,,,,,,,,,,,199,313,,,,,,,,,,,,316,317,315,314,',
'318,202,310,197,309,198,,307,200,311,,304,,306,308,,,,,,,201,196,312',
',,,305,,,,,,,,,,,,199,313,,,,,,,,,,,,316,317,315,314,,318,202,310,197',
'309,198,,307,200,311,,304,,306,308,,,,,,,201,196,312,,,,305,,,,,,,,',
',,,199,313,,,,,,,,,,,,316,317,315,314,,318,202' ]
        racc_action_table = arr = ::Array.new(7077, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

clist = [
'0,0,256,179,0,0,1,0,253,206,181,180,5,343,187,190,256,193,340,8,340',
'190,343,206,0,206,204,206,206,253,0,204,0,266,0,0,194,0,0,0,43,0,0,0',
'0,179,190,0,0,206,190,0,181,180,0,0,187,44,190,193,4,4,0,190,4,4,266',
'4,0,68,195,206,0,0,48,0,0,0,194,69,0,0,0,0,4,0,181,181,12,0,4,12,4,153',
'4,4,153,4,4,4,4,4,4,4,4,48,73,4,4,48,75,4,195,388,4,4,126,48,388,12',
'10,10,4,12,10,10,332,10,4,126,106,12,4,4,49,4,4,126,107,332,4,4,4,4',
'10,4,110,332,52,4,10,126,10,403,10,10,403,10,10,10,111,10,10,10,10,49',
'113,10,10,49,389,10,389,123,10,10,163,49,125,52,11,11,10,52,11,11,132',
'11,10,163,133,52,10,10,120,10,10,163,42,42,10,10,10,10,11,10,50,50,134',
'10,11,163,11,137,11,11,139,11,11,11,147,11,11,11,11,120,149,11,11,120',
'151,11,161,161,11,11,161,120,156,134,15,15,11,134,15,15,167,15,11,188',
'172,134,11,11,189,11,11,53,53,173,11,11,11,11,15,11,54,54,192,11,15',
'174,15,175,15,15,177,15,15,15,188,15,15,227,188,189,228,15,15,189,232',
'15,188,234,15,15,235,189,238,192,16,16,15,192,16,16,245,16,15,158,158',
'192,15,15,326,15,15,363,363,251,15,15,15,15,16,15,252,254,261,15,16',
'262,16,263,16,16,264,16,16,16,267,16,16,269,240,326,270,16,16,326,283',
'16,326,240,16,16,288,326,289,291,17,17,16,299,17,17,240,17,16,301,303',
'305,16,16,240,16,16,321,324,328,16,16,16,16,17,16,329,331,339,16,17',
'341,17,342,17,17,349,17,17,17,362,17,17,364,372,374,375,17,17,378,383',
'17,392,393,17,17,395,396,399,402,18,18,17,406,18,18,409,18,17,410,416',
'429,17,17,435,17,17,437,439,443,17,17,17,17,18,17,,,,17,18,,18,,18,18',
',18,18,18,,18,18,18,18,,,18,18,,,18,,,18,18,,,,,45,45,18,,45,45,,45',
'18,,,,18,18,,18,18,,,,18,18,18,18,45,18,,,,18,45,,45,,45,45,,45,45,45',
',45,45,,,,,45,45,,,45,,,45,45,,,,,46,46,45,,46,46,,46,45,,,,45,45,,45',
'45,,,,45,45,45,45,46,45,,,,45,46,,46,,46,46,,46,46,46,,46,46,,,,,46',
'46,,,46,,,46,46,,,,,47,47,46,,47,47,,47,46,,,,46,46,,46,46,,,,46,46',
'46,46,47,46,,,,46,47,,47,,47,47,,47,47,47,,47,47,,,,,47,47,,,47,,,47',
'47,,,,,59,59,47,,59,59,59,59,47,,,,47,47,,47,47,,,,47,47,47,47,59,47',
',,,47,59,,59,,59,59,,59,59,59,,59,59,59,59,,,59,59,,,59,,,59,59,,,,',
'60,60,59,,60,60,60,60,59,7,7,7,59,59,,59,59,,,,59,59,59,59,60,59,,,',
'59,60,,60,,60,60,,60,60,60,,60,60,60,60,,,60,60,,,60,,,60,60,,,7,7,7',
'7,60,,,,,,60,,51,51,60,60,51,60,60,,,,60,60,60,60,,60,61,61,,60,61,61',
',61,61,,,,,,,,,,,,,,,51,61,,51,,,,61,,61,,61,61,,61,61,61,,61,61,61',
'61,,51,61,61,,,61,,,61,61,51,51,,,66,66,61,,66,66,,66,61,,,,61,61,,61',
'61,,,,61,61,61,61,66,61,,,,61,66,,66,,66,66,,66,66,66,,66,66,66,66,',
',66,66,,,66,,,66,66,,,,,71,71,66,,71,71,,71,66,,,,66,66,,66,66,,,,66',
'66,66,66,71,66,,,,66,71,,71,,71,71,,71,71,71,,71,71,,,,,71,71,,,71,',
',71,71,,,,,74,74,71,,74,74,,74,71,,,,71,71,,71,71,,,,71,71,71,71,74',
'71,,,,71,74,,74,,74,74,,74,74,74,,74,74,74,74,,,74,74,,,74,,,74,74,',
',,,76,76,74,,76,76,,76,74,,,,74,74,,74,74,,,,74,74,74,74,76,74,,,,74',
'76,,76,,76,76,,76,76,76,,76,76,76,76,,,76,76,,,76,,,76,76,,,,,77,77',
'76,,77,77,,77,76,,,,76,76,,76,76,,,,76,76,76,76,77,76,,,,76,77,,77,',
'77,77,,77,77,77,,77,77,77,77,,,77,77,,,77,,,77,77,,,,,78,78,77,,78,78',
',78,77,,,,77,77,,77,77,,,,77,77,77,77,78,77,,,,77,78,,78,,78,78,,78',
'78,78,,78,78,78,78,,,78,78,,,78,,,78,78,,,,,79,79,78,,79,79,,79,78,',
',,78,78,,78,78,,,,78,78,78,78,79,78,,,,78,79,,79,,79,79,,79,79,79,,79',
'79,79,79,,,79,79,,,79,,,79,79,,,,,80,80,79,,80,80,,80,79,,,,79,79,,79',
'79,,,,79,79,79,79,80,79,,,,79,80,,80,,80,80,,80,80,80,,80,80,80,80,',
',80,80,,,80,,,80,80,,,,,81,81,80,,81,81,,81,80,,,,80,80,,80,80,,,,80',
'80,80,80,81,80,,,,80,81,,81,,81,81,,81,81,81,,81,81,81,81,,,81,81,,',
'81,,,81,81,,,,,82,82,81,,82,82,,82,81,,,,81,81,,81,81,,,,81,81,81,81',
'82,81,,,,81,82,,82,,82,82,,82,82,82,,82,82,82,82,,,82,82,,,82,,,82,82',
',,,,83,83,82,,83,83,,83,82,,,,82,82,,82,82,,,,82,82,82,82,83,82,,,,82',
'83,,83,,83,83,,83,83,83,,83,83,83,83,,,83,83,,,83,,,83,83,,,,,84,84',
'83,,84,84,,84,83,,,,83,83,,83,83,,,,83,83,83,83,84,83,,,,83,84,84,84',
'84,84,84,84,84,84,84,,84,84,,,,,84,84,84,84,84,,,84,84,,,,,,,84,,,,',
'84,84,,,,84,84,,84,84,,,,84,84,84,84,,84,84,85,85,84,119,85,85,,85,',
'207,,,,,,,,119,,119,,119,119,207,85,207,,207,207,,85,,85,,85,85,,85',
'85,85,,85,85,119,,,,85,85,207,,85,,,85,85,,,,,86,86,85,,86,86,,86,85',
',,207,85,85,,85,85,,,,85,85,85,85,86,85,,,,85,86,,86,,86,86,,86,86,86',
',86,86,,,,,86,86,,,86,,,86,86,,,,,87,87,86,,87,87,,87,86,,,,86,86,,86',
'86,,,,86,86,86,86,87,86,,,,86,87,,87,,87,87,,87,87,87,,87,87,,,,,87',
'87,,,87,,,87,87,,,,,88,88,87,,88,88,,88,87,,,,87,87,,87,87,,,,87,87',
'87,87,88,87,,,,87,88,,88,,88,88,,88,88,88,,88,88,,,,,88,88,,,88,,,88',
'88,,,,,89,89,88,,89,89,,89,88,,,,88,88,,88,88,,,,88,88,88,88,89,88,',
',,88,89,,89,,89,89,,89,89,89,,89,89,,,,,89,89,,,89,,,89,89,,,,,90,90',
'89,,90,90,,90,89,,,,89,89,,89,89,,,,89,89,89,89,90,89,,,,89,90,,90,',
'90,90,,90,90,90,,90,90,,,,,90,90,,,90,,,90,90,,,,,91,91,90,,91,91,,91',
'90,,,,90,90,,90,90,,,,90,90,90,90,91,90,,,,90,91,,91,,91,91,,91,91,91',
',91,91,,,,,91,91,,,91,,,91,91,,,,,92,92,91,,92,92,,92,91,,,,91,91,,91',
'91,,,,91,91,91,91,92,91,,,,91,92,,92,,92,92,,92,92,92,,92,92,,,,,92',
'92,,,92,,,92,92,,,,,93,93,92,,93,93,,93,92,,,,92,92,,92,92,,,,92,92',
'92,92,93,92,,,,92,93,,93,,93,93,,93,93,93,,93,93,,,,,93,93,,,93,,,93',
'93,,,,,94,94,93,,94,94,,94,93,,,,93,93,,93,93,,,,93,93,93,93,94,93,',
',,93,94,,94,,94,94,,94,94,94,,94,94,,,,,94,94,,,94,,,94,94,,,,,95,95',
'94,,95,95,,95,94,,,,94,94,,94,94,,,,94,94,94,94,95,94,,,,94,95,,95,',
'95,95,,95,95,95,,95,95,,,,,95,95,,,95,,,95,95,,,,,96,96,95,,96,96,,96',
'95,,,,95,95,,95,95,,,,95,95,95,95,96,95,,,,95,96,,96,,96,96,,96,96,96',
',96,96,,,,,96,96,,,96,,,96,96,,,,,97,97,96,,97,97,,97,96,,,,96,96,,96',
'96,,,,96,96,96,96,97,96,,,,96,97,,97,,97,97,,97,97,97,,97,97,,,,,97',
'97,,,97,,,97,97,,,,,98,98,97,,98,98,,98,97,,,,97,97,,97,97,,,,97,97',
'97,97,98,97,,,,97,98,,98,,98,98,,98,98,98,,98,98,,,,,98,98,,,98,,,98',
'98,,,,,99,99,98,,99,99,,99,98,,,,98,98,,98,98,,,,98,98,98,98,99,98,',
',,98,99,,99,,99,99,,99,99,99,,99,99,,,,,99,99,,,99,,,99,99,,,,,100,100',
'99,,100,100,,100,99,,,,99,99,,99,99,,,,99,99,99,99,100,99,,,,99,100',
',100,,100,100,,100,100,100,,100,100,,,,,100,100,,,100,,,100,100,,,,',
'101,101,100,,101,101,,101,100,,,,100,100,,100,100,,,,100,100,100,100',
'101,100,,,,100,101,,101,,101,101,,101,101,101,,101,101,,,,,101,101,',
',101,,,101,101,,,,,102,102,101,,102,102,,102,101,,,,101,101,,101,101',
',,,101,101,101,101,102,101,,,,101,102,,102,,102,102,,102,102,102,,102',
'102,,,,,102,102,,,102,,,102,102,,,,,103,103,102,,103,103,,103,102,,',
',102,102,,102,102,,,,102,102,102,102,103,102,,,,102,103,,103,,103,103',
',103,103,103,,103,103,,,,,103,103,,,103,,,103,103,,,,,104,104,103,,104',
'104,,104,103,,,,103,103,,103,103,,,,103,103,103,103,104,103,,,,103,104',
',104,,104,104,,104,104,104,,104,104,,,,,104,104,,,104,,,104,104,,,,',
',,104,,,,,,104,,,104,104,104,,104,104,,,,104,104,104,104,,104,105,105',
',104,105,105,,105,,,,,,,,,,,,,,,,,105,105,,,,,105,,105,,105,105,,105',
'105,105,,105,105,105,105,,,105,105,,,105,,,105,105,,,,,108,108,105,',
'108,108,,108,105,,,,105,105,,105,105,,,,105,105,105,105,108,105,,,,105',
'108,,108,,108,108,,108,108,108,,108,108,,,,,108,108,,,108,,,108,108',
',,,,109,109,108,,109,109,,109,108,,,,108,108,,108,108,,,,108,108,108',
'108,109,108,,,,108,109,,109,,109,109,,109,109,109,,109,109,,,,,109,109',
',,109,,,109,109,,,,,112,112,109,,112,112,,112,109,,,,109,109,,109,109',
',,,109,109,109,109,112,109,,,,109,112,,112,,112,112,,112,112,112,,112',
'112,,,,,112,112,,,112,,,112,112,,,,,,,112,,,,,,112,,191,191,112,112',
'191,112,112,,,,112,112,112,112,,112,127,127,,112,127,127,,127,,,,,,',
',,,,,,,,,191,127,127,191,,,,127,,127,,127,127,,127,127,127,,127,127',
'127,127,,191,127,127,,,127,,,127,127,191,191,,,162,162,127,,162,162',
',162,127,,,,127,127,,127,127,,,,127,127,127,127,162,127,,,,127,162,',
'162,,162,162,,162,162,162,,162,162,162,162,,,162,162,,,162,,,162,162',
',,,,,,162,,,,,,162,,265,265,162,162,265,162,162,,,,162,162,162,162,',
'162,165,165,,162,165,165,,165,165,,,,,,,,,,,,,,,265,165,,265,,,,165',
',165,,165,165,,165,165,165,,165,165,165,165,,265,165,165,,,165,,,165',
'165,265,265,,,178,178,165,,178,178,,178,165,,178,,165,165,,165,165,',
',,165,165,165,165,178,165,,,,165,178,,178,,178,178,,178,178,178,,178',
'178,,,,,178,178,,,178,,,178,178,,,,,182,182,178,,182,182,,182,178,,',
',178,178,,178,178,,,,178,178,178,178,182,178,,,,178,182,,182,,182,182',
',182,182,182,,182,182,,,,,182,182,,,182,,,182,182,,,,,183,183,182,,183',
'183,,183,182,,,,182,182,,182,182,,,,182,182,182,182,183,182,,,,182,183',
',183,,183,183,,183,183,183,,183,183,,,,,183,183,,,183,,,183,183,,,,',
'184,184,183,,184,184,,184,183,,,,183,183,,183,183,,,,183,183,183,183',
'184,183,,,,183,184,,184,,184,184,,184,184,184,,184,184,,,,,184,184,',
',184,,,184,184,,,,,226,226,184,,226,226,,226,184,,,,184,184,,184,184',
',,,184,184,184,184,226,184,,,,184,226,,226,,226,226,,226,226,226,,226',
'226,,,,,226,226,,,226,,,226,226,,,,,,,226,,,,,,226,,,,226,226,,226,226',
',,,226,226,226,226,,226,243,243,,226,243,243,,243,243,208,,,,,,,,,,',
',,,208,243,208,,208,208,,243,,243,,243,243,,243,243,243,,243,243,243',
'243,,,243,243,208,,243,,,243,243,,,,208,208,,243,,208,208,,,243,,,208',
'243,243,,243,243,,,,243,243,243,243,,243,258,258,,243,258,258,,258,258',
'208,,,,,,,,,,,,,,,258,,,,,,258,,258,,258,258,,258,258,258,,258,258,258',
'258,,,258,258,,,258,,,258,258,,,,,,,258,,,,,,258,,351,351,258,258,351',
'258,258,,,,258,258,258,258,,258,259,259,,258,259,259,,259,259,,,,,,',
',,,,,,,,351,259,,351,,,,259,,259,,259,259,,259,259,259,,259,259,259',
'259,,351,259,259,,,259,,,259,259,351,351,,,260,260,259,,260,260,,260',
'259,,,,259,259,,259,259,,,,259,259,259,259,260,259,,,,259,260,,260,',
'260,260,,260,260,260,,260,260,,,,,260,260,,,260,,,260,260,,,,,268,268',
'260,,268,268,,268,260,,,,260,260,,260,260,,,,260,260,260,260,268,260',
',,,260,268,,268,,268,268,,268,268,268,,268,268,268,268,,,268,268,,,268',
',,268,268,,,,,,,268,,,,,,268,,,,268,268,,268,268,,,,268,268,268,268',
',268,272,272,,268,272,272,,272,272,121,,,,,,,,,,,,,,121,272,121,,121',
'121,,272,,272,,272,272,,272,272,272,,272,272,272,272,,,272,272,121,',
'272,,,272,272,,,,,273,273,272,,273,273,,273,272,,,,272,272,,272,272',
',,,272,272,272,272,273,272,,,,272,273,,273,,273,273,,273,273,273,,273',
'273,273,273,,,273,273,,,273,,,273,273,,,,,278,278,273,,278,278,,278',
'273,,,,273,273,,273,273,,,,273,273,273,273,278,273,,,,273,278,,278,',
'278,278,,278,278,278,,278,278,278,278,,,278,278,,,278,,,278,278,,,,',
'293,293,278,,293,293,,293,278,,,,278,278,,278,278,,,,278,278,278,278',
'293,278,,,,278,293,,293,,293,293,,293,293,293,,293,293,,,,,293,293,',
',293,,,293,293,,,,,294,294,293,,294,294,,294,293,,,,293,293,,293,293',
',,,293,293,293,293,294,293,,,,293,294,,294,,294,294,,294,294,294,,294',
'294,,,,,294,294,,,294,,,294,294,,,,,295,295,294,,295,295,,295,294,,',
',294,294,,294,294,,,,294,294,294,294,295,294,,,,294,295,,295,,295,295',
',295,295,295,,295,295,,,,,295,295,,,295,,,295,295,,,,,297,297,295,,297',
'297,,297,295,,,,295,295,,295,295,,,,295,295,295,295,297,295,,,,295,297',
',297,,297,297,,297,297,297,,297,297,,,,,297,297,,,297,,,297,297,,,,',
'298,298,297,,298,298,,298,297,,,,297,297,,297,297,,,,297,297,297,297',
'298,297,,,,297,298,,298,,298,298,,298,298,298,,298,298,,,,,298,298,',
',298,,,298,298,,,,,322,322,298,,322,322,,322,298,,,,298,298,,298,298',
',,,298,298,298,298,322,298,,,,298,322,,322,,322,322,,322,322,322,,322',
'322,,,,,322,322,,,322,,,322,322,,,,,333,333,322,,333,333,,333,322,,',
',322,322,,322,322,,,,322,322,322,322,333,322,,,,322,333,,333,,333,333',
',333,333,333,,333,333,,,,,333,333,,,333,,,333,333,,,,,336,336,333,,336',
'336,,336,333,,,,333,333,,333,333,,,,333,333,333,333,336,333,,,,333,336',
',336,,336,336,,336,336,336,,336,336,,,,,336,336,,,336,,,336,336,,,,',
'337,337,336,,337,337,,337,336,,,,336,336,,336,336,,,,336,336,336,336',
'337,336,,,,336,337,,337,,337,337,,337,337,337,,337,337,337,337,,,337',
'337,,,337,,,337,337,,,,,,,337,,,,,,337,,,,337,337,,337,337,,,,337,337',
'337,337,,337,344,344,,337,344,344,,344,344,122,,,,,,,,,,,,,,122,344',
'122,,122,122,,344,,344,,344,344,,344,344,344,,344,344,,,,,344,344,122',
',344,,,344,344,,,,,346,346,344,,346,346,,346,344,,,,344,344,,344,344',
',,,344,344,344,344,346,344,,,,344,346,,346,,346,346,,346,346,346,,346',
'346,346,346,,,346,346,,,346,,,346,346,,,,,347,347,346,,347,347,,347',
'346,,,,346,346,,346,346,,,,346,346,346,346,347,346,,,,346,347,,347,',
'347,347,,347,347,347,,347,347,347,347,,,347,347,,,347,,,347,347,,,,',
'354,354,347,,354,354,,354,347,,,,347,347,,347,347,,,,347,347,347,347',
'354,347,,,,347,354,,354,,354,354,,354,354,354,,354,354,354,354,,,354',
'354,,,354,,,354,354,,,,,373,373,354,,373,373,,373,354,,,,354,354,,354',
'354,,,,354,354,354,354,373,354,,,,354,373,,373,,373,373,,373,373,373',
',373,373,,,,,373,373,,,373,,,373,373,,,,,379,379,373,,379,379,,379,373',
',,,373,373,,373,373,,,,373,373,373,373,379,373,,,,373,379,,379,,379',
'379,,379,379,379,,379,379,379,379,,,379,379,,,379,,,379,379,,,,,391',
'391,379,,391,391,,391,379,,,,379,379,,379,379,,,,379,379,379,379,391',
'379,,,,379,391,,391,,391,391,,391,391,391,,391,391,,,,,391,391,,,391',
',,391,391,,,,,,,391,,,,,,391,,,,391,391,,391,391,,,,391,391,391,391',
',391,404,404,,391,404,404,,404,404,209,,,,,,,,,,,,,,209,404,209,,209',
'209,,404,,404,,404,404,,404,404,404,,404,404,404,404,,,404,404,209,',
'404,,,404,404,,,,209,209,,404,,209,209,,,404,,,209,404,404,,404,404',
',,,404,404,404,404,,404,421,421,,404,421,421,,421,421,209,,,,,,,,,,',
',,,,421,,,,,,421,,421,,421,421,,421,421,421,,421,421,421,421,,,421,421',
',,421,,,421,421,,,,,,,421,,,,,,421,,,,421,421,,421,421,,,,421,421,421',
'421,,421,423,423,,421,423,423,,423,423,205,,,,,,,,,,,,,,205,423,205',
',205,205,,423,,423,,423,423,,423,423,423,,423,423,423,423,,,423,423',
'205,,423,,,423,423,,,,,424,424,423,,424,424,,424,423,,,,423,423,,423',
'423,,,,423,423,423,423,424,423,,,,423,424,,424,,424,424,,424,424,424',
',424,424,424,424,,,424,424,,,424,,,424,424,,,,,433,433,424,,433,433',
',433,424,,,,424,424,,424,424,,,,424,424,424,424,433,424,,,,424,433,',
'433,,433,433,,433,433,433,,433,433,,,,,433,433,,,433,,,433,433,,,,,',
',433,,,,,,433,,,,433,433,9,433,433,,,,433,433,433,433,,433,9,9,9,433',
'9,,9,9,,9,9,9,9,,,,,,,,,,,,,,,,9,,,,9,9,,,9,9,9,9,9,9,,9,9,128,,128',
',,9,,,,,,,128,128,128,,128,,128,128,,128,128,128,128,,,,,9,,,,,,,,,',
',128,,,,128,128,,,128,128,128,128,128,128,,128,128,130,,130,,,128,,',
',,,,130,130,130,,130,,130,130,,130,130,130,130,,,,,128,,,,,,,,,,,130',
',,,130,130,,,130,130,130,130,130,130,,130,130,131,,131,,,130,,,,,,,131',
'131,131,,131,210,131,131,,131,131,131,131,,,,,130,,210,,210,,210,210',
',,,131,,,,131,131,,164,131,131,131,131,131,131,,131,131,210,,164,164',
'164,131,164,,164,164,,164,164,164,164,210,210,,,,,,210,,,,,,,131,164',
',,,164,164,,,164,164,164,164,164,164,,164,164,,,,,,164,,,,176,,,,,,',
'164,164,,,,176,176,176,176,176,211,176,176,164,176,176,176,176,,,,,',
',211,,211,,211,211,,,,176,,,,176,176,,203,176,176,176,176,176,176,,176',
'176,211,,203,203,203,176,203,213,203,203,,203,203,203,203,211,211,,',
',,213,211,213,,213,213,,,176,203,,,,203,203,,,203,203,203,203,203,203',
',203,203,213,,,,,203,,214,213,213,213,213,,,,213,213,,,,,214,213,214',
'215,214,214,,,203,,,,,,,,,215,,215,,215,215,,,213,214,,,,,216,,,214',
'214,214,214,,,,214,214,215,,216,,216,214,216,216,215,215,215,215,215',
'215,,215,215,,,,,,215,,,,,,216,214,,,,,,217,216,216,216,216,216,216',
',216,216,,215,,217,217,216,217,218,217,217,,217,,,,,,,,,218,218,,218',
',218,218,,218,216,217,,,,,,,,217,217,217,217,217,217,,217,217,218,,',
',,217,,219,218,218,218,218,218,218,,218,218,,,,219,219,218,219,220,219',
'219,,219,217,,,,,,,,220,220,,220,,220,220,,220,218,219,,,,,,,,219,219',
'219,219,219,219,,219,219,220,,,,,219,,,220,220,220,220,220,220,221,220',
'220,,,,,,220,,,,221,221,221,219,221,,221,221,212,221,221,221,221,,,',
',,,,220,,212,,212,,212,212,221,,,,,222,,,221,221,221,221,221,221,,221',
'221,222,222,222,212,222,221,222,222,,222,222,222,222,,,,,,212,212,,',
',,,212,,,222,221,,,,222,,,222,222,222,222,222,222,223,222,222,,,223',
',,222,,,,223,223,223,,223,,223,223,,223,223,223,223,,,,,,,,222,,,,,',
',,223,,,,223,223,,231,223,223,223,223,223,223,,223,223,,,231,231,231',
'223,231,,231,231,,231,231,231,231,,,,,,,,,,,,,,,223,231,,,,231,231,',
',231,231,231,231,231,231,236,231,231,,,,,,231,,,,236,236,236,236,236',
',236,236,,236,236,236,236,,,,,,,,231,,,,,,,,236,,,,236,236,,367,236',
'236,236,236,236,236,,236,236,,,367,367,367,236,367,,367,367,,367,367',
'367,367,,,,,,,,,,,,,,,236,367,,,,367,367,,368,367,367,367,367,367,367',
',367,367,,,368,368,368,367,368,,368,368,,368,368,368,368,,,,,,,,,,,',
',,,367,368,,,,368,368,,369,368,368,368,368,368,368,,368,368,,,369,369',
'369,368,369,,369,369,,369,369,369,369,,,,,,,,,,,,,,,368,369,,,,369,369',
',370,369,369,369,369,369,369,,369,369,,,370,370,370,369,370,,370,370',
',370,370,370,370,,,,,,,,,,,,,,,369,370,,,,370,370,,371,370,370,370,370',
'370,370,,370,370,,,371,371,371,370,371,,371,371,,371,371,371,371,,,',
',,,,,,,,,,,370,371,,,,371,371,,387,371,371,371,371,371,371,,371,371',
',,387,387,387,371,387,,387,387,,387,387,387,387,,,,,,,,,,,,,,,371,387',
',,,387,387,,,387,387,387,387,387,387,,387,387,,230,230,230,230,387,230',
'230,230,,230,,230,230,,,,,,,230,230,230,,,,230,,,387,,,,,,,,,230,230',
',,,,,,,,,,,230,230,230,230,,230,230,290,290,290,290,,290,290,290,,290',
',290,290,,,,,,,290,290,290,,,,290,,,,,,,,,,,,290,290,,,,,,,,,,,,290',
'290,290,290,,290,290,292,292,292,292,,292,292,292,,292,,292,292,,,,',
',,292,292,292,,,,292,,,,,,,,,,,,292,292,,,,,,,,,,,,292,292,292,292,',
'292,292,323,323,323,323,,323,323,323,,323,,323,323,,,,,,,323,323,323',
',,,323,,,,,,,,,,,,323,323,,,,,,,,,,,,323,323,323,323,,323,323,348,348',
'348,348,,348,348,348,,348,,348,348,,,,,,,348,348,348,,,,348,,,,,,,,',
',,,348,348,,,,,,,,,,,,348,348,348,348,,348,348,427,427,427,427,,427',
'427,427,,427,,427,427,,,,,,,427,427,427,,,,427,,,,,,,,,,,,427,427,,',
',,,,,,,,,427,427,427,427,,427,427' ]
        racc_action_check = arr = ::Array.new(7077, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

racc_action_pointer = [
    -2,     6,   nil,   nil,    58,    -1,   nil,   713,    10,  5566,
   118,   178,    82,   nil,   nil,   238,   298,   358,   418,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   110,   -31,    31,   478,   538,   598,    68,   128,
   118,   788,   142,   169,   178,   nil,   nil,   nil,   nil,   658,
   718,   804,   nil,   nil,   nil,   nil,   864,   nil,    -7,     8,
   nil,   924,   nil,   106,   984,    97,  1044,  1104,  1164,  1224,
  1284,  1344,  1404,  1464,  1524,  1611,  1671,  1731,  1791,  1851,
  1911,  1971,  2031,  2091,  2151,  2211,  2271,  2331,  2391,  2451,
  2511,  2571,  2631,  2691,  2751,  2837,    89,   129,  2897,  2957,
   137,   151,  3017,   140,   nil,   nil,   nil,   nil,   nil,  1609,
   188,  4017,  4763,   146,   nil,   169,    80,  3103,  5623,   nil,
  5680,  5737,   160,   164,   202,   nil,   nil,   200,   nil,   195,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   194,   nil,   213,
   nil,   217,   nil,    83,   nil,   nil,   226,   nil,   305,   nil,
   nil,   230,  3163,   140,  5784,  3249,   nil,   233,   nil,   nil,
   nil,   nil,   241,   250,   262,   264,  5850,   263,  3309,    -9,
    -1,    -2,  3369,  3429,  3489,   nil,   nil,     2,   243,   248,
     9,  3087,   262,     5,    24,    58,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,  5897,    18,  5381,     2,  1615,  3639,  5209,
  5754,  5867,  6208,  5914,  5961,  5978,  6006,  6053,  6070,  6117,
  6134,  6188,  6233,  6287,   nil,   nil,  3549,   270,   215,   nil,
  6703,  6334,   242,   nil,   269,   254,  6388,   nil,   260,   nil,
   317,   nil,   nil,  3635,   nil,   293,   nil,   nil,   nil,   nil,
   nil,   303,   290,   -28,   320,   nil,   -11,   nil,  3721,  3807,
  3867,   319,   322,   324,   298,  3233,    -8,   331,  3927,   335,
   338,   nil,  4013,  4073,   nil,   nil,   nil,   nil,  4133,   nil,
   nil,   nil,   nil,   337,   nil,   nil,   nil,   nil,   344,   348,
  6760,   349,  6817,  4193,  4253,  4313,   nil,  4373,  4433,   350,
   nil,   342,   nil,   357,   nil,   359,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   367,  4493,  6874,   369,   nil,   308,   nil,   366,   376,
   nil,   316,    90,  4553,   nil,   nil,  4613,  4673,   nil,   378,
   -15,   381,   360,     0,  4759,   nil,  4819,  4879,  6931,   387,
   nil,  3791,   nil,   nil,  4939,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   329,   237,   390,   nil,   nil,  6435,  6482,  6529,
  6576,  6623,   394,  4999,   334,   396,   nil,   nil,   396,  5059,
   nil,   nil,   nil,   383,   nil,   nil,   nil,  6670,   105,   137,
   nil,  5119,   403,   380,   nil,   407,   408,   nil,   nil,   408,
   nil,   nil,   409,   143,  5205,   nil,   413,   nil,   nil,   416,
   387,   nil,   nil,   nil,   nil,   nil,   420,   nil,   nil,   nil,
   nil,  5291,   nil,  5377,  5437,   nil,   nil,  6988,   nil,   421,
   nil,   nil,   nil,  5497,   nil,   424,   nil,   427,   nil,   428,
   nil,   nil,   nil,   397,   nil,   nil,   nil,   nil ]

racc_action_default = [
    -3,  -252,    -1,    -2,    -4,    -5,    -8,   -10,   -16,   -21,
  -252,  -252,  -168,   -33,   -34,  -252,  -252,  -252,  -252,   -61,
   -62,   -63,   -64,   -65,   -66,   -67,   -68,   -69,   -70,   -71,
   -72,   -73,   -74,   -75,   -76,   -77,   -78,   -79,   -80,   -81,
   -82,   -83,   -84,   -89,   -93,  -252,  -252,  -252,  -252,  -252,
  -252,  -252,  -252,  -202,  -225,  -184,  -185,  -186,  -187,  -252,
  -252,  -252,  -198,  -199,  -200,  -201,  -252,  -204,  -252,  -217,
  -220,  -252,  -226,  -252,  -252,    -7,  -252,  -252,  -252,  -252,
  -252,  -252,  -252,  -252,  -129,  -252,  -252,  -252,  -252,  -252,
  -252,  -252,  -252,  -252,  -252,  -252,  -252,  -252,  -252,  -252,
  -252,  -252,  -252,  -252,  -252,  -252,  -252,  -124,  -251,  -251,
   -22,   -23,  -252,  -251,  -143,  -165,  -166,  -167,  -168,   -46,
  -168,   -47,   -54,  -252,   -90,  -252,  -252,  -252,  -252,  -100,
  -252,  -252,  -251,  -251,  -252,  -140,  -141,  -227,  -152,  -154,
  -155,  -156,  -157,  -158,  -160,  -161,  -202,  -251,   -14,  -227,
  -189,  -227,  -191,  -252,  -194,  -195,  -252,  -203,  -252,  -208,
  -211,  -252,  -215,  -252,  -252,  -252,   448,    -6,    -9,   -11,
   -12,   -13,   -17,   -18,   -19,   -20,  -252,  -227,  -252,   -82,
   -83,   -84,  -238,  -244,  -232,  -130,  -133,  -252,  -235,  -249,
  -168,  -241,  -247,  -185,  -186,  -187,  -231,  -236,  -237,  -239,
  -240,  -242,  -250,   -59,  -252,   -36,   -37,   -38,   -39,   -40,
   -41,   -42,   -43,   -44,   -45,   -48,   -49,   -50,   -51,   -52,
   -53,   -55,   -56,  -252,   -57,  -118,  -252,  -227,   -86,   -94,
  -129,  -128,  -252,  -127,  -252,  -229,  -252,   -28,  -251,  -169,
  -252,   -58,   -95,  -252,   -98,  -227,  -172,  -174,  -175,  -176,
  -177,  -179,  -252,  -252,  -182,  -225,  -252,   -92,  -252,  -252,
  -252,  -252,  -252,  -252,  -251,  -228,  -252,  -252,  -228,  -252,
  -252,  -192,  -252,  -252,  -205,  -206,  -207,  -209,  -252,  -212,
  -213,  -214,  -216,  -227,  -218,  -221,  -223,  -224,    -8,  -252,
  -129,  -252,  -228,  -252,  -252,  -252,   -35,  -252,  -252,  -227,
  -120,  -252,   -88,  -227,  -132,  -252,  -232,  -233,  -234,  -235,
  -238,  -241,  -243,  -244,  -245,  -246,  -247,  -248,  -249,  -125,
  -126,  -252,  -230,  -129,  -252,  -146,  -252,  -170,  -227,  -252,
   -97,  -252,  -228,  -252,  -180,  -181,  -252,  -252,   -91,  -252,
  -103,  -252,  -109,  -252,  -252,  -113,  -251,  -251,  -129,  -252,
  -162,  -252,  -153,  -159,  -251,   -15,  -188,  -190,  -193,  -196,
  -197,  -210,  -252,  -252,  -227,   -26,  -131,  -136,  -134,  -135,
   -60,  -122,  -252,  -228,   -85,  -252,   -25,   -29,  -227,  -251,
  -147,  -148,  -149,  -252,   -96,   -99,  -173,  -178,  -252,  -103,
  -102,  -252,  -252,  -109,  -108,  -252,  -252,  -112,  -114,  -252,
  -144,  -145,  -252,  -252,  -252,  -163,  -252,  -219,  -222,  -252,
   -30,  -119,  -121,   -87,  -123,   -27,  -252,  -171,  -183,  -101,
  -104,  -252,  -107,  -252,  -251,  -137,  -138,  -252,  -139,  -252,
  -151,  -164,   -24,   -31,  -142,  -252,  -106,  -252,  -111,  -252,
  -116,  -117,  -150,  -229,  -105,  -110,  -115,   -32 ]

racc_goto_table = [
     2,   119,   121,   122,   124,   235,   123,   142,   225,   140,
   264,   233,   233,   204,   177,   114,   157,   321,   285,   366,
   352,   254,   269,   345,   270,   245,    75,   399,   402,   232,
   234,   128,   130,   131,     1,   406,     3,   409,   110,   111,
   377,   394,   224,   242,   420,   149,   151,   148,   148,   156,
   291,   132,   133,   390,   159,   147,   344,   164,   254,   439,
   416,   299,   283,   134,   168,   169,   170,   171,   324,   380,
   176,   203,   205,   206,   207,   208,   209,   210,   211,   212,
   213,   214,   215,   216,   217,   218,   219,   220,   221,   222,
   223,   227,   422,   148,   231,   231,   167,   238,   236,   349,
   301,   353,   419,   386,   335,   334,   405,   398,   172,   173,
   174,   175,   359,   256,   279,   148,   261,   262,   331,   280,
   277,   278,   276,   114,   160,   162,   281,   nil,   nil,   nil,
   300,   267,   nil,   nil,   nil,   254,   nil,   263,   nil,   328,
   nil,   325,   nil,   nil,   nil,   nil,   nil,   142,   nil,   140,
   nil,   nil,   nil,   288,   366,   nil,   362,   nil,   nil,   nil,
   303,   nil,   282,   nil,   121,   289,   nil,   350,   128,   130,
   131,   nil,   372,   nil,   nil,   nil,   375,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   302,
   nil,   132,   133,   114,   nil,   147,   nil,   nil,   nil,   nil,
   nil,   383,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   223,   nil,   nil,   nil,   nil,   408,   nil,   nil,
   364,   142,   nil,   140,   nil,   447,   nil,   254,   361,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   410,   nil,   nil,
   nil,   nil,   nil,   329,   nil,   nil,   203,   nil,   nil,   401,
   401,   415,   nil,   378,   nil,   nil,   355,   401,   339,   341,
   156,   360,   nil,   nil,   388,   nil,   159,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   412,   403,   367,
   368,   369,   401,   370,   371,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   142,   236,   140,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   387,
   nil,   nil,   203,   nil,   nil,   355,   443,   440,   nil,   381,
   203,   nil,   nil,   nil,   nil,   413,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   223,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   128,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   429,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   236,
   nil,   435,   nil,   437,   441 ]

racc_goto_check = [
     2,    10,    10,    10,    40,    13,     6,    37,    53,    38,
    15,    52,    52,    19,    11,    60,    84,    14,    92,    57,
    69,    39,    15,    50,    15,    45,     5,    62,    62,    56,
    56,    10,    10,    10,     1,    62,     3,    12,     9,     9,
    16,    48,    20,    44,    46,     8,     8,     6,     6,     6,
    15,    60,    60,    47,     6,    60,    49,    10,    39,    51,
    62,    54,    45,    63,     6,     6,     6,     6,    65,    66,
    10,    10,    10,    10,    10,    10,    10,    10,    10,    10,
    10,    10,    10,    10,    10,    10,    10,    10,    10,    10,
    10,     8,    48,     6,    10,    10,     5,    61,    10,    68,
    15,    71,    47,    72,    73,    75,    69,    50,     9,     9,
     9,     9,    79,     8,    80,     6,    61,    61,    15,    81,
    85,    86,    88,    60,    89,    90,    91,   nil,   nil,   nil,
    53,    61,   nil,   nil,   nil,    39,   nil,    60,   nil,    45,
   nil,    52,   nil,   nil,   nil,   nil,   nil,    37,   nil,    38,
   nil,   nil,   nil,     6,    57,   nil,    15,   nil,   nil,   nil,
    11,   nil,     2,   nil,    10,     2,   nil,    52,    10,    10,
    10,   nil,    15,   nil,   nil,   nil,    15,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    40,
   nil,    60,    60,    60,   nil,    60,   nil,   nil,   nil,   nil,
   nil,    15,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,    10,   nil,   nil,   nil,   nil,    92,   nil,   nil,
    11,    37,   nil,    38,   nil,    14,   nil,    39,    84,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,    15,   nil,   nil,
   nil,   nil,   nil,     2,   nil,   nil,    10,   nil,   nil,    52,
    52,    15,   nil,    11,   nil,   nil,     6,    52,     2,     2,
     6,     6,   nil,   nil,    19,   nil,     6,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,    53,    11,    10,
    10,    10,    52,    10,    10,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,    37,    10,    38,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    10,
   nil,   nil,    10,   nil,   nil,     6,    13,    52,   nil,    60,
    10,   nil,   nil,   nil,   nil,    40,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    10,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,    10,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,     2,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    10,
   nil,     2,   nil,     2,     2 ]

racc_goto_pointer = [
   nil,    34,     0,    36,   nil,    22,   -12,   nil,   -14,    28,
   -14,   -70,  -327,  -107,  -218,  -127,  -282,   nil,   nil,   -72,
   -62,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   -44,   -42,  -105,
   -39,   nil,   nil,   nil,   -82,  -101,  -347,  -287,  -301,  -204,
  -237,  -365,   -97,   -96,  -165,   nil,   -79,  -273,   nil,   nil,
     3,   -16,  -319,    13,   nil,  -170,  -257,   nil,  -165,  -245,
   nil,  -165,  -229,  -149,   nil,  -147,   nil,   nil,   nil,  -160,
   -47,   -42,   nil,   nil,   -50,   -38,   -37,   nil,   -36,    56,
    56,   -36,  -146 ]

racc_goto_default = [
   nil,   nil,   400,   nil,     4,     5,     6,     7,   nil,     8,
     9,   nil,   nil,   nil,   nil,   nil,   237,    13,    14,   343,
   nil,    19,    20,    21,    22,    23,    24,    25,    26,    27,
    28,    29,    30,    31,    32,    33,    34,    35,    36,    37,
   nil,    43,    44,   125,   nil,   nil,   129,   nil,   nil,   nil,
   nil,   nil,   239,   nil,   nil,   107,   nil,   185,   187,   186,
    50,   nil,   nil,   nil,   113,   nil,   nil,   137,   nil,   138,
   139,   143,   246,   247,   248,   249,   250,   253,   153,   155,
    62,    63,    64,    66,   nil,   nil,   nil,   158,   nil,   nil,
   nil,   nil,   nil ]

racc_reduce_table = [
  0, 0, :racc_error,
  1, 95, :_reduce_1,
  1, 95, :_reduce_2,
  0, 95, :_reduce_3,
  1, 96, :_reduce_4,
  1, 98, :_reduce_5,
  3, 98, :_reduce_6,
  2, 98, :_reduce_7,
  1, 99, :_reduce_8,
  3, 99, :_reduce_9,
  1, 100, :_reduce_none,
  3, 100, :_reduce_11,
  3, 100, :_reduce_12,
  3, 100, :_reduce_13,
  1, 102, :_reduce_14,
  3, 102, :_reduce_15,
  1, 101, :_reduce_none,
  3, 101, :_reduce_17,
  3, 101, :_reduce_18,
  3, 101, :_reduce_19,
  3, 101, :_reduce_20,
  1, 103, :_reduce_none,
  2, 103, :_reduce_22,
  2, 103, :_reduce_23,
  7, 103, :_reduce_24,
  5, 103, :_reduce_25,
  5, 103, :_reduce_26,
  4, 110, :_reduce_27,
  1, 107, :_reduce_28,
  3, 107, :_reduce_29,
  1, 106, :_reduce_30,
  2, 106, :_reduce_31,
  4, 106, :_reduce_32,
  1, 104, :_reduce_none,
  1, 104, :_reduce_none,
  4, 104, :_reduce_35,
  3, 104, :_reduce_36,
  3, 104, :_reduce_37,
  3, 104, :_reduce_38,
  3, 104, :_reduce_39,
  3, 104, :_reduce_40,
  3, 104, :_reduce_41,
  3, 104, :_reduce_42,
  3, 104, :_reduce_43,
  3, 104, :_reduce_44,
  3, 104, :_reduce_45,
  2, 104, :_reduce_46,
  2, 104, :_reduce_47,
  3, 104, :_reduce_48,
  3, 104, :_reduce_49,
  3, 104, :_reduce_50,
  3, 104, :_reduce_51,
  3, 104, :_reduce_52,
  3, 104, :_reduce_53,
  2, 104, :_reduce_54,
  3, 104, :_reduce_55,
  3, 104, :_reduce_56,
  3, 104, :_reduce_57,
  3, 104, :_reduce_58,
  1, 113, :_reduce_59,
  3, 113, :_reduce_60,
  1, 111, :_reduce_none,
  1, 111, :_reduce_none,
  1, 111, :_reduce_none,
  1, 111, :_reduce_none,
  1, 111, :_reduce_none,
  1, 111, :_reduce_none,
  1, 111, :_reduce_none,
  1, 111, :_reduce_none,
  1, 111, :_reduce_none,
  1, 111, :_reduce_none,
  1, 111, :_reduce_none,
  1, 111, :_reduce_none,
  1, 111, :_reduce_none,
  1, 111, :_reduce_none,
  1, 111, :_reduce_none,
  1, 111, :_reduce_none,
  1, 111, :_reduce_none,
  1, 111, :_reduce_none,
  1, 111, :_reduce_none,
  1, 111, :_reduce_80,
  1, 111, :_reduce_81,
  1, 111, :_reduce_82,
  1, 111, :_reduce_83,
  1, 111, :_reduce_84,
  5, 112, :_reduce_85,
  3, 112, :_reduce_86,
  6, 112, :_reduce_87,
  4, 112, :_reduce_88,
  1, 116, :_reduce_89,
  2, 116, :_reduce_90,
  4, 135, :_reduce_91,
  3, 135, :_reduce_92,
  1, 135, :_reduce_93,
  3, 136, :_reduce_94,
  2, 134, :_reduce_95,
  3, 138, :_reduce_96,
  2, 138, :_reduce_97,
  2, 137, :_reduce_98,
  4, 137, :_reduce_99,
  2, 119, :_reduce_100,
  5, 140, :_reduce_101,
  4, 140, :_reduce_102,
  0, 141, :_reduce_none,
  2, 141, :_reduce_104,
  4, 141, :_reduce_105,
  3, 141, :_reduce_106,
  6, 120, :_reduce_107,
  5, 120, :_reduce_108,
  0, 142, :_reduce_none,
  4, 142, :_reduce_110,
  3, 142, :_reduce_111,
  5, 118, :_reduce_112,
  1, 143, :_reduce_113,
  2, 143, :_reduce_114,
  5, 144, :_reduce_115,
  1, 145, :_reduce_none,
  1, 145, :_reduce_none,
  1, 114, :_reduce_none,
  4, 114, :_reduce_119,
  1, 148, :_reduce_120,
  3, 148, :_reduce_121,
  3, 147, :_reduce_122,
  6, 117, :_reduce_123,
  2, 117, :_reduce_124,
  3, 149, :_reduce_125,
  3, 149, :_reduce_126,
  1, 150, :_reduce_none,
  1, 150, :_reduce_none,
  0, 105, :_reduce_129,
  1, 105, :_reduce_130,
  3, 105, :_reduce_131,
  1, 152, :_reduce_none,
  1, 152, :_reduce_none,
  3, 151, :_reduce_134,
  3, 151, :_reduce_135,
  3, 151, :_reduce_136,
  6, 121, :_reduce_137,
  6, 122, :_reduce_138,
  6, 123, :_reduce_139,
  1, 157, :_reduce_none,
  1, 157, :_reduce_none,
  7, 124, :_reduce_142,
  1, 158, :_reduce_143,
  1, 156, :_reduce_none,
  1, 156, :_reduce_none,
  1, 159, :_reduce_none,
  2, 159, :_reduce_147,
  1, 160, :_reduce_none,
  1, 160, :_reduce_none,
  7, 125, :_reduce_150,
  6, 125, :_reduce_151,
  1, 161, :_reduce_152,
  3, 161, :_reduce_153,
  1, 163, :_reduce_none,
  1, 163, :_reduce_none,
  1, 163, :_reduce_156,
  1, 163, :_reduce_none,
  1, 164, :_reduce_158,
  3, 164, :_reduce_159,
  1, 165, :_reduce_none,
  1, 165, :_reduce_none,
  1, 162, :_reduce_none,
  2, 162, :_reduce_163,
  6, 127, :_reduce_164,
  1, 154, :_reduce_none,
  1, 154, :_reduce_none,
  1, 154, :_reduce_none,
  1, 154, :_reduce_168,
  1, 155, :_reduce_169,
  2, 155, :_reduce_170,
  4, 155, :_reduce_171,
  1, 139, :_reduce_172,
  3, 139, :_reduce_173,
  1, 166, :_reduce_none,
  1, 166, :_reduce_none,
  1, 167, :_reduce_none,
  1, 167, :_reduce_none,
  3, 169, :_reduce_178,
  1, 169, :_reduce_179,
  2, 170, :_reduce_180,
  2, 168, :_reduce_181,
  1, 171, :_reduce_182,
  4, 171, :_reduce_183,
  1, 115, :_reduce_184,
  1, 128, :_reduce_185,
  1, 128, :_reduce_186,
  1, 128, :_reduce_187,
  4, 129, :_reduce_188,
  2, 129, :_reduce_189,
  4, 129, :_reduce_190,
  2, 129, :_reduce_191,
  3, 130, :_reduce_192,
  4, 130, :_reduce_193,
  2, 130, :_reduce_194,
  1, 172, :_reduce_195,
  3, 172, :_reduce_196,
  3, 173, :_reduce_197,
  1, 132, :_reduce_none,
  1, 132, :_reduce_none,
  1, 132, :_reduce_none,
  1, 174, :_reduce_201,
  1, 174, :_reduce_202,
  2, 175, :_reduce_203,
  1, 177, :_reduce_204,
  1, 179, :_reduce_205,
  1, 180, :_reduce_206,
  2, 178, :_reduce_207,
  1, 181, :_reduce_208,
  1, 182, :_reduce_209,
  2, 182, :_reduce_210,
  2, 176, :_reduce_211,
  2, 183, :_reduce_212,
  2, 183, :_reduce_213,
  3, 97, :_reduce_214,
  0, 185, :_reduce_none,
  1, 185, :_reduce_none,
  0, 184, :_reduce_217,
  2, 184, :_reduce_218,
  4, 184, :_reduce_219,
  1, 126, :_reduce_220,
  3, 126, :_reduce_221,
  5, 126, :_reduce_222,
  1, 186, :_reduce_none,
  1, 186, :_reduce_none,
  1, 133, :_reduce_225,
  1, 131, :_reduce_226,
  0, 109, :_reduce_none,
  1, 109, :_reduce_228,
  0, 108, :_reduce_none,
  1, 108, :_reduce_none,
  1, 153, :_reduce_none,
  1, 153, :_reduce_none,
  1, 153, :_reduce_none,
  1, 153, :_reduce_none,
  1, 153, :_reduce_none,
  1, 153, :_reduce_none,
  1, 153, :_reduce_none,
  1, 153, :_reduce_none,
  1, 153, :_reduce_none,
  1, 153, :_reduce_none,
  1, 153, :_reduce_none,
  1, 153, :_reduce_none,
  1, 153, :_reduce_none,
  1, 153, :_reduce_none,
  1, 153, :_reduce_none,
  1, 153, :_reduce_none,
  1, 153, :_reduce_none,
  1, 153, :_reduce_none,
  1, 153, :_reduce_none,
  1, 153, :_reduce_none,
  0, 146, :_reduce_251 ]

racc_reduce_n = 252

racc_shift_n = 448

racc_token_table = {
  false => 0,
  :error => 1,
  :STRING => 2,
  :DQPRE => 3,
  :DQMID => 4,
  :DQPOST => 5,
  :WORD => 6,
  :LBRACK => 7,
  :RBRACK => 8,
  :LBRACE => 9,
  :RBRACE => 10,
  :SYMBOL => 11,
  :FARROW => 12,
  :COMMA => 13,
  :TRUE => 14,
  :FALSE => 15,
  :EQUALS => 16,
  :APPENDS => 17,
  :DELETES => 18,
  :LESSEQUAL => 19,
  :NOTEQUAL => 20,
  :DOT => 21,
  :COLON => 22,
  :LLCOLLECT => 23,
  :RRCOLLECT => 24,
  :QMARK => 25,
  :LPAREN => 26,
  :RPAREN => 27,
  :ISEQUAL => 28,
  :GREATEREQUAL => 29,
  :GREATERTHAN => 30,
  :LESSTHAN => 31,
  :IF => 32,
  :ELSE => 33,
  :DEFINE => 34,
  :ELSIF => 35,
  :VARIABLE => 36,
  :CLASS => 37,
  :INHERITS => 38,
  :NODE => 39,
  :BOOLEAN => 40,
  :NAME => 41,
  :SEMIC => 42,
  :CASE => 43,
  :DEFAULT => 44,
  :AT => 45,
  :ATAT => 46,
  :LCOLLECT => 47,
  :RCOLLECT => 48,
  :CLASSREF => 49,
  :NOT => 50,
  :OR => 51,
  :AND => 52,
  :UNDEF => 53,
  :PARROW => 54,
  :PLUS => 55,
  :MINUS => 56,
  :TIMES => 57,
  :DIV => 58,
  :LSHIFT => 59,
  :RSHIFT => 60,
  :UMINUS => 61,
  :MATCH => 62,
  :NOMATCH => 63,
  :REGEX => 64,
  :IN_EDGE => 65,
  :OUT_EDGE => 66,
  :IN_EDGE_SUB => 67,
  :OUT_EDGE_SUB => 68,
  :IN => 69,
  :UNLESS => 70,
  :PIPE => 71,
  :LAMBDA => 72,
  :SELBRACE => 73,
  :NUMBER => 74,
  :HEREDOC => 75,
  :SUBLOCATE => 76,
  :RENDER_STRING => 77,
  :RENDER_EXPR => 78,
  :EPP_START => 79,
  :EPP_END => 80,
  :EPP_END_TRIM => 81,
  :FUNCTION => 82,
  :PRIVATE => 83,
  :ATTR => 84,
  :TYPE => 85,
  :LOW => 86,
  :APPLICATION => 87,
  :PRODUCES => 88,
  :CONSUMES => 89,
  :HIGH => 90,
  :LISTSTART => 91,
  :SPLAT => 92,
  :MODULO => 93 }

racc_nt_base = 94

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "STRING",
  "DQPRE",
  "DQMID",
  "DQPOST",
  "WORD",
  "LBRACK",
  "RBRACK",
  "LBRACE",
  "RBRACE",
  "SYMBOL",
  "FARROW",
  "COMMA",
  "TRUE",
  "FALSE",
  "EQUALS",
  "APPENDS",
  "DELETES",
  "LESSEQUAL",
  "NOTEQUAL",
  "DOT",
  "COLON",
  "LLCOLLECT",
  "RRCOLLECT",
  "QMARK",
  "LPAREN",
  "RPAREN",
  "ISEQUAL",
  "GREATEREQUAL",
  "GREATERTHAN",
  "LESSTHAN",
  "IF",
  "ELSE",
  "DEFINE",
  "ELSIF",
  "VARIABLE",
  "CLASS",
  "INHERITS",
  "NODE",
  "BOOLEAN",
  "NAME",
  "SEMIC",
  "CASE",
  "DEFAULT",
  "AT",
  "ATAT",
  "LCOLLECT",
  "RCOLLECT",
  "CLASSREF",
  "NOT",
  "OR",
  "AND",
  "UNDEF",
  "PARROW",
  "PLUS",
  "MINUS",
  "TIMES",
  "DIV",
  "LSHIFT",
  "RSHIFT",
  "UMINUS",
  "MATCH",
  "NOMATCH",
  "REGEX",
  "IN_EDGE",
  "OUT_EDGE",
  "IN_EDGE_SUB",
  "OUT_EDGE_SUB",
  "IN",
  "UNLESS",
  "PIPE",
  "LAMBDA",
  "SELBRACE",
  "NUMBER",
  "HEREDOC",
  "SUBLOCATE",
  "RENDER_STRING",
  "RENDER_EXPR",
  "EPP_START",
  "EPP_END",
  "EPP_END_TRIM",
  "FUNCTION",
  "PRIVATE",
  "ATTR",
  "TYPE",
  "LOW",
  "APPLICATION",
  "PRODUCES",
  "CONSUMES",
  "HIGH",
  "LISTSTART",
  "SPLAT",
  "MODULO",
  "$start",
  "program",
  "statements",
  "epp_expression",
  "syntactic_statements",
  "syntactic_statement",
  "assignment",
  "relationship",
  "assignments",
  "resource",
  "expression",
  "attribute_operations",
  "additional_resource_bodies",
  "resource_bodies",
  "endsemi",
  "endcomma",
  "resource_body",
  "primary_expression",
  "call_function_expression",
  "expressions",
  "selector_entries",
  "variable",
  "call_method_with_lambda_expression",
  "collection_expression",
  "case_expression",
  "if_expression",
  "unless_expression",
  "definition_expression",
  "application_expression",
  "capability_mapping",
  "hostclass_expression",
  "node_definition_expression",
  "epp_render_expression",
  "function_definition",
  "reserved_word",
  "array",
  "hash",
  "regex",
  "quotedtext",
  "type",
  "lambda",
  "call_method_expression",
  "named_access",
  "lambda_parameter_list",
  "lambda_rest",
  "parameters",
  "if_part",
  "else",
  "unless_else",
  "case_options",
  "case_option",
  "options_statements",
  "nil",
  "selector_entry",
  "selector_entry_list",
  "collect_query",
  "optional_query",
  "attribute_operation",
  "attribute_name",
  "keyword",
  "classname",
  "parameter_list",
  "opt_statements",
  "capability_kw",
  "stacked_classname",
  "classparent",
  "classnameordefault",
  "hostnames",
  "nodeparent",
  "hostname",
  "dotted_name",
  "name_or_number",
  "parameter",
  "untyped_parameter",
  "typed_parameter",
  "regular_parameter",
  "splat_parameter",
  "parameter_type",
  "hashpairs",
  "hashpair",
  "string",
  "dq_string",
  "heredoc",
  "dqpre",
  "dqrval",
  "dqpost",
  "dqmid",
  "text_expression",
  "dqtail",
  "sublocated_text",
  "epp_parameters_list",
  "optional_statements",
  "epp_end" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

module_eval(<<'.,.,', 'egrammar.ra', 67)
  def _reduce_1(val, _values, result)
     result = create_program(Factory.block_or_expression(*val[0])) 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 68)
  def _reduce_2(val, _values, result)
     result = create_program(Factory.block_or_expression(*val[0])) 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 69)
  def _reduce_3(val, _values, result)
     result = create_empty_program() 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 73)
  def _reduce_4(val, _values, result)
     result = transform_calls(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 80)
  def _reduce_5(val, _values, result)
     result = [val[0]]
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 81)
  def _reduce_6(val, _values, result)
     result = val[0].push val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 82)
  def _reduce_7(val, _values, result)
     result = val[0].push val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 89)
  def _reduce_8(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 90)
  def _reduce_9(val, _values, result)
     result = aryfy(val[0]).push(val[1]).push(val[2]) 
    result
  end
.,.,

# reduce 10 omitted

module_eval(<<'.,.,', 'egrammar.ra', 95)
  def _reduce_11(val, _values, result)
     result = val[0].set(val[2])      ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 96)
  def _reduce_12(val, _values, result)
     result = val[0].plus_set(val[2]) ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 97)
  def _reduce_13(val, _values, result)
     result = val[0].minus_set(val[2]); loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 100)
  def _reduce_14(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 101)
  def _reduce_15(val, _values, result)
     result = val[0].push(val[2]) 
    result
  end
.,.,

# reduce 16 omitted

module_eval(<<'.,.,', 'egrammar.ra', 105)
  def _reduce_17(val, _values, result)
     result = val[0].relop(val[1][:value], val[2]); loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 106)
  def _reduce_18(val, _values, result)
     result = val[0].relop(val[1][:value], val[2]); loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 107)
  def _reduce_19(val, _values, result)
     result = val[0].relop(val[1][:value], val[2]); loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 108)
  def _reduce_20(val, _values, result)
     result = val[0].relop(val[1][:value], val[2]); loc result, val[1] 
    result
  end
.,.,

# reduce 21 omitted

module_eval(<<'.,.,', 'egrammar.ra', 117)
  def _reduce_22(val, _values, result)
          result = val[1]
      unless Factory.set_resource_form(result, :virtual)
        # This is equivalent to a syntax error - additional semantic restrictions apply
        error val[0], "Virtual (@) can only be applied to a Resource Expression"
      end
      # relocate the result
      loc result, val[0], val[1]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 128)
  def _reduce_23(val, _values, result)
          result = val[1]
      unless Factory.set_resource_form(result, :exported)
        # This is equivalent to a syntax error - additional semantic restrictions apply
        error val[0], "Exported (@@) can only be applied to a Resource Expression"
      end
      # relocate the result
      loc result, val[0], val[1]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 139)
  def _reduce_24(val, _values, result)
          bodies = [Factory.RESOURCE_BODY(val[2], val[4])] + val[5]
      result = Factory.RESOURCE(val[0], bodies)
      loc result, val[0], val[6]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 146)
  def _reduce_25(val, _values, result)
            result = Factory.RESOURCE(Factory.fqn(token_text(val[0])), val[2])
        loc result, val[0], val[4]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 155)
  def _reduce_26(val, _values, result)
           result = case Factory.resource_shape(val[0])
       when :resource, :class
        # This catches deprecated syntax.
        # If the attribute operations does not include +>, then the found expression
        # is actually a LEFT followed by LITERAL_HASH
        #
        unless tmp = transform_resource_wo_title(val[0], val[2])
          error val[1], "Syntax error resource body without title or hash with +>"
        end
        tmp
      when :defaults
        Factory.RESOURCE_DEFAULTS(val[0], val[2])
      when :override
        # This was only done for override in original - TODO should it be here at all
        Factory.RESOURCE_OVERRIDE(val[0], val[2])
      else
        error val[0], "Expression is not valid as a resource, resource-default, or resource-override"
      end
     loc result, val[0], val[4]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 177)
  def _reduce_27(val, _values, result)
     result = Factory.RESOURCE_BODY(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 180)
  def _reduce_28(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 181)
  def _reduce_29(val, _values, result)
     result = val[0].push val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 187)
  def _reduce_30(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 188)
  def _reduce_31(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 189)
  def _reduce_32(val, _values, result)
     result = val[2] 
    result
  end
.,.,

# reduce 33 omitted

# reduce 34 omitted

module_eval(<<'.,.,', 'egrammar.ra', 196)
  def _reduce_35(val, _values, result)
     result = val[0][*val[2]]         ; loc result, val[0], val[3] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 197)
  def _reduce_36(val, _values, result)
     result = val[0].in val[2]        ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 198)
  def _reduce_37(val, _values, result)
     result = val[0] =~  val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 199)
  def _reduce_38(val, _values, result)
     result = val[0].mne val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 200)
  def _reduce_39(val, _values, result)
     result = val[0] +   val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 201)
  def _reduce_40(val, _values, result)
     result = val[0] -   val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 202)
  def _reduce_41(val, _values, result)
     result = val[0] /   val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 203)
  def _reduce_42(val, _values, result)
     result = val[0] *   val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 204)
  def _reduce_43(val, _values, result)
     result = val[0] %   val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 205)
  def _reduce_44(val, _values, result)
     result = val[0] <<  val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 206)
  def _reduce_45(val, _values, result)
     result = val[0] >>  val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 207)
  def _reduce_46(val, _values, result)
     result = val[1].minus()          ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 208)
  def _reduce_47(val, _values, result)
     result = val[1].unfold()         ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 209)
  def _reduce_48(val, _values, result)
     result = val[0].ne  val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 210)
  def _reduce_49(val, _values, result)
     result = val[0] ==  val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 211)
  def _reduce_50(val, _values, result)
     result = val[0] >   val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 212)
  def _reduce_51(val, _values, result)
     result = val[0] >=  val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 213)
  def _reduce_52(val, _values, result)
     result = val[0] <   val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 214)
  def _reduce_53(val, _values, result)
     result = val[0] <=  val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 215)
  def _reduce_54(val, _values, result)
     result = val[1].not              ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 216)
  def _reduce_55(val, _values, result)
     result = val[0].and val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 217)
  def _reduce_56(val, _values, result)
     result = val[0].or  val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 218)
  def _reduce_57(val, _values, result)
     result = val[0].select(*val[2])  ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 219)
  def _reduce_58(val, _values, result)
     result = val[1].paren()          ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 229)
  def _reduce_59(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 230)
  def _reduce_60(val, _values, result)
     result = val[0].push(val[2]) 
    result
  end
.,.,

# reduce 61 omitted

# reduce 62 omitted

# reduce 63 omitted

# reduce 64 omitted

# reduce 65 omitted

# reduce 66 omitted

# reduce 67 omitted

# reduce 68 omitted

# reduce 69 omitted

# reduce 70 omitted

# reduce 71 omitted

# reduce 72 omitted

# reduce 73 omitted

# reduce 74 omitted

# reduce 75 omitted

# reduce 76 omitted

# reduce 77 omitted

# reduce 78 omitted

# reduce 79 omitted

module_eval(<<'.,.,', 'egrammar.ra', 254)
  def _reduce_80(val, _values, result)
     result = Factory.NUMBER(val[0][:value])          ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 255)
  def _reduce_81(val, _values, result)
     result = Factory.literal(val[0][:value])         ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 256)
  def _reduce_82(val, _values, result)
     result = Factory.literal(:default)               ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 257)
  def _reduce_83(val, _values, result)
     result = Factory.literal(:undef)                 ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 258)
  def _reduce_84(val, _values, result)
     result = Factory.QNAME_OR_NUMBER(val[0][:value]) ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 267)
  def _reduce_85(val, _values, result)
          result = Factory.CALL_NAMED(val[0], true, val[2])
      loc result, val[0], val[4]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 271)
  def _reduce_86(val, _values, result)
          result = Factory.CALL_NAMED(val[0], true, [])
      loc result, val[0], val[2]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 275)
  def _reduce_87(val, _values, result)
          result = Factory.CALL_NAMED(val[0], true, val[2])
      loc result, val[0], val[4]
      result.lambda = val[5]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 280)
  def _reduce_88(val, _values, result)
          result = Factory.CALL_NAMED(val[0], true, [])
      loc result, val[0], val[2]
      result.lambda = val[3]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 288)
  def _reduce_89(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 289)
  def _reduce_90(val, _values, result)
     result = val[0]; val[0].lambda = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 292)
  def _reduce_91(val, _values, result)
     result = Factory.CALL_METHOD(val[0], val[2]); loc result, val[1], val[3] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 293)
  def _reduce_92(val, _values, result)
     result = Factory.CALL_METHOD(val[0], []); loc result, val[1], val[3] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 294)
  def _reduce_93(val, _values, result)
     result = Factory.CALL_METHOD(val[0], []); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 298)
  def _reduce_94(val, _values, result)
            result = val[0].dot(Factory.fqn(val[2][:value]))
        loc result, val[1], val[2]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 306)
  def _reduce_95(val, _values, result)
          result = Factory.LAMBDA(val[0][:value], val[1][:value])
      loc result, val[0][:start], val[1][:end]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 311)
  def _reduce_96(val, _values, result)
     result = {:end => val[2], :value =>val[1] } 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 312)
  def _reduce_97(val, _values, result)
     result = {:end => val[1], :value => nil } 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 316)
  def _reduce_98(val, _values, result)
     result = {:start => val[0], :value => [] } 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 317)
  def _reduce_99(val, _values, result)
     result = {:start => val[0], :value => val[1] } 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 325)
  def _reduce_100(val, _values, result)
          result = val[1]
      loc(result, val[0], val[1])
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 332)
  def _reduce_101(val, _values, result)
            result = Factory.IF(val[0], Factory.block_or_expression(*val[2]), val[4])
        loc(result, val[0], (val[4] ? val[4] : val[3]))
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 336)
  def _reduce_102(val, _values, result)
            result = Factory.IF(val[0], nil, val[3])
        loc(result, val[0], (val[3] ? val[3] : val[2]))
      
    result
  end
.,.,

# reduce 103 omitted

module_eval(<<'.,.,', 'egrammar.ra', 344)
  def _reduce_104(val, _values, result)
            result = val[1]
        loc(result, val[0], val[1])
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 348)
  def _reduce_105(val, _values, result)
            result = Factory.block_or_expression(*val[2])
        loc result, val[0], val[3]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 352)
  def _reduce_106(val, _values, result)
            result = nil # don't think a nop is needed here either
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 359)
  def _reduce_107(val, _values, result)
          result = Factory.UNLESS(val[1], Factory.block_or_expression(*val[3]), val[5])
      loc result, val[0], val[4]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 363)
  def _reduce_108(val, _values, result)
          result = Factory.UNLESS(val[1], nil, val[4])
      loc result, val[0], val[4]
    
    result
  end
.,.,

# reduce 109 omitted

module_eval(<<'.,.,', 'egrammar.ra', 373)
  def _reduce_110(val, _values, result)
            result = Factory.block_or_expression(*val[2])
        loc result, val[0], val[3]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 377)
  def _reduce_111(val, _values, result)
            result = nil # don't think a nop is needed here either
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 384)
  def _reduce_112(val, _values, result)
          result = Factory.CASE(val[1], *val[3])
      loc result, val[0], val[4]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 390)
  def _reduce_113(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 391)
  def _reduce_114(val, _values, result)
     result = val[0].push val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 396)
  def _reduce_115(val, _values, result)
            result = Factory.WHEN(val[0], val[3]); loc result, val[1], val[4]
      
    result
  end
.,.,

# reduce 116 omitted

# reduce 117 omitted

# reduce 118 omitted

module_eval(<<'.,.,', 'egrammar.ra', 412)
  def _reduce_119(val, _values, result)
            result = val[1]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 417)
  def _reduce_120(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 418)
  def _reduce_121(val, _values, result)
     result = val[0].push val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 423)
  def _reduce_122(val, _values, result)
     result = Factory.MAP(val[0], val[2]) ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 433)
  def _reduce_123(val, _values, result)
          result = Factory.COLLECT(val[0], val[1], val[3])
      loc result, val[0], val[5]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 437)
  def _reduce_124(val, _values, result)
          result = Factory.COLLECT(val[0], val[1], [])
      loc result, val[0], val[1]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 442)
  def _reduce_125(val, _values, result)
     result = Factory.VIRTUAL_QUERY(val[1])   ; loc result, val[0], val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 443)
  def _reduce_126(val, _values, result)
     result = Factory.EXPORTED_QUERY(val[1])  ; loc result, val[0], val[2] 
    result
  end
.,.,

# reduce 127 omitted

# reduce 128 omitted

module_eval(<<'.,.,', 'egrammar.ra', 452)
  def _reduce_129(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 453)
  def _reduce_130(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 454)
  def _reduce_131(val, _values, result)
     result = val[0].push(val[2]) 
    result
  end
.,.,

# reduce 132 omitted

# reduce 133 omitted

module_eval(<<'.,.,', 'egrammar.ra', 470)
  def _reduce_134(val, _values, result)
            result = Factory.ATTRIBUTE_OP(val[0][:value], :'=>', val[2])
        loc result, val[0], val[2]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 474)
  def _reduce_135(val, _values, result)
            result = Factory.ATTRIBUTE_OP(val[0][:value], :'+>', val[2])
        loc result, val[0], val[2]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 478)
  def _reduce_136(val, _values, result)
          result = Factory.ATTRIBUTES_OP(val[2]) ; loc result, val[0], val[2]
   
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 487)
  def _reduce_137(val, _values, result)
          result = add_definition(Factory.DEFINITION(classname(val[1][:value]), val[2], val[4]))
      loc result, val[0], val[5]
      # New lexer does not keep track of this, this is done in validation
      if @lexer.respond_to?(:'indefine=')
        @lexer.indefine = false
      end
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 498)
  def _reduce_138(val, _values, result)
        result = Factory.APPLICATION(classname(val[1][:value]), val[2], val[4])
    loc result, val[0], val[5]
  
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 504)
  def _reduce_139(val, _values, result)
        result = Factory.CAPABILITY_MAPPING(val[1][:value],
                                        classname(val[0][:value]),
                                        classname(val[2][:value]), val[4])
    loc result, val[0], val[5]
    add_mapping(result)
  
    result
  end
.,.,

# reduce 140 omitted

# reduce 141 omitted

module_eval(<<'.,.,', 'egrammar.ra', 521)
  def _reduce_142(val, _values, result)
          # Remove this class' name from the namestack as all nested classes have been parsed
      namepop
      result = add_definition(Factory.HOSTCLASS(classname(val[1][:value]), val[2], token_text(val[3]), val[5]))
      loc result, val[0], val[6]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 531)
  def _reduce_143(val, _values, result)
     namestack(val[0][:value]) ; result = val[0] 
    result
  end
.,.,

# reduce 144 omitted

# reduce 145 omitted

# reduce 146 omitted

module_eval(<<'.,.,', 'egrammar.ra', 540)
  def _reduce_147(val, _values, result)
     result = val[1] 
    result
  end
.,.,

# reduce 148 omitted

# reduce 149 omitted

module_eval(<<'.,.,', 'egrammar.ra', 557)
  def _reduce_150(val, _values, result)
          result = add_definition(Factory.NODE(val[1], val[3], val[5]))
      loc result, val[0], val[6]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 561)
  def _reduce_151(val, _values, result)
          result = add_definition(Factory.NODE(val[1], val[3], nil))
      loc result, val[0], val[5]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 571)
  def _reduce_152(val, _values, result)
     result = [result] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 572)
  def _reduce_153(val, _values, result)
     result = val[0].push(val[2]) 
    result
  end
.,.,

# reduce 154 omitted

# reduce 155 omitted

module_eval(<<'.,.,', 'egrammar.ra', 579)
  def _reduce_156(val, _values, result)
     result = Factory.literal(:default); loc result, val[0] 
    result
  end
.,.,

# reduce 157 omitted

module_eval(<<'.,.,', 'egrammar.ra', 583)
  def _reduce_158(val, _values, result)
     result = Factory.literal(val[0][:value]); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 584)
  def _reduce_159(val, _values, result)
     result = Factory.concat(val[0], '.', val[2][:value]); loc result, val[0], val[2] 
    result
  end
.,.,

# reduce 160 omitted

# reduce 161 omitted

# reduce 162 omitted

module_eval(<<'.,.,', 'egrammar.ra', 593)
  def _reduce_163(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 599)
  def _reduce_164(val, _values, result)
          result = add_definition(Factory.FUNCTION(val[1][:value], val[2], val[4]))
      loc result, val[0], val[5]
    
    result
  end
.,.,

# reduce 165 omitted

# reduce 166 omitted

# reduce 167 omitted

module_eval(<<'.,.,', 'egrammar.ra', 610)
  def _reduce_168(val, _values, result)
     error val[0], "'class' is not a valid classname" 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 614)
  def _reduce_169(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 615)
  def _reduce_170(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 616)
  def _reduce_171(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 620)
  def _reduce_172(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 621)
  def _reduce_173(val, _values, result)
     result = val[0].push(val[2]) 
    result
  end
.,.,

# reduce 174 omitted

# reduce 175 omitted

# reduce 176 omitted

# reduce 177 omitted

module_eval(<<'.,.,', 'egrammar.ra', 633)
  def _reduce_178(val, _values, result)
     result = Factory.PARAM(val[0][:value], val[2]) ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 634)
  def _reduce_179(val, _values, result)
     result = Factory.PARAM(val[0][:value]); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 637)
  def _reduce_180(val, _values, result)
     result = val[1]; val[1].captures_rest() 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 640)
  def _reduce_181(val, _values, result)
     val[1].type_expr(val[0]) ; result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 643)
  def _reduce_182(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 644)
  def _reduce_183(val, _values, result)
     result = val[0][*val[2]] ; loc result, val[0], val[3] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 649)
  def _reduce_184(val, _values, result)
     result = Factory.fqn(val[0][:value]).var ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 654)
  def _reduce_185(val, _values, result)
     result = Factory.RESERVED(val[0][:value]) ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 655)
  def _reduce_186(val, _values, result)
     result = Factory.RESERVED(val[0][:value]) ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 656)
  def _reduce_187(val, _values, result)
     result = Factory.RESERVED(val[0][:value]) ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 662)
  def _reduce_188(val, _values, result)
     result = Factory.LIST(val[1]); loc result, val[0], val[3] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 663)
  def _reduce_189(val, _values, result)
     result = Factory.literal([]) ; loc result, val[0], val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 664)
  def _reduce_190(val, _values, result)
     result = Factory.LIST(val[1]); loc result, val[0], val[3] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 665)
  def _reduce_191(val, _values, result)
     result = Factory.literal([]) ; loc result, val[0], val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 668)
  def _reduce_192(val, _values, result)
     result = Factory.HASH(val[1]); loc result, val[0], val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 669)
  def _reduce_193(val, _values, result)
     result = Factory.HASH(val[1]); loc result, val[0], val[3] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 670)
  def _reduce_194(val, _values, result)
     result = Factory.literal({}) ; loc result, val[0], val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 673)
  def _reduce_195(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 674)
  def _reduce_196(val, _values, result)
     result = val[0].push val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 677)
  def _reduce_197(val, _values, result)
     result = Factory.KEY_ENTRY(val[0], val[2]); loc result, val[1] 
    result
  end
.,.,

# reduce 198 omitted

# reduce 199 omitted

# reduce 200 omitted

module_eval(<<'.,.,', 'egrammar.ra', 685)
  def _reduce_201(val, _values, result)
     result = Factory.literal(val[0][:value]) ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 686)
  def _reduce_202(val, _values, result)
     result = Factory.literal(val[0][:value]) ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 688)
  def _reduce_203(val, _values, result)
     result = Factory.string(val[0], *val[1]) ; loc result, val[0], val[1][-1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 689)
  def _reduce_204(val, _values, result)
     result = Factory.literal(val[0][:value]); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 690)
  def _reduce_205(val, _values, result)
     result = Factory.literal(val[0][:value]); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 691)
  def _reduce_206(val, _values, result)
     result = Factory.literal(val[0][:value]); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 692)
  def _reduce_207(val, _values, result)
     result = [val[0]] + val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 693)
  def _reduce_208(val, _values, result)
     result = Factory.TEXT(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 696)
  def _reduce_209(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 697)
  def _reduce_210(val, _values, result)
     result = [val[0]] + val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 700)
  def _reduce_211(val, _values, result)
     result = Factory.HEREDOC(val[0][:value], val[1]); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 703)
  def _reduce_212(val, _values, result)
     result = Factory.SUBLOCATE(val[0], val[1]); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 704)
  def _reduce_213(val, _values, result)
     result = Factory.SUBLOCATE(val[0], val[1]); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 707)
  def _reduce_214(val, _values, result)
     result = Factory.EPP(val[1], val[2]); loc result, val[0] 
    result
  end
.,.,

# reduce 215 omitted

# reduce 216 omitted

module_eval(<<'.,.,', 'egrammar.ra', 714)
  def _reduce_217(val, _values, result)
     result = nil 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 715)
  def _reduce_218(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 716)
  def _reduce_219(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 719)
  def _reduce_220(val, _values, result)
     result = Factory.RENDER_STRING(val[0][:value]); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 720)
  def _reduce_221(val, _values, result)
     result = Factory.RENDER_EXPR(val[1]); loc result, val[0], val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 721)
  def _reduce_222(val, _values, result)
     result = Factory.RENDER_EXPR(Factory.block_or_expression(*val[2])); loc result, val[0], val[4] 
    result
  end
.,.,

# reduce 223 omitted

# reduce 224 omitted

module_eval(<<'.,.,', 'egrammar.ra', 727)
  def _reduce_225(val, _values, result)
     result = Factory.QREF(val[0][:value])  ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 730)
  def _reduce_226(val, _values, result)
     result = Factory.literal(val[0][:value]); loc result, val[0] 
    result
  end
.,.,

# reduce 227 omitted

module_eval(<<'.,.,', 'egrammar.ra', 736)
  def _reduce_228(val, _values, result)
     result = nil 
    result
  end
.,.,

# reduce 229 omitted

# reduce 230 omitted

# reduce 231 omitted

# reduce 232 omitted

# reduce 233 omitted

# reduce 234 omitted

# reduce 235 omitted

# reduce 236 omitted

# reduce 237 omitted

# reduce 238 omitted

# reduce 239 omitted

# reduce 240 omitted

# reduce 241 omitted

# reduce 242 omitted

# reduce 243 omitted

# reduce 244 omitted

# reduce 245 omitted

# reduce 246 omitted

# reduce 247 omitted

# reduce 248 omitted

# reduce 249 omitted

# reduce 250 omitted

module_eval(<<'.,.,', 'egrammar.ra', 765)
  def _reduce_251(val, _values, result)
     result = nil
    result
  end
.,.,

def _reduce_none(val, _values, result)
  val[0]
end

      end   # class Parser
      end   # module Parser
    end   # module Pops
  end   # module Puppet
