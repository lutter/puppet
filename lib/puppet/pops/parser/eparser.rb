#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.9
# from Racc grammer file "".
#

require 'racc/parser.rb'

require 'puppet'
require 'puppet/pops'

module Puppet
  class ParseError < Puppet::Error; end
  class ImportError < Racc::ParseError; end
  class AlreadyImportedError < ImportError; end
end

module Puppet
  module Pops
    module Parser
      class Parser < Racc::Parser

module_eval(<<'...end egrammar.ra/module_eval...', 'egrammar.ra', 785)

# Make emacs happy
# Local Variables:
# mode: ruby
# End:
...end egrammar.ra/module_eval...
##### State transition tables begin ###

clist = [
'68,70,340,-237,53,63,300,64,-246,88,297,-251,254,147,76,399,341,299',
'395,-248,394,-132,300,109,18,112,421,107,108,79,45,300,48,255,55,12',
'-249,51,39,42,87,47,40,10,11,-237,148,54,17,111,-246,41,298,-251,15',
'16,80,81,82,95,94,-248,75,-132,90,91,68,70,46,129,149,89,38,71,254,73',
'74,72,-249,130,52,56,58,57,59,60,61,258,49,68,70,164,62,53,63,255,64',
'166,96,254,-165,-165,-165,-165,119,83,85,84,86,247,-236,119,258,18,115',
'274,138,139,275,45,255,48,169,55,12,119,51,39,42,77,47,40,10,11,287',
'121,54,17,431,118,41,430,121,15,16,119,118,120,395,79,394,75,-236,232',
'120,119,121,46,-166,-166,118,38,71,233,73,74,-167,-167,120,52,56,58',
'57,59,60,61,121,49,68,70,118,62,53,63,87,64,121,88,120,87,118,278,277',
'119,289,290,243,244,120,246,243,109,18,112,119,107,108,243,45,268,48',
'269,55,12,243,51,39,42,271,47,40,10,11,271,121,54,17,111,118,41,276',
'79,15,16,119,121,120,95,94,118,75,87,90,91,119,87,46,120,87,89,38,71',
'87,73,74,119,295,119,52,56,58,57,59,60,61,121,49,68,70,118,62,53,63',
'271,64,121,96,120,129,118,322,323,325,329,335,336,121,120,121,254,118',
'18,118,339,330,385,349,45,120,48,120,55,12,254,51,39,42,350,47,40,10',
'11,254,351,54,17,258,354,41,357,359,15,16,360,255,258,335,68,70,75,276',
'149,366,255,368,46,376,377,295,38,71,296,73,74,379,382,335,52,56,58',
'57,59,60,61,387,49,68,70,388,62,53,63,392,64,396,88,147,398,407,144',
'410,295,414,129,417,295,420,424,398,109,18,112,426,107,108,427,45,428',
'48,75,55,123,429,51,39,42,434,47,40,148,71,435,436,54,17,111,437,41',
'445,447,15,16,448,92,93,95,94,449,75,325,90,91,,,46,,,89,38,71,,73,74',
',,,52,56,58,57,59,60,61,,49,68,70,,62,53,63,,64,,96,,,,,,,,,,,,,,,18',
',,,,,45,,48,,55,123,,51,39,42,,47,40,,,,,54,17,,,41,,,15,16,,,,,68,70',
'75,,149,,,,46,,,,38,71,,73,74,,,,52,56,58,57,59,60,61,,49,68,70,,62',
'53,63,,64,,88,147,,,144,,,,,,,,,,109,18,112,,107,108,,45,,48,75,55,123',
',51,39,42,,47,40,148,71,,,54,17,111,,41,,,15,16,,92,93,95,94,,75,,90',
'91,,,46,,,89,38,71,,73,74,,,,52,56,58,57,59,60,61,,49,68,70,,62,53,63',
',64,,96,,,,,,,,,,,,,,,18,68,70,,,149,45,,48,,55,12,,51,39,42,,47,40',
'10,11,,,54,17,,,41,,,15,16,,,,,,,75,,147,,,144,46,,,,38,71,,73,74,,',
',52,56,58,57,59,60,61,75,49,68,70,,62,53,63,,64,148,71,,,,,,,,,,,,,',
',18,68,70,,,149,45,,48,,55,123,,51,39,42,,47,40,,,,,54,17,,,41,,,15',
'16,,,,,,,75,,147,,,144,46,,,,38,71,,73,74,,,,52,56,58,57,59,60,61,75',
'49,68,70,,62,53,63,,64,148,71,,,,,,,,,,,,,,,18,,,,,,45,,48,,55,123,',
'51,39,42,,47,40,,,,,54,17,,,41,,,15,16,,,,,,,75,,,,,,46,,,,38,71,,73',
'74,,,,52,56,58,57,59,60,61,,49,68,70,,62,53,63,,64,,88,,,,,,,,,,,,,',
'109,18,112,,107,108,,45,,48,,55,123,,51,39,42,,47,40,,,,,54,17,111,',
'41,,,15,16,,,,,,,75,,,,,,46,,,89,38,71,,73,74,,,,52,56,58,57,59,60,61',
',49,68,70,,62,53,63,153,64,,88,,,,,,,,,,,,,,109,18,112,,107,108,,45',
',48,,55,12,,51,39,42,,47,40,10,11,,,54,17,111,,41,,,15,16,,,,,,,75,',
',,,,46,,,89,38,71,,73,74,,,,52,56,58,57,59,60,61,,49,68,70,,62,53,63',
'155,64,,88,,,,,,,,,,,,,,109,18,112,,107,108,,45,,48,,55,12,,51,39,42',
',47,40,10,11,,,54,17,111,,41,,,15,16,,,,,,,75,,90,91,,,46,,,89,38,71',
',73,74,,,,52,56,58,57,59,60,61,,49,68,70,,62,53,63,,64,157,88,,,,,,',
',,,,,,,109,18,112,,107,108,,45,,48,,55,12,,51,39,42,,47,40,10,11,,,54',
'17,111,,41,,,15,16,,,,,,,75,,90,91,,,46,,,89,38,71,,73,74,,,,52,56,58',
'57,59,60,61,,49,68,70,,62,53,63,,64,,88,,,,,,,,,,,,,,109,18,112,,107',
'108,,45,,48,,55,12,,51,39,42,,47,40,10,11,,,54,17,111,,41,,,15,16,,',
',,,,75,,90,91,,,46,,,89,38,71,,73,74,,,,52,56,58,57,59,60,61,,49,68',
'70,,62,53,63,,168,313,200,312,201,,310,203,314,,307,,309,311,,,,18,',
',204,199,315,45,,48,308,55,123,,51,39,42,,47,40,,,202,316,54,17,,,41',
',,15,16,,,319,320,318,317,75,,,,321,205,46,,,,38,71,,73,74,,,,52,56',
'58,57,59,60,61,,49,68,70,,62,53,63,,64,313,200,312,201,,310,203,314',
',307,,309,311,,,,18,,,204,199,315,45,,48,308,55,12,,51,39,42,,47,40',
'10,11,202,316,54,17,,,41,,,15,16,,,319,320,318,317,75,,,,321,205,46',
',,,38,71,,73,74,,,,52,56,58,57,59,60,61,,49,68,70,,62,53,63,,64,313',
'200,312,201,,310,203,314,,307,,309,311,,,,18,,,204,199,315,45,,48,308',
'55,12,,51,39,42,,47,40,10,11,202,316,54,17,,,41,,,15,16,,,319,320,318',
'317,75,,,,321,205,46,,,,38,71,,73,74,,,,52,56,58,57,59,60,61,,49,68',
'70,,62,53,63,,64,313,200,312,201,,310,203,314,,307,,309,311,,,,18,,',
'204,199,315,45,,48,308,55,12,,51,39,42,,47,40,10,11,202,316,54,17,,',
'41,,,15,16,,,319,320,318,317,75,,,,321,205,46,,,,38,71,,73,74,,,,52',
'56,58,57,59,60,61,,49,68,70,,62,53,63,,64,313,200,312,201,,310,203,314',
',307,,309,311,,,,18,,,204,199,315,45,,48,308,55,12,,51,39,42,,47,40',
'10,11,202,316,54,17,,,41,,,15,16,,,319,320,318,317,75,,,,321,205,46',
',,,38,71,,73,74,,,,52,56,58,57,59,60,61,,49,68,70,,62,53,63,,64,313',
'200,312,201,,310,203,314,,307,,309,311,,,,18,,,204,199,315,45,,48,308',
'55,12,,51,39,42,,47,40,10,11,202,316,54,17,,,41,,,15,16,,,319,320,318',
'317,75,,,,321,205,46,,,,38,71,,73,74,,,,52,56,58,57,59,60,61,,49,68',
'70,,62,53,63,,64,,88,,,,,,,,,,,,,,109,18,112,,107,108,,45,,48,,55,12',
',51,39,42,,47,40,10,11,,,54,17,111,,41,,,15,16,,,,,,,75,,,,,,46,,,,38',
'71,,73,74,,,,52,56,58,57,59,60,61,,49,68,70,,62,53,63,,64,,88,,,,,,',
',,,,,,,109,18,112,,107,108,,45,,48,,55,12,,51,39,42,,47,40,10,11,,,54',
'17,111,,41,,,15,16,,,,,,,75,,,,,,46,,,,38,71,,73,74,,,,52,56,58,57,59',
'60,61,,49,68,70,,62,53,63,,64,,88,,,,,,,,,,,,,,109,18,112,,107,108,',
'45,,48,,55,12,,51,39,42,,47,40,10,11,,,54,17,111,,41,,,15,16,,,,,,,75',
',,,,,46,,,,38,71,,73,74,,,,52,56,58,57,59,60,61,,49,68,70,,62,53,63',
',64,,88,,,,,,,,,,,,,,109,18,112,,107,108,,45,,48,,55,12,,51,39,42,,47',
'40,10,11,,,54,17,111,,41,,,15,16,,,,,,,75,,,,,,46,,,,38,71,,73,74,,',
',52,56,58,57,59,60,61,,49,68,70,,62,53,63,,64,,,,,,,,,,,,,,,,,18,,,',
',,185,200,191,201,55,193,203,194,39,184,,187,182,,,,,54,17,204,199,183',
',,15,181,,,,,,,75,,,,,202,186,,,,38,71,,73,74,,,,195,196,198,197,59',
'60,61,,192,205,68,70,62,,53,63,,64,,,,,,,,,,,,,,,,,18,,,,,,45,,48,,55',
'123,,51,39,42,,47,40,,,,,54,17,,,41,,,15,16,,,,,,,75,,,,,,46,,,,38,71',
',73,74,,,,52,56,58,57,59,60,61,,49,68,70,,62,53,63,,64,,,,,,,,,,,,,',
',,,18,,,,,,45,,48,,55,123,,51,39,42,,47,40,,,,,54,17,,,41,,,15,16,,',
',,,,75,,,,,,46,,,,38,71,,73,74,,,,52,56,58,57,59,60,61,,49,68,70,,62',
'53,63,,64,,,,,,,,,,,,,,,,,18,,,,,,45,,48,,55,123,,51,39,42,,47,40,,',
',,54,17,,,41,,,15,16,,,,,,,75,,,,,,46,,,,38,71,,73,74,,,,52,56,58,57',
'59,60,61,,49,68,70,,62,53,63,,64,,,,,,,,,,,,,,,,,18,,,,,,45,,48,,55',
'123,,51,39,42,,47,40,,,,,54,17,,,41,,,15,16,,,,,,,75,,,,,,46,,,,38,71',
',73,74,,,,52,56,58,57,59,60,61,,49,68,70,,62,53,63,,64,,,,,,,,,,,,,',
',,,18,,,,,,45,,48,,55,123,,51,39,42,,47,40,,,,,54,17,,,41,,,15,16,,',
',,,,75,,,,,,46,,,,38,71,,73,74,,,,52,56,58,57,59,60,61,,49,68,70,,62',
'53,63,,64,,,,,,,,,,,,,,,,,18,,,,,,45,,48,,55,123,,51,39,42,,47,40,,',
',,54,17,,,41,,,15,16,,,,,,,75,,,,,,46,,,,38,71,,73,74,,,,52,56,58,57',
'59,60,61,,49,68,70,,62,53,63,,64,,,,,,,,,,,,,,,,,18,,,,,,45,,48,,55',
'123,,51,39,42,,47,40,,,,,54,17,,,41,,,15,16,,,,,,,75,,,,,,46,,,,38,71',
',73,74,,,,52,56,58,57,59,60,61,,49,68,70,,62,53,63,,64,,,,,,,,,,,,,',
',,,18,,,,,,45,,48,,55,123,,51,39,42,,47,40,,,,,54,17,,,41,,,15,16,,',
',,,,75,,,,,,46,,,,38,71,,73,74,,,,52,56,58,57,59,60,61,,49,68,70,,62',
'53,63,,64,,,,,,,,,,,,,,,,,18,,,,,,45,,48,,55,123,,51,39,42,,47,40,,',
',,54,17,,,41,,,15,16,,,,,,,75,,,,,,46,,,,38,71,,73,74,,,,52,56,58,57',
'59,60,61,,49,68,70,,62,53,63,,64,,,,,,,,,,,,,,,,,18,,,,,,45,,48,,55',
'123,,51,39,42,,47,40,,,,,54,17,,,41,,,15,16,,,,,,,75,,,,,,46,,,,38,71',
',73,74,,,,52,56,58,57,59,60,61,,49,68,70,,62,53,63,,64,,,,,,,,,,,,,',
',,,18,,,,,,45,,48,,55,123,,51,39,42,,47,40,,,,,54,17,,,41,,,15,16,,',
',,,,75,,,,,,46,,,,38,71,,73,74,,,,52,56,58,57,59,60,61,,49,68,70,,62',
'53,63,,64,,,,,,,,,,,,,,,,,18,,,,,,45,,48,,55,123,,51,39,42,,47,40,,',
',,54,17,,,41,,,15,16,,,,,,,75,,,,,,46,,,,38,71,,73,74,,,,52,56,58,57',
'59,60,61,,49,68,70,,62,53,63,,64,,,,,,,,,,,,,,,,,18,,,,,,45,,48,,55',
'123,,51,39,42,,47,40,,,,,54,17,,,41,,,15,16,,,,,,,75,,,,,,46,,,,38,71',
',73,74,,,,52,56,58,57,59,60,61,,49,68,70,,62,53,63,,64,,,,,,,,,,,,,',
',,,18,,,,,,45,,48,,55,123,,51,39,42,,47,40,,,,,54,17,,,41,,,15,16,,',
',,,,75,,,,,,46,,,,38,71,,73,74,,,,52,56,58,57,59,60,61,,49,68,70,,62',
'53,63,,64,,,,,,,,,,,,,,,,,18,,,,,,45,,48,,55,123,,51,39,42,,47,40,,',
',,54,17,,,41,,,15,16,,,,,,,75,,,,,,46,,,,38,71,,73,74,,,,52,56,58,57',
'59,60,61,,49,68,70,,62,53,63,,64,,,,,,,,,,,,,,,,,18,,,,,,45,,48,,55',
'123,,51,39,42,,47,40,,,,,54,17,,,41,,,15,16,,,,,,,75,,,,,,46,,,,38,71',
',73,74,,,,52,56,58,57,59,60,61,,49,68,70,,62,53,63,,64,,,,,,,,,,,,,',
',,,18,,,,,,45,,48,,55,123,,51,39,42,,47,40,,,,,54,17,,,41,,,15,16,,',
',,,,75,,,,,,46,,,,38,71,,73,74,,,,52,56,58,57,59,60,61,,49,68,70,,62',
'53,63,,64,,,,,,,,,,,,,,,,,18,,,,,,45,,48,,55,123,,51,39,42,,47,40,,',
',,54,17,,,41,,,15,16,,,,,,,75,,,,,,46,,,,38,71,,73,74,,,,52,56,58,57',
'59,60,61,,49,68,70,,62,53,63,,64,,,,,,,,,,,,,,,,,18,,,,,,45,,48,,55',
'123,,51,39,42,,47,40,,,,,54,17,,,41,,,15,16,,,,,,,75,,,,,,46,,,,38,71',
',73,74,,,,52,56,58,57,59,60,61,,49,68,70,,62,53,63,,64,,,,,,,,,,,,,',
',,,18,,,,,,45,,48,,55,123,,51,39,42,,47,40,,,,,54,17,,,41,,,15,16,,',
',,,,75,,,,,,46,,,229,38,71,,73,74,,,,52,56,58,57,59,60,61,,49,68,70',
',62,53,63,,64,,,,,,,,,,,,,,,,,18,231,,,,,45,,48,,55,12,,51,39,42,,47',
'40,10,11,,,54,17,,,41,,,15,16,,,,,,,75,,,,,,46,,,,38,71,,73,74,,,,52',
'56,58,57,59,60,61,,49,68,70,,62,53,63,,64,,,,,,,,,,,,,,,,,18,,,,,,45',
',48,,55,123,,51,39,42,,47,40,,,,,54,17,,,41,,,15,16,,,,,,,75,,,,,,46',
',,,38,71,,73,74,,,,52,56,58,57,59,60,61,,49,68,70,,62,53,63,,64,,,,',
',,,,,,,,,,,,18,,,,,,45,,48,,55,123,,51,39,42,,47,40,,,,,54,17,,,41,',
',15,16,,,,,,,75,,,,,,46,,,,38,71,,73,74,,,,52,56,58,57,59,60,61,,49',
'68,70,,62,53,63,,64,,,,,,,,,,,,,,,,,18,,,,,,45,,48,,55,123,,51,39,42',
',47,40,,,,,54,17,,,41,,,15,16,,,,,,,75,,,,,,46,,,,38,71,,73,74,,,,52',
'56,58,57,59,60,61,,49,68,70,,62,53,63,,64,,,,,,,,,,,,,,,,,18,260,,,',
',45,,48,,55,12,,51,39,42,,47,40,10,11,,,54,17,,,41,,,15,16,,,,,,,75',
',,,,,46,,,,38,71,,73,74,,,,52,56,58,57,59,60,61,,49,68,70,,62,53,63',
',64,,,,,,,,,,,,,,,,,18,,,,,,45,,48,,55,12,,51,39,42,,47,40,10,11,,,54',
'17,,,41,,,15,16,,,,,,,75,,,,,,46,,,,38,71,,73,74,,,,52,56,58,57,59,60',
'61,,49,68,70,,62,53,63,,64,157,,,,,,,,,,,,,,,,18,,,,,,45,,48,,55,12',
',51,39,42,,47,40,10,11,,,54,17,,,41,,,15,16,,,,,,,75,,,,,,46,,,,38,71',
',73,74,,,,52,56,58,57,59,60,61,,49,68,70,,62,53,63,,64,,,296,,,,,,,',
',,,,,,18,,,,,,45,,48,,55,123,,51,39,42,,47,40,,,,,54,17,,,41,,,15,16',
',,,,,,75,,,,,,46,,,,38,71,,73,74,,,,52,56,58,57,59,60,61,,49,68,70,',
'62,53,63,,64,,,,,,,,,,,,,,,,,18,,,,,,45,,48,,55,123,,51,39,42,,47,40',
',,,,54,17,,,41,,,15,16,,,,,,,75,,,,,,46,,,,38,71,,73,74,,,,52,56,58',
'57,59,60,61,,49,68,70,,62,53,63,,64,,,,,,,,,,,,,,,,,18,,,,,,45,,48,',
'55,123,,51,39,42,,47,40,,,,,54,17,,,41,,,15,16,,,,,,,75,,,,,,46,,,,38',
'71,,73,74,,,,52,56,58,57,59,60,61,,49,68,70,,62,53,63,,64,,,,,,,,,,',
',,,,,,18,,,,,,45,,48,,55,123,,51,39,42,,47,40,,,,,54,17,,,41,,,15,16',
',,,,,,75,,,,,,46,,,,38,71,,73,74,,,,52,56,58,57,59,60,61,,49,68,70,',
'62,53,63,,64,,,,,,,,,,,,,,,,,18,,,,,,45,,48,,55,123,,51,39,42,,47,40',
',,,,54,17,,,41,,,15,16,,,,,,,75,,,,,,46,,,,38,71,,73,74,,,,52,56,58',
'57,59,60,61,,49,68,70,,62,53,63,,64,333,,,,,,,,,,,,,,,,18,,,,,,45,,48',
',55,12,,51,39,42,,47,40,10,11,,,54,17,,,41,,,15,16,,,,,,,75,,,,,,46',
',,,38,71,,73,74,,,,52,56,58,57,59,60,61,,49,68,70,,62,53,63,,64,343',
',,,,,,,,,,,,,,,18,,,,,,45,,48,,55,12,,51,39,42,,47,40,10,11,,,54,17',
',,41,,,15,16,,,,,,,75,,,,,,46,,,,38,71,,73,74,,,,52,56,58,57,59,60,61',
',49,68,70,,62,53,63,,64,345,,,,,,,,,,,,,,,,18,,,,,,45,,48,,55,12,,51',
'39,42,,47,40,10,11,,,54,17,,,41,,,15,16,,,,,,,75,,,,,,46,,,,38,71,,73',
'74,,,,52,56,58,57,59,60,61,,49,68,70,,62,53,63,,64,,,,,,,,,,,,,,,,,18',
',,,,,45,,48,,55,123,,51,39,42,,47,40,,,,,54,17,,,41,,,15,16,,,,,,,75',
',,,,,46,,,,38,71,,73,74,,,,52,56,58,57,59,60,61,,49,68,70,,62,53,63',
',64,,,,,,,,,,,,,,,,,18,,,,,,45,,48,,55,12,,51,39,42,,47,40,10,11,,,54',
'17,,,41,,,15,16,,,,,,,75,,,,,,46,,,,38,71,,73,74,,,,52,56,58,57,59,60',
'61,,49,68,70,,62,53,63,,64,361,,,,,,,,,,,,,,,,18,,,,,,45,,48,,55,12',
',51,39,42,,47,40,10,11,,,54,17,,,41,,,15,16,,,,,,,75,,,,,,46,,,,38,71',
',73,74,,,,52,56,58,57,59,60,61,,49,68,70,,62,53,63,,64,,,,,,,,,,,,,',
',,,18,,,,,,45,,48,,55,12,,51,39,42,,47,40,10,11,,,54,17,,,41,,,15,16',
',,,,,,75,,,,,,46,,,,38,71,,73,74,,,,52,56,58,57,59,60,61,,49,68,70,',
'62,53,63,,64,,,,,,,,,,,,,,,,,18,,,,,,45,,48,,55,12,,51,39,42,,47,40',
'10,11,,,54,17,,,41,,,15,16,,,,,,,75,,,,,,46,,,,38,71,,73,74,,,,52,56',
'58,57,59,60,61,,49,68,70,,62,53,63,,64,,,,,,,,,,,,,,,,,18,,,,,,45,,48',
',55,123,,51,39,42,,47,40,,,,,54,17,,,41,,,15,16,,,,,,,75,,,,,,46,,,',
'38,71,,73,74,,,,52,56,58,57,59,60,61,,49,68,70,,62,53,63,,64,,,,,,,',
',,,,,,,,,18,,,,,,45,,48,,55,123,,51,39,42,,47,40,,,,,54,17,,,41,,,15',
'16,,,,,,,75,,,,,,46,,,,38,71,,73,74,,,,52,56,58,57,59,60,61,,49,68,70',
',62,53,63,,64,,,,,,,,,,,,,,,,,18,,,,,,45,,48,,55,123,,51,39,42,,47,40',
',,,,54,17,,,41,,,15,16,,,,,,,75,,,,,,46,,,,38,71,,73,74,,,,52,56,58',
'57,59,60,61,,49,68,70,,62,53,63,,64,,,,,,,,,,,,,,,,,18,,,,,,45,,48,',
'55,123,,51,39,42,,47,40,,,,,54,17,,,41,,,15,16,,,,,,,75,,,,,,46,,,,38',
'71,,73,74,,,,52,56,58,57,59,60,61,,49,68,70,,62,53,63,,64,,,,,,,,,,',
',,,,,,18,,,,,,45,,48,,55,123,,51,39,42,,47,40,,,,,54,17,,,41,,,15,16',
',,,,,,75,,,,,,46,,,,38,71,,73,74,,,,52,56,58,57,59,60,61,,49,68,70,',
'62,53,63,,64,,,,,,,,,,,,,,,,,18,,,,,,45,,48,,55,123,,51,39,42,,47,40',
',,,,54,17,,,41,,,15,16,,,,,,,75,,,,,,46,,,,38,71,,73,74,,,,52,56,58',
'57,59,60,61,,49,68,70,,62,53,63,,64,,,,,,,,,,,,,,,,,18,,,,,,45,,48,',
'55,123,,51,39,42,,47,40,,,,,54,17,,,41,,,15,16,,,,,,,75,,,,,,46,,,,38',
'71,,73,74,,,,52,56,58,57,59,60,61,,49,68,70,,62,53,63,,64,,,,,,,,,,',
',,,,,,18,,,,,,45,,48,,55,123,,51,39,42,,47,40,,,,,54,17,,,41,,,15,16',
',,,,,,75,,,,,,46,,,,38,71,,73,74,,,,52,56,58,57,59,60,61,,49,68,70,',
'62,53,63,,64,,,,,,,,,,,,,,,,,18,,,,,,45,,48,,55,12,,51,39,42,,47,40',
'10,11,,,54,17,,,41,,,15,16,,,,,,,75,,,,,,46,,,,38,71,,73,74,,,,52,56',
'58,57,59,60,61,,49,68,70,,62,53,63,,64,400,,,,,,,,,,,,,,,,18,,,,,,45',
',48,,55,123,,51,39,42,,47,40,,,,,54,17,,,41,,,15,16,,,,,,,75,,,,,,46',
',,,38,71,,73,74,,,,52,56,58,57,59,60,61,,49,68,70,,62,53,63,,64,,,,',
',,,,,,,,,,,,18,,,,,,45,,48,,55,12,,51,39,42,,47,40,10,11,,,54,17,,,41',
',,15,16,,,,,,,75,,,,,,46,,,,38,71,,73,74,,,,52,56,58,57,59,60,61,,49',
'68,70,,62,53,63,,64,,,,,,,,,,,,,,,,,18,,,,,,45,,48,,55,12,,51,39,42',
',47,40,10,11,,,54,17,,,41,,,15,16,,,,,,,75,,,,,,46,,,,38,71,,73,74,',
',,52,56,58,57,59,60,61,,49,68,70,,62,53,63,,64,,,,,,,,,,,,,,,,,18,,',
',,,45,,48,,55,12,,51,39,42,,47,40,10,11,,,54,17,,,41,,,15,16,,,,,,,75',
',,,,,46,,,,38,71,,73,74,,,,52,56,58,57,59,60,61,,49,68,70,,62,53,63',
',64,,,,,,,,,,,,,,,,,18,,,,,,45,,48,,55,123,,51,39,42,,47,40,,,,,54,17',
',,41,,,15,16,,,,,,,75,,,,,,46,,,,38,71,,73,74,,,,52,56,58,57,59,60,61',
',49,68,70,,62,53,63,,64,,,,,,,,,,,,,,,,,18,,,,,,45,,48,,55,12,,51,39',
'42,,47,40,10,11,,,54,17,,,41,,,15,16,,,,,,,75,,,,,,46,,,,38,71,,73,74',
',,,52,56,58,57,59,60,61,,49,68,70,,62,53,63,,64,,,,,,,,,,,,,,,,,18,',
',,,,45,,48,,55,123,,51,39,42,,47,40,,,,,54,17,,,41,,,15,16,,,,,,,75',
',,,,,46,,,,38,71,,73,74,,,,52,56,58,57,59,60,61,,49,68,70,,62,53,63',
',64,433,,,,,,,,,,,,,,,,18,,,,,,45,,48,,55,12,,51,39,42,,47,40,10,11',
',,54,17,,,41,,,15,16,,,,,,,75,,,,,,46,,,,38,71,,73,74,,,,52,56,58,57',
'59,60,61,,49,68,70,,62,53,63,,64,439,,,,,,,,,,,,,,,,18,,,,,,45,,48,',
'55,12,,51,39,42,,47,40,10,11,,,54,17,,,41,,,15,16,,,,,,,75,,,,,,46,',
',,38,71,,73,74,,,,52,56,58,57,59,60,61,,49,68,70,,62,53,63,,64,441,',
',,,,,,,,,,,,,,18,,,,,,45,,48,,55,12,,51,39,42,,47,40,10,11,,,54,17,',
',41,,,15,16,,,,,,,75,,,,,,46,,,,38,71,,73,74,,,,52,56,58,57,59,60,61',
',49,68,70,,62,53,63,,64,,,,,,,,,,,,,,,,,18,,,,,,45,,48,,55,12,,51,39',
'42,,47,40,10,11,,,54,17,,,41,,,15,16,,,,,,,75,,,,,,46,,,,38,71,,73,74',
',,,52,56,58,57,59,60,61,,49,68,70,,62,53,63,,64,,,,,,,,,,,,,,,,,18,',
',,,,45,,48,,55,123,,51,39,42,,47,40,,,,,54,17,,,41,,,15,16,,,,,,,75',
',,,,,46,,,,38,71,,73,74,88,,,52,56,58,57,59,60,61,,49,104,99,109,62',
'112,,107,108,,100,102,101,103,,,,,,,,,,,,,,,,111,,,,106,105,,,92,93',
'95,94,97,98,,90,91,88,,261,,,89,,,,,,,104,99,109,,112,,107,108,,100',
'102,101,103,,,,,,,,96,,,,,,,,111,,,,106,105,,,92,93,95,94,97,98,,90',
'91,88,,262,,,89,,,,,,,104,99,109,,112,,107,108,,100,102,101,103,,,,',
',,,96,,,,,,,,111,,,,106,105,,,92,93,95,94,97,98,,90,91,88,,263,,,89',
',,,,,,104,99,109,,112,,107,108,,100,102,101,103,,,,,,,,96,,,,,,,,111',
',,,106,105,,88,92,93,95,94,97,98,,90,91,,,104,99,109,89,112,,107,108',
',100,102,101,103,,,,,,,,,,,,,,,,111,,96,,106,105,,,92,93,95,94,97,98',
',90,91,,,,,,89,88,,,,,,,,,,289,290,104,99,109,293,112,,107,108,,100',
'102,101,103,,96,,,,,,,,,,,,,,111,,,,106,105,,88,92,93,95,94,97,98,,90',
'91,,,104,99,109,89,112,88,107,108,,100,102,101,103,,,,,,,109,,112,,107',
'108,,,,111,,96,,106,105,,,92,93,95,94,97,98,,90,91,111,,,,,89,,88,92',
'93,95,94,97,98,,90,91,,,,,109,89,112,88,107,108,,,,,,96,,,,,99,109,',
'112,,107,108,,100,,111,,96,,,,,,92,93,95,94,97,98,,90,91,111,,,,,89',
',88,92,93,95,94,97,98,,90,91,,,,99,109,89,112,88,107,108,,100,,,,96',
',,,,99,109,,112,,107,108,,100,,111,,96,,,,,,92,93,95,94,97,98,,90,91',
'111,,,,,89,,88,92,93,95,94,97,98,,90,91,,,,99,109,89,112,,107,108,,100',
',,,96,,,,,,,,,,,,,,,111,,96,,,88,,,92,93,95,94,97,98,,90,91,104,99,109',
',112,89,107,108,,100,102,101,103,,,,,,,,,,,,,,,,111,,,,96,88,,,92,93',
'95,94,97,98,,90,91,104,99,109,,112,89,107,108,,100,102,101,103,,,,,',
',,,,,,,,,,111,,,,96,105,,,92,93,95,94,97,98,88,90,91,,,301,,,89,,,,104',
'99,109,,112,,107,108,,100,102,101,103,,,,,,,,,,,96,,,,,111,,,,106,105',
',88,92,93,95,94,97,98,,90,91,,,104,99,109,89,112,,107,108,,100,102,101',
'103,,,,,,,,,,,,,,,,111,,96,,106,105,,,92,93,95,94,97,98,88,90,91,,,',
',,89,,,,104,99,109,326,112,,107,108,,100,102,101,103,,,,,,,,,,,96,,',
',,111,,,,106,105,,88,92,93,95,94,97,98,,90,91,,,104,99,109,89,112,,107',
'108,,100,102,101,103,,,,,,,,,,,,,,,,111,,96,,106,105,,88,92,93,95,94',
'97,98,,90,91,,,104,99,109,89,112,,107,108,,100,102,101,103,,,,,,,,,',
',,,,,,111,,96,,106,105,,88,92,93,95,94,97,98,,90,91,,,104,99,109,89',
'112,,107,108,,100,102,101,103,,,,,,,,,,,,,,,,111,,96,,106,105,,88,92',
'93,95,94,97,98,,90,91,,,104,99,109,89,112,,107,108,,100,102,101,103',
',,,,,,,,,,,,,,,111,,96,,106,105,,88,92,93,95,94,97,98,,90,91,,,104,99',
'109,89,112,,107,108,,100,102,101,103,,,,,,,,,,,,,,,,111,,96,,106,105',
',88,92,93,95,94,97,98,,90,91,,,104,99,109,89,112,,107,108,,100,102,101',
'103,,,,,,,,,,,,,,,,111,,96,,106,105,,,92,93,95,94,97,98,,90,91,,,,,',
'89,,,,,,,,,,,,,,,,,,,,,,,,,,,96' ]
        racc_action_table = arr = ::Array.new(8869, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

clist = [
'0,0,259,182,0,0,346,0,183,211,190,196,256,269,1,346,259,207,343,197',
'343,184,207,211,0,211,391,211,211,5,0,391,0,256,0,0,198,0,0,0,8,0,0',
'0,0,182,269,0,0,211,183,0,190,196,0,0,7,7,7,211,211,197,0,184,211,211',
'164,164,0,43,164,211,0,0,129,0,0,0,198,44,0,0,0,0,0,0,0,129,0,4,4,71',
'0,4,4,129,4,72,211,166,184,184,42,42,193,7,7,7,7,129,193,12,166,4,12',
'156,50,50,156,4,166,4,76,4,4,48,4,4,4,4,4,4,4,4,166,193,4,4,406,193',
'4,406,12,4,4,49,12,193,392,78,392,4,193,109,12,52,48,4,53,53,48,4,4',
'110,4,4,54,54,48,4,4,4,4,4,4,4,49,4,10,10,49,4,10,10,113,10,52,212,49',
'114,52,161,161,123,366,366,116,126,52,128,135,212,10,212,137,212,212',
'136,10,140,10,142,10,10,150,10,10,10,152,10,10,10,10,154,123,10,10,212',
'123,10,159,170,10,10,191,137,123,212,212,137,10,175,212,212,192,176',
'10,137,177,212,10,10,178,10,10,195,180,329,10,10,10,10,10,10,10,191',
'10,11,11,191,10,11,11,230,11,192,212,191,231,192,235,237,238,241,248',
'254,195,192,329,255,195,11,329,257,243,329,264,11,195,11,329,11,11,243',
'11,11,11,265,11,11,11,11,335,266,11,11,243,267,11,270,272,11,11,273',
'243,335,286,51,51,11,291,51,292,335,294,11,302,304,306,11,11,308,11',
'11,324,327,331,11,11,11,11,11,11,11,332,11,15,15,334,11,15,15,342,15',
'344,216,51,345,352,51,365,367,375,377,378,381,386,395,396,216,15,216',
'398,216,216,399,15,402,15,51,15,15,405,15,15,15,409,15,15,51,51,412',
'413,15,15,216,419,15,432,438,15,15,440,216,216,216,216,442,15,446,216',
'216,,,15,,,216,15,15,,15,15,,,,15,15,15,15,15,15,15,,15,16,16,,15,16',
'16,,16,,216,,,,,,,,,,,,,,,16,,,,,,16,,16,,16,16,,16,16,16,,16,16,,,',
',16,16,,,16,,,16,16,,,,,194,194,16,,194,,,,16,,,,16,16,,16,16,,,,16',
'16,16,16,16,16,16,,16,17,17,,16,17,17,,17,,217,194,,,194,,,,,,,,,,217',
'17,217,,217,217,,17,,17,194,17,17,,17,17,17,,17,17,194,194,,,17,17,217',
',17,,,17,17,,217,217,217,217,,17,,217,217,,,17,,,217,17,17,,17,17,,',
',17,17,17,17,17,17,17,,17,18,18,,17,18,18,,18,,217,,,,,,,,,,,,,,,18',
'268,268,,,268,18,,18,,18,18,,18,18,18,,18,18,18,18,,,18,18,,,18,,,18',
'18,,,,,,,18,,268,,,268,18,,,,18,18,,18,18,,,,18,18,18,18,18,18,18,268',
'18,45,45,,18,45,45,,45,268,268,,,,,,,,,,,,,,,45,354,354,,,354,45,,45',
',45,45,,45,45,45,,45,45,,,,,45,45,,,45,,,45,45,,,,,,,45,,354,,,354,45',
',,,45,45,,45,45,,,,45,45,45,45,45,45,45,354,45,46,46,,45,46,46,,46,354',
'354,,,,,,,,,,,,,,,46,,,,,,46,,46,,46,46,,46,46,46,,46,46,,,,,46,46,',
',46,,,46,46,,,,,,,46,,,,,,46,,,,46,46,,46,46,,,,46,46,46,46,46,46,46',
',46,47,47,,46,47,47,,47,,209,,,,,,,,,,,,,,209,47,209,,209,209,,47,,47',
',47,47,,47,47,47,,47,47,,,,,47,47,209,,47,,,47,47,,,,,,,47,,,,,,47,',
',209,47,47,,47,47,,,,47,47,47,47,47,47,47,,47,62,62,,47,62,62,62,62',
',210,,,,,,,,,,,,,,210,62,210,,210,210,,62,,62,,62,62,,62,62,62,,62,62',
'62,62,,,62,62,210,,62,,,62,62,,,,,,,62,,,,,,62,,,210,62,62,,62,62,,',
',62,62,62,62,62,62,62,,62,63,63,,62,63,63,63,63,,213,,,,,,,,,,,,,,213',
'63,213,,213,213,,63,,63,,63,63,,63,63,63,,63,63,63,63,,,63,63,213,,63',
',,63,63,,,,,,,63,,213,213,,,63,,,213,63,63,,63,63,,,,63,63,63,63,63',
'63,63,,63,64,64,,63,64,64,,64,64,214,,,,,,,,,,,,,,214,64,214,,214,214',
',64,,64,,64,64,,64,64,64,,64,64,64,64,,,64,64,214,,64,,,64,64,,,,,,',
'64,,214,214,,,64,,,214,64,64,,64,64,,,,64,64,64,64,64,64,64,,64,69,69',
',64,69,69,,69,,215,,,,,,,,,,,,,,215,69,215,,215,215,,69,,69,,69,69,',
'69,69,69,,69,69,69,69,,,69,69,215,,69,,,69,69,,,,,,,69,,215,215,,,69',
',,215,69,69,,69,69,,,,69,69,69,69,69,69,69,,69,74,74,,69,74,74,,74,233',
'233,233,233,,233,233,233,,233,,233,233,,,,74,,,233,233,233,74,,74,233',
'74,74,,74,74,74,,74,74,,,233,233,74,74,,,74,,,74,74,,,233,233,233,233',
'74,,,,233,233,74,,,,74,74,,74,74,,,,74,74,74,74,74,74,74,,74,77,77,',
'74,77,77,,77,293,293,293,293,,293,293,293,,293,,293,293,,,,77,,,293',
'293,293,77,,77,293,77,77,,77,77,77,,77,77,77,77,293,293,77,77,,,77,',
',77,77,,,293,293,293,293,77,,,,293,293,77,,,,77,77,,77,77,,,,77,77,77',
'77,77,77,77,,77,79,79,,77,79,79,,79,295,295,295,295,,295,295,295,,295',
',295,295,,,,79,,,295,295,295,79,,79,295,79,79,,79,79,79,,79,79,79,79',
'295,295,79,79,,,79,,,79,79,,,295,295,295,295,79,,,,295,295,79,,,,79',
'79,,79,79,,,,79,79,79,79,79,79,79,,79,80,80,,79,80,80,,80,326,326,326',
'326,,326,326,326,,326,,326,326,,,,80,,,326,326,326,80,,80,326,80,80',
',80,80,80,,80,80,80,80,326,326,80,80,,,80,,,80,80,,,326,326,326,326',
'80,,,,326,326,80,,,,80,80,,80,80,,,,80,80,80,80,80,80,80,,80,81,81,',
'80,81,81,,81,351,351,351,351,,351,351,351,,351,,351,351,,,,81,,,351',
'351,351,81,,81,351,81,81,,81,81,81,,81,81,81,81,351,351,81,81,,,81,',
',81,81,,,351,351,351,351,81,,,,351,351,81,,,,81,81,,81,81,,,,81,81,81',
'81,81,81,81,,81,82,82,,81,82,82,,82,430,430,430,430,,430,430,430,,430',
',430,430,,,,82,,,430,430,430,82,,82,430,82,82,,82,82,82,,82,82,82,82',
'430,430,82,82,,,82,,,82,82,,,430,430,430,430,82,,,,430,430,82,,,,82',
'82,,82,82,,,,82,82,82,82,82,82,82,,82,83,83,,82,83,83,,83,,122,,,,,',
',,,,,,,,122,83,122,,122,122,,83,,83,,83,83,,83,83,83,,83,83,83,83,,',
'83,83,122,,83,,,83,83,,,,,,,83,,,,,,83,,,,83,83,,83,83,,,,83,83,83,83',
'83,83,83,,83,84,84,,83,84,84,,84,,124,,,,,,,,,,,,,,124,84,124,,124,124',
',84,,84,,84,84,,84,84,84,,84,84,84,84,,,84,84,124,,84,,,84,84,,,,,,',
'84,,,,,,84,,,,84,84,,84,84,,,,84,84,84,84,84,84,84,,84,85,85,,84,85',
'85,,85,,125,,,,,,,,,,,,,,125,85,125,,125,125,,85,,85,,85,85,,85,85,85',
',85,85,85,85,,,85,85,125,,85,,,85,85,,,,,,,85,,,,,,85,,,,85,85,,85,85',
',,,85,85,85,85,85,85,85,,85,86,86,,85,86,86,,86,,208,,,,,,,,,,,,,,208',
'86,208,,208,208,,86,,86,,86,86,,86,86,86,,86,86,86,86,,,86,86,208,,86',
',,86,86,,,,,,,86,,,,,,86,,,,86,86,,86,86,,,,86,86,86,86,86,86,86,,86',
'87,87,,86,87,87,,87,,,,,,,,,,,,,,,,,87,,,,,,87,87,87,87,87,87,87,87',
'87,87,,87,87,,,,,87,87,87,87,87,,,87,87,,,,,,,87,,,,,87,87,,,,87,87',
',87,87,,,,87,87,87,87,87,87,87,,87,87,88,88,87,,88,88,,88,,,,,,,,,,',
',,,,,,88,,,,,,88,,88,,88,88,,88,88,88,,88,88,,,,,88,88,,,88,,,88,88',
',,,,,,88,,,,,,88,,,,88,88,,88,88,,,,88,88,88,88,88,88,88,,88,89,89,',
'88,89,89,,89,,,,,,,,,,,,,,,,,89,,,,,,89,,89,,89,89,,89,89,89,,89,89',
',,,,89,89,,,89,,,89,89,,,,,,,89,,,,,,89,,,,89,89,,89,89,,,,89,89,89',
'89,89,89,89,,89,90,90,,89,90,90,,90,,,,,,,,,,,,,,,,,90,,,,,,90,,90,',
'90,90,,90,90,90,,90,90,,,,,90,90,,,90,,,90,90,,,,,,,90,,,,,,90,,,,90',
'90,,90,90,,,,90,90,90,90,90,90,90,,90,91,91,,90,91,91,,91,,,,,,,,,,',
',,,,,,91,,,,,,91,,91,,91,91,,91,91,91,,91,91,,,,,91,91,,,91,,,91,91',
',,,,,,91,,,,,,91,,,,91,91,,91,91,,,,91,91,91,91,91,91,91,,91,92,92,',
'91,92,92,,92,,,,,,,,,,,,,,,,,92,,,,,,92,,92,,92,92,,92,92,92,,92,92',
',,,,92,92,,,92,,,92,92,,,,,,,92,,,,,,92,,,,92,92,,92,92,,,,92,92,92',
'92,92,92,92,,92,93,93,,92,93,93,,93,,,,,,,,,,,,,,,,,93,,,,,,93,,93,',
'93,93,,93,93,93,,93,93,,,,,93,93,,,93,,,93,93,,,,,,,93,,,,,,93,,,,93',
'93,,93,93,,,,93,93,93,93,93,93,93,,93,94,94,,93,94,94,,94,,,,,,,,,,',
',,,,,,94,,,,,,94,,94,,94,94,,94,94,94,,94,94,,,,,94,94,,,94,,,94,94',
',,,,,,94,,,,,,94,,,,94,94,,94,94,,,,94,94,94,94,94,94,94,,94,95,95,',
'94,95,95,,95,,,,,,,,,,,,,,,,,95,,,,,,95,,95,,95,95,,95,95,95,,95,95',
',,,,95,95,,,95,,,95,95,,,,,,,95,,,,,,95,,,,95,95,,95,95,,,,95,95,95',
'95,95,95,95,,95,96,96,,95,96,96,,96,,,,,,,,,,,,,,,,,96,,,,,,96,,96,',
'96,96,,96,96,96,,96,96,,,,,96,96,,,96,,,96,96,,,,,,,96,,,,,,96,,,,96',
'96,,96,96,,,,96,96,96,96,96,96,96,,96,97,97,,96,97,97,,97,,,,,,,,,,',
',,,,,,97,,,,,,97,,97,,97,97,,97,97,97,,97,97,,,,,97,97,,,97,,,97,97',
',,,,,,97,,,,,,97,,,,97,97,,97,97,,,,97,97,97,97,97,97,97,,97,98,98,',
'97,98,98,,98,,,,,,,,,,,,,,,,,98,,,,,,98,,98,,98,98,,98,98,98,,98,98',
',,,,98,98,,,98,,,98,98,,,,,,,98,,,,,,98,,,,98,98,,98,98,,,,98,98,98',
'98,98,98,98,,98,99,99,,98,99,99,,99,,,,,,,,,,,,,,,,,99,,,,,,99,,99,',
'99,99,,99,99,99,,99,99,,,,,99,99,,,99,,,99,99,,,,,,,99,,,,,,99,,,,99',
'99,,99,99,,,,99,99,99,99,99,99,99,,99,100,100,,99,100,100,,100,,,,,',
',,,,,,,,,,,100,,,,,,100,,100,,100,100,,100,100,100,,100,100,,,,,100',
'100,,,100,,,100,100,,,,,,,100,,,,,,100,,,,100,100,,100,100,,,,100,100',
'100,100,100,100,100,,100,101,101,,100,101,101,,101,,,,,,,,,,,,,,,,,101',
',,,,,101,,101,,101,101,,101,101,101,,101,101,,,,,101,101,,,101,,,101',
'101,,,,,,,101,,,,,,101,,,,101,101,,101,101,,,,101,101,101,101,101,101',
'101,,101,102,102,,101,102,102,,102,,,,,,,,,,,,,,,,,102,,,,,,102,,102',
',102,102,,102,102,102,,102,102,,,,,102,102,,,102,,,102,102,,,,,,,102',
',,,,,102,,,,102,102,,102,102,,,,102,102,102,102,102,102,102,,102,103',
'103,,102,103,103,,103,,,,,,,,,,,,,,,,,103,,,,,,103,,103,,103,103,,103',
'103,103,,103,103,,,,,103,103,,,103,,,103,103,,,,,,,103,,,,,,103,,,,103',
'103,,103,103,,,,103,103,103,103,103,103,103,,103,104,104,,103,104,104',
',104,,,,,,,,,,,,,,,,,104,,,,,,104,,104,,104,104,,104,104,104,,104,104',
',,,,104,104,,,104,,,104,104,,,,,,,104,,,,,,104,,,,104,104,,104,104,',
',,104,104,104,104,104,104,104,,104,105,105,,104,105,105,,105,,,,,,,',
',,,,,,,,,105,,,,,,105,,105,,105,105,,105,105,105,,105,105,,,,,105,105',
',,105,,,105,105,,,,,,,105,,,,,,105,,,,105,105,,105,105,,,,105,105,105',
'105,105,105,105,,105,106,106,,105,106,106,,106,,,,,,,,,,,,,,,,,106,',
',,,,106,,106,,106,106,,106,106,106,,106,106,,,,,106,106,,,106,,,106',
'106,,,,,,,106,,,,,,106,,,,106,106,,106,106,,,,106,106,106,106,106,106',
'106,,106,107,107,,106,107,107,,107,,,,,,,,,,,,,,,,,107,,,,,,107,,107',
',107,107,,107,107,107,,107,107,,,,,107,107,,,107,,,107,107,,,,,,,107',
',,,,,107,,,107,107,107,,107,107,,,,107,107,107,107,107,107,107,,107',
'108,108,,107,108,108,,108,,,,,,,,,,,,,,,,,108,108,,,,,108,,108,,108',
'108,,108,108,108,,108,108,108,108,,,108,108,,,108,,,108,108,,,,,,,108',
',,,,,108,,,,108,108,,108,108,,,,108,108,108,108,108,108,108,,108,111',
'111,,108,111,111,,111,,,,,,,,,,,,,,,,,111,,,,,,111,,111,,111,111,,111',
'111,111,,111,111,,,,,111,111,,,111,,,111,111,,,,,,,111,,,,,,111,,,,111',
'111,,111,111,,,,111,111,111,111,111,111,111,,111,112,112,,111,112,112',
',112,,,,,,,,,,,,,,,,,112,,,,,,112,,112,,112,112,,112,112,112,,112,112',
',,,,112,112,,,112,,,112,112,,,,,,,112,,,,,,112,,,,112,112,,112,112,',
',,112,112,112,112,112,112,112,,112,115,115,,112,115,115,,115,,,,,,,',
',,,,,,,,,115,,,,,,115,,115,,115,115,,115,115,115,,115,115,,,,,115,115',
',,115,,,115,115,,,,,,,115,,,,,,115,,,,115,115,,115,115,,,,115,115,115',
'115,115,115,115,,115,130,130,,115,130,130,,130,,,,,,,,,,,,,,,,,130,130',
',,,,130,,130,,130,130,,130,130,130,,130,130,130,130,,,130,130,,,130',
',,130,130,,,,,,,130,,,,,,130,,,,130,130,,130,130,,,,130,130,130,130',
'130,130,130,,130,165,165,,130,165,165,,165,,,,,,,,,,,,,,,,,165,,,,,',
'165,,165,,165,165,,165,165,165,,165,165,165,165,,,165,165,,,165,,,165',
'165,,,,,,,165,,,,,,165,,,,165,165,,165,165,,,,165,165,165,165,165,165',
'165,,165,168,168,,165,168,168,,168,168,,,,,,,,,,,,,,,,168,,,,,,168,',
'168,,168,168,,168,168,168,,168,168,168,168,,,168,168,,,168,,,168,168',
',,,,,,168,,,,,,168,,,,168,168,,168,168,,,,168,168,168,168,168,168,168',
',168,181,181,,168,181,181,,181,,,181,,,,,,,,,,,,,,181,,,,,,181,,181',
',181,181,,181,181,181,,181,181,,,,,181,181,,,181,,,181,181,,,,,,,181',
',,,,,181,,,,181,181,,181,181,,,,181,181,181,181,181,181,181,,181,185',
'185,,181,185,185,,185,,,,,,,,,,,,,,,,,185,,,,,,185,,185,,185,185,,185',
'185,185,,185,185,,,,,185,185,,,185,,,185,185,,,,,,,185,,,,,,185,,,,185',
'185,,185,185,,,,185,185,185,185,185,185,185,,185,186,186,,185,186,186',
',186,,,,,,,,,,,,,,,,,186,,,,,,186,,186,,186,186,,186,186,186,,186,186',
',,,,186,186,,,186,,,186,186,,,,,,,186,,,,,,186,,,,186,186,,186,186,',
',,186,186,186,186,186,186,186,,186,187,187,,186,187,187,,187,,,,,,,',
',,,,,,,,,187,,,,,,187,,187,,187,187,,187,187,187,,187,187,,,,,187,187',
',,187,,,187,187,,,,,,,187,,,,,,187,,,,187,187,,187,187,,,,187,187,187',
'187,187,187,187,,187,229,229,,187,229,229,,229,,,,,,,,,,,,,,,,,229,',
',,,,229,,229,,229,229,,229,229,229,,229,229,,,,,229,229,,,229,,,229',
'229,,,,,,,229,,,,,,229,,,,229,229,,229,229,,,,229,229,229,229,229,229',
'229,,229,246,246,,229,246,246,,246,246,,,,,,,,,,,,,,,,246,,,,,,246,',
'246,,246,246,,246,246,246,,246,246,246,246,,,246,246,,,246,,,246,246',
',,,,,,246,,,,,,246,,,,246,246,,246,246,,,,246,246,246,246,246,246,246',
',246,261,261,,246,261,261,,261,261,,,,,,,,,,,,,,,,261,,,,,,261,,261',
',261,261,,261,261,261,,261,261,261,261,,,261,261,,,261,,,261,261,,,',
',,,261,,,,,,261,,,,261,261,,261,261,,,,261,261,261,261,261,261,261,',
'261,262,262,,261,262,262,,262,262,,,,,,,,,,,,,,,,262,,,,,,262,,262,',
'262,262,,262,262,262,,262,262,262,262,,,262,262,,,262,,,262,262,,,,',
',,262,,,,,,262,,,,262,262,,262,262,,,,262,262,262,262,262,262,262,,262',
'263,263,,262,263,263,,263,,,,,,,,,,,,,,,,,263,,,,,,263,,263,,263,263',
',263,263,263,,263,263,,,,,263,263,,,263,,,263,263,,,,,,,263,,,,,,263',
',,,263,263,,263,263,,,,263,263,263,263,263,263,263,,263,271,271,,263',
'271,271,,271,,,,,,,,,,,,,,,,,271,,,,,,271,,271,,271,271,,271,271,271',
',271,271,271,271,,,271,271,,,271,,,271,271,,,,,,,271,,,,,,271,,,,271',
'271,,271,271,,,,271,271,271,271,271,271,271,,271,275,275,,271,275,275',
',275,275,,,,,,,,,,,,,,,,275,,,,,,275,,275,,275,275,,275,275,275,,275',
'275,275,275,,,275,275,,,275,,,275,275,,,,,,,275,,,,,,275,,,,275,275',
',275,275,,,,275,275,275,275,275,275,275,,275,276,276,,275,276,276,,276',
',,,,,,,,,,,,,,,,276,,,,,,276,,276,,276,276,,276,276,276,,276,276,276',
'276,,,276,276,,,276,,,276,276,,,,,,,276,,,,,,276,,,,276,276,,276,276',
',,,276,276,276,276,276,276,276,,276,281,281,,276,281,281,,281,,,,,,',
',,,,,,,,,,281,,,,,,281,,281,,281,281,,281,281,281,,281,281,281,281,',
',281,281,,,281,,,281,281,,,,,,,281,,,,,,281,,,,281,281,,281,281,,,,281',
'281,281,281,281,281,281,,281,296,296,,281,296,296,,296,,,,,,,,,,,,,',
',,,296,,,,,,296,,296,,296,296,,296,296,296,,296,296,,,,,296,296,,,296',
',,296,296,,,,,,,296,,,,,,296,,,,296,296,,296,296,,,,296,296,296,296',
'296,296,296,,296,297,297,,296,297,297,,297,,,,,,,,,,,,,,,,,297,,,,,',
'297,,297,,297,297,,297,297,297,,297,297,,,,,297,297,,,297,,,297,297',
',,,,,,297,,,,,,297,,,,297,297,,297,297,,,,297,297,297,297,297,297,297',
',297,298,298,,297,298,298,,298,,,,,,,,,,,,,,,,,298,,,,,,298,,298,,298',
'298,,298,298,298,,298,298,,,,,298,298,,,298,,,298,298,,,,,,,298,,,,',
',298,,,,298,298,,298,298,,,,298,298,298,298,298,298,298,,298,300,300',
',298,300,300,,300,,,,,,,,,,,,,,,,,300,,,,,,300,,300,,300,300,,300,300',
'300,,300,300,,,,,300,300,,,300,,,300,300,,,,,,,300,,,,,,300,,,,300,300',
',300,300,,,,300,300,300,300,300,300,300,,300,301,301,,300,301,301,,301',
',,,,,,,,,,,,,,,,301,,,,,,301,,301,,301,301,,301,301,301,,301,301,,,',
',301,301,,,301,,,301,301,,,,,,,301,,,,,,301,,,,301,301,,301,301,,,,301',
'301,301,301,301,301,301,,301,325,325,,301,325,325,,325,,,,,,,,,,,,,',
',,,325,,,,,,325,,325,,325,325,,325,325,325,,325,325,,,,,325,325,,,325',
',,325,325,,,,,,,325,,,,,,325,,,,325,325,,325,325,,,,325,325,325,325',
'325,325,325,,325,336,336,,325,336,336,,336,,,,,,,,,,,,,,,,,336,,,,,',
'336,,336,,336,336,,336,336,336,,336,336,,,,,336,336,,,336,,,336,336',
',,,,,,336,,,,,,336,,,,336,336,,336,336,,,,336,336,336,336,336,336,336',
',336,339,339,,336,339,339,,339,,,,,,,,,,,,,,,,,339,,,,,,339,,339,,339',
'339,,339,339,339,,339,339,,,,,339,339,,,339,,,339,339,,,,,,,339,,,,',
',339,,,,339,339,,339,339,,,,339,339,339,339,339,339,339,,339,340,340',
',339,340,340,,340,,,,,,,,,,,,,,,,,340,,,,,,340,,340,,340,340,,340,340',
'340,,340,340,340,340,,,340,340,,,340,,,340,340,,,,,,,340,,,,,,340,,',
',340,340,,340,340,,,,340,340,340,340,340,340,340,,340,347,347,,340,347',
'347,,347,347,,,,,,,,,,,,,,,,347,,,,,,347,,347,,347,347,,347,347,347',
',347,347,,,,,347,347,,,347,,,347,347,,,,,,,347,,,,,,347,,,,347,347,',
'347,347,,,,347,347,347,347,347,347,347,,347,349,349,,347,349,349,,349',
',,,,,,,,,,,,,,,,349,,,,,,349,,349,,349,349,,349,349,349,,349,349,349',
'349,,,349,349,,,349,,,349,349,,,,,,,349,,,,,,349,,,,349,349,,349,349',
',,,349,349,349,349,349,349,349,,349,350,350,,349,350,350,,350,,,,,,',
',,,,,,,,,,350,,,,,,350,,350,,350,350,,350,350,350,,350,350,350,350,',
',350,350,,,350,,,350,350,,,,,,,350,,,,,,350,,,,350,350,,350,350,,,,350',
'350,350,350,350,350,350,,350,357,357,,350,357,357,,357,,,,,,,,,,,,,',
',,,357,,,,,,357,,357,,357,357,,357,357,357,,357,357,357,357,,,357,357',
',,357,,,357,357,,,,,,,357,,,,,,357,,,,357,357,,357,357,,,,357,357,357',
'357,357,357,357,,357,376,376,,357,376,376,,376,,,,,,,,,,,,,,,,,376,',
',,,,376,,376,,376,376,,376,376,376,,376,376,,,,,376,376,,,376,,,376',
'376,,,,,,,376,,,,,,376,,,,376,376,,376,376,,,,376,376,376,376,376,376',
'376,,376,382,382,,376,382,382,,382,,,,,,,,,,,,,,,,,382,,,,,,382,,382',
',382,382,,382,382,382,,382,382,382,382,,,382,382,,,382,,,382,382,,,',
',,,382,,,,,,382,,,,382,382,,382,382,,,,382,382,382,382,382,382,382,',
'382,394,394,,382,394,394,,394,,,,,,,,,,,,,,,,,394,,,,,,394,,394,,394',
'394,,394,394,394,,394,394,,,,,394,394,,,394,,,394,394,,,,,,,394,,,,',
',394,,,,394,394,,394,394,,,,394,394,394,394,394,394,394,,394,407,407',
',394,407,407,,407,407,,,,,,,,,,,,,,,,407,,,,,,407,,407,,407,407,,407',
'407,407,,407,407,407,407,,,407,407,,,407,,,407,407,,,,,,,407,,,,,,407',
',,,407,407,,407,407,,,,407,407,407,407,407,407,407,,407,424,424,,407',
'424,424,,424,424,,,,,,,,,,,,,,,,424,,,,,,424,,424,,424,424,,424,424',
'424,,424,424,424,424,,,424,424,,,424,,,424,424,,,,,,,424,,,,,,424,,',
',424,424,,424,424,,,,424,424,424,424,424,424,424,,424,426,426,,424,426',
'426,,426,426,,,,,,,,,,,,,,,,426,,,,,,426,,426,,426,426,,426,426,426',
',426,426,426,426,,,426,426,,,426,,,426,426,,,,,,,426,,,,,,426,,,,426',
'426,,426,426,,,,426,426,426,426,426,426,426,,426,427,427,,426,427,427',
',427,,,,,,,,,,,,,,,,,427,,,,,,427,,427,,427,427,,427,427,427,,427,427',
'427,427,,,427,427,,,427,,,427,427,,,,,,,427,,,,,,427,,,,427,427,,427',
'427,,,,427,427,427,427,427,427,427,,427,436,436,,427,436,436,,436,,',
',,,,,,,,,,,,,,436,,,,,,436,,436,,436,436,,436,436,436,,436,436,,,,,436',
'436,,,436,,,436,436,,,,,,,436,,,,,,436,,,,436,436,,436,436,9,,,436,436',
'436,436,436,436,436,,436,9,9,9,436,9,,9,9,,9,9,9,9,,,,,,,,,,,,,,,,9',
',,,9,9,,,9,9,9,9,9,9,,9,9,131,,131,,,9,,,,,,,131,131,131,,131,,131,131',
',131,131,131,131,,,,,,,,9,,,,,,,,131,,,,131,131,,,131,131,131,131,131',
'131,,131,131,133,,133,,,131,,,,,,,133,133,133,,133,,133,133,,133,133',
'133,133,,,,,,,,131,,,,,,,,133,,,,133,133,,,133,133,133,133,133,133,',
'133,133,134,,134,,,133,,,,,,,134,134,134,,134,,134,134,,134,134,134',
'134,,,,,,,,133,,,,,,,,134,,,,134,134,,167,134,134,134,134,134,134,,134',
'134,,,167,167,167,134,167,,167,167,,167,167,167,167,,,,,,,,,,,,,,,,167',
',134,,167,167,,,167,167,167,167,167,167,,167,167,,,,,,167,179,,,,,,',
',,,167,167,179,179,179,179,179,,179,179,,179,179,179,179,,167,,,,,,',
',,,,,,,179,,,,179,179,,206,179,179,179,179,179,179,,179,179,,,206,206',
'206,179,206,218,206,206,,206,206,206,206,,,,,,,218,,218,,218,218,,,',
'206,,179,,206,206,,,206,206,206,206,206,206,,206,206,218,,,,,206,,219',
'218,218,218,218,218,218,,218,218,,,,,219,218,219,220,219,219,,,,,,206',
',,,,220,220,,220,,220,220,,220,,219,,218,,,,,,219,219,219,219,219,219',
',219,219,220,,,,,219,,221,220,220,220,220,220,220,,220,220,,,,221,221',
'220,221,222,221,221,,221,,,,219,,,,,222,222,,222,,222,222,,222,,221',
',220,,,,,,221,221,221,221,221,221,,221,221,222,,,,,221,,223,222,222',
'222,222,222,222,,222,222,,,,223,223,222,223,,223,223,,223,,,,221,,,',
',,,,,,,,,,,223,,222,,,224,,,223,223,223,223,223,223,,223,223,224,224',
'224,,224,223,224,224,,224,224,224,224,,,,,,,,,,,,,,,,224,,,,223,225',
',,224,224,224,224,224,224,,224,224,225,225,225,,225,224,225,225,,225',
'225,225,225,,,,,,,,,,,,,,,,225,,,,224,225,,,225,225,225,225,225,225',
'226,225,225,,,226,,,225,,,,226,226,226,,226,,226,226,,226,226,226,226',
',,,,,,,,,,225,,,,,226,,,,226,226,,234,226,226,226,226,226,226,,226,226',
',,234,234,234,226,234,,234,234,,234,234,234,234,,,,,,,,,,,,,,,,234,',
'226,,234,234,,,234,234,234,234,234,234,239,234,234,,,,,,234,,,,239,239',
'239,239,239,,239,239,,239,239,239,239,,,,,,,,,,,234,,,,,239,,,,239,239',
',370,239,239,239,239,239,239,,239,239,,,370,370,370,239,370,,370,370',
',370,370,370,370,,,,,,,,,,,,,,,,370,,239,,370,370,,371,370,370,370,370',
'370,370,,370,370,,,371,371,371,370,371,,371,371,,371,371,371,371,,,',
',,,,,,,,,,,,371,,370,,371,371,,372,371,371,371,371,371,371,,371,371',
',,372,372,372,371,372,,372,372,,372,372,372,372,,,,,,,,,,,,,,,,372,',
'371,,372,372,,373,372,372,372,372,372,372,,372,372,,,373,373,373,372',
'373,,373,373,,373,373,373,373,,,,,,,,,,,,,,,,373,,372,,373,373,,374',
'373,373,373,373,373,373,,373,373,,,374,374,374,373,374,,374,374,,374',
'374,374,374,,,,,,,,,,,,,,,,374,,373,,374,374,,390,374,374,374,374,374',
'374,,374,374,,,390,390,390,374,390,,390,390,,390,390,390,390,,,,,,,',
',,,,,,,,390,,374,,390,390,,,390,390,390,390,390,390,,390,390,,,,,,390',
',,,,,,,,,,,,,,,,,,,,,,,,,,390' ]
        racc_action_check = arr = ::Array.new(8869, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

racc_action_pointer = [
    -2,    14,   nil,   nil,    87,    16,   nil,    40,    31,  7725,
   176,   265,   105,   nil,   nil,   354,   443,   532,   621,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,    11,    -2,    53,   710,   799,   888,   119,   139,
    25,   325,   149,    67,    75,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   977,  1066,  1155,   nil,   nil,   nil,   nil,  1244,
   nil,    15,    26,   nil,  1333,   nil,   122,  1422,   136,  1511,
  1600,  1689,  1778,  1867,  1956,  2045,  2134,  2223,  2313,  2402,
  2491,  2580,  2669,  2758,  2847,  2936,  3025,  3114,  3203,  3292,
  3381,  3470,  3559,  3648,  3737,  3826,  3915,  4004,  4093,   112,
   154,  4182,  4271,   175,   180,  4360,   170,   nil,   nil,   nil,
   nil,   nil,  1871,   187,  1960,  2049,   170,   nil,   190,    38,
  4449,  7782,   nil,  7839,  7896,   174,   181,   198,   nil,   nil,
   196,   nil,   190,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   188,   nil,   205,   nil,   210,   nil,   105,   nil,   nil,   218,
   nil,   187,   nil,   nil,    64,  4538,    63,  7943,  4627,   nil,
   218,   nil,   nil,   nil,   nil,   232,   236,   239,   243,  8006,
   243,  4716,    -9,    -4,     9,  4805,  4894,  4983,   nil,   nil,
    -2,   228,   238,    98,   503,   249,    -1,     7,    24,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,  8053,     9,  2138,   892,
   981,     2,   180,  1070,  1159,  1248,   358,   536,  8070,  8117,
  8134,  8181,  8198,  8245,  8290,  8335,  8389,   nil,   nil,  5072,
   260,   207,   nil,  1311,  8436,   232,   nil,   257,   240,  8490,
   nil,   245,   nil,   267,   nil,   nil,  5161,   nil,   271,   nil,
   nil,   nil,   nil,   nil,   269,   253,   -24,   286,   nil,   -11,
   nil,  5250,  5339,  5428,   287,   298,   304,   279,   646,   -28,
   310,  5517,   312,   315,   nil,  5606,  5695,   nil,   nil,   nil,
   nil,  5784,   nil,   nil,   nil,   nil,   313,   nil,   nil,   nil,
   nil,   318,   322,  1400,   324,  1489,  5873,  5962,  6051,   nil,
  6140,  6229,   323,   nil,   310,   nil,   325,   nil,   329,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   334,  6318,  1578,   336,   nil,   251,
   nil,   333,   344,   nil,   287,   276,  6407,   nil,   nil,  6496,
  6585,   nil,   352,   -15,   354,   334,    -7,  6674,   nil,  6763,
  6852,  1667,   359,   nil,   735,   nil,   nil,  6941,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   299,   114,   358,   nil,   nil,
  8537,  8584,  8631,  8678,  8725,   362,  7030,   302,   364,   nil,
   nil,   362,  7119,   nil,   nil,   nil,   349,   nil,   nil,   nil,
  8772,    18,   115,   nil,  7208,   368,   345,   nil,   373,   376,
   nil,   nil,   377,   nil,   nil,   382,   128,  7297,   nil,   386,
   nil,   nil,   391,   360,   nil,   nil,   nil,   nil,   nil,   396,
   nil,   nil,   nil,   nil,  7386,   nil,  7475,  7564,   nil,   nil,
  1756,   nil,   398,   nil,   nil,   nil,  7653,   nil,   399,   nil,
   402,   nil,   407,   nil,   nil,   nil,   377,   nil,   nil,   nil,
   nil ]

racc_action_default = [
    -3,  -255,    -1,    -2,    -4,    -5,    -8,   -10,   -16,   -21,
  -255,  -255,  -168,   -33,   -34,  -255,  -255,  -255,  -255,   -61,
   -62,   -63,   -64,   -65,   -66,   -67,   -68,   -69,   -70,   -71,
   -72,   -73,   -74,   -75,   -76,   -77,   -78,   -79,   -80,   -81,
   -82,   -83,   -84,   -89,   -93,  -255,  -255,  -255,  -255,  -255,
  -255,  -255,  -255,  -205,  -228,  -184,  -185,  -186,  -187,  -188,
  -189,  -190,  -255,  -255,  -255,  -201,  -202,  -203,  -204,  -255,
  -207,  -255,  -220,  -223,  -255,  -229,  -255,  -255,    -7,  -255,
  -255,  -255,  -255,  -255,  -255,  -255,  -255,  -129,  -255,  -255,
  -255,  -255,  -255,  -255,  -255,  -255,  -255,  -255,  -255,  -255,
  -255,  -255,  -255,  -255,  -255,  -255,  -255,  -255,  -255,  -255,
  -124,  -254,  -254,   -22,   -23,  -255,  -254,  -143,  -165,  -166,
  -167,  -168,   -46,  -168,   -47,   -54,  -255,   -90,  -255,  -255,
  -255,  -255,  -100,  -255,  -255,  -254,  -254,  -255,  -140,  -141,
  -230,  -152,  -154,  -155,  -156,  -157,  -158,  -160,  -161,  -205,
  -254,   -14,  -230,  -192,  -230,  -194,  -255,  -197,  -198,  -255,
  -206,  -255,  -211,  -214,  -255,  -218,  -255,  -255,  -255,   451,
    -6,    -9,   -11,   -12,   -13,   -17,   -18,   -19,   -20,  -255,
  -230,  -255,   -82,   -83,   -84,  -241,  -247,  -235,  -130,  -133,
  -255,  -238,  -252,  -168,  -244,  -250,  -185,  -186,  -187,  -234,
  -239,  -240,  -242,  -243,  -245,  -253,   -59,  -255,   -36,   -37,
   -38,   -39,   -40,   -41,   -42,   -43,   -44,   -45,   -48,   -49,
   -50,   -51,   -52,   -53,   -55,   -56,  -255,   -57,  -118,  -255,
  -230,   -86,   -94,  -129,  -128,  -255,  -127,  -255,  -232,  -255,
   -28,  -254,  -169,  -255,   -58,   -95,  -255,   -98,  -230,  -172,
  -174,  -175,  -176,  -177,  -179,  -255,  -255,  -182,  -228,  -255,
   -92,  -255,  -255,  -255,  -255,  -255,  -255,  -254,  -231,  -255,
  -255,  -231,  -255,  -255,  -195,  -255,  -255,  -208,  -209,  -210,
  -212,  -255,  -215,  -216,  -217,  -219,  -230,  -221,  -224,  -226,
  -227,    -8,  -255,  -129,  -255,  -231,  -255,  -255,  -255,   -35,
  -255,  -255,  -230,  -120,  -255,   -88,  -230,  -132,  -255,  -235,
  -236,  -237,  -238,  -241,  -244,  -246,  -247,  -248,  -249,  -250,
  -251,  -252,  -125,  -126,  -255,  -233,  -129,  -255,  -146,  -255,
  -170,  -230,  -255,   -97,  -255,  -231,  -255,  -180,  -181,  -255,
  -255,   -91,  -255,  -103,  -255,  -109,  -255,  -255,  -113,  -254,
  -254,  -129,  -255,  -162,  -255,  -153,  -159,  -254,   -15,  -191,
  -193,  -196,  -199,  -200,  -213,  -255,  -255,  -230,   -26,  -131,
  -136,  -134,  -135,   -60,  -122,  -255,  -231,   -85,  -255,   -25,
   -29,  -230,  -254,  -147,  -148,  -149,  -255,   -96,   -99,  -173,
  -178,  -255,  -103,  -102,  -255,  -255,  -109,  -108,  -255,  -255,
  -112,  -114,  -255,  -144,  -145,  -255,  -255,  -255,  -163,  -255,
  -222,  -225,  -255,   -30,  -119,  -121,   -87,  -123,   -27,  -255,
  -171,  -183,  -101,  -104,  -255,  -107,  -255,  -254,  -137,  -138,
  -255,  -139,  -255,  -151,  -164,   -24,   -31,  -142,  -255,  -106,
  -255,  -111,  -255,  -116,  -117,  -150,  -232,  -105,  -110,  -115,
   -32 ]

racc_goto_table = [
     2,   122,   124,   125,   127,   238,   126,   145,   228,   143,
   160,   180,   324,   267,   236,   236,   207,   288,   117,   257,
   369,   355,   248,   393,   348,   272,    78,   273,   235,   237,
     1,   131,   133,   134,     3,   412,   113,   114,   402,   405,
   380,   227,   245,   423,   397,   347,   409,   442,   152,   154,
   151,   151,   159,   294,   135,   136,   257,   162,   150,   286,
   167,   302,   137,   327,   383,   352,   356,   171,   172,   173,
   174,   419,   422,   179,   206,   208,   209,   210,   211,   212,
   213,   214,   215,   216,   217,   218,   219,   220,   221,   222,
   223,   224,   225,   226,   230,   425,   151,   234,   234,   170,
   241,   239,   389,   304,   338,   337,   362,   408,   401,   175,
   176,   177,   178,   282,   283,   280,   259,   281,   151,   264,
   265,   334,   279,   163,   165,   284,   nil,   nil,   nil,   117,
   303,   nil,   nil,   257,   270,   nil,   331,   nil,   nil,   nil,
   nil,   nil,   nil,   266,   328,   nil,   nil,   nil,   nil,   nil,
   145,   nil,   143,   nil,   nil,   369,   291,   306,   nil,   365,
   nil,   nil,   nil,   nil,   nil,   285,   nil,   124,   292,   nil,
   353,   131,   133,   134,   nil,   375,   nil,   nil,   nil,   378,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   305,   nil,   nil,   nil,   nil,   135,   136,   117,
   nil,   150,   nil,   nil,   386,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   226,   411,   367,   nil,   nil,
   450,   nil,   364,   nil,   145,   257,   143,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   413,   nil,   nil,   nil,   nil,   nil,   332,   nil,   nil,   206,
   381,   nil,   404,   404,   418,   nil,   nil,   nil,   nil,   358,
   404,   342,   344,   159,   363,   nil,   nil,   391,   nil,   162,
   nil,   nil,   nil,   nil,   nil,   406,   nil,   415,   nil,   nil,
   nil,   nil,   370,   371,   372,   404,   373,   374,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   145,   239,   143,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   390,   nil,   nil,   206,   446,   nil,   358,   nil,
   443,   nil,   nil,   206,   nil,   384,   nil,   nil,   416,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   226,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   131,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   432,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   239,   nil,   438,   nil,   440,   444 ]

racc_goto_check = [
     2,    10,    10,    10,    40,    13,     6,    37,    53,    38,
    84,    11,    14,    15,    52,    52,    19,    92,    60,    39,
    57,    69,    45,    47,    50,    15,     5,    15,    56,    56,
     1,    10,    10,    10,     3,    12,     9,     9,    62,    62,
    16,    20,    44,    46,    48,    49,    62,    51,     8,     8,
     6,     6,     6,    15,    60,    60,    39,     6,    60,    45,
    10,    54,    63,    65,    66,    68,    71,     6,     6,     6,
     6,    62,    47,    10,    10,    10,    10,    10,    10,    10,
    10,    10,    10,    10,    10,    10,    10,    10,    10,    10,
    10,    10,    10,    10,     8,    48,     6,    10,    10,     5,
    61,    10,    72,    15,    73,    75,    79,    69,    50,     9,
     9,     9,     9,    80,    81,    85,     8,    86,     6,    61,
    61,    15,    88,    89,    90,    91,   nil,   nil,   nil,    60,
    53,   nil,   nil,    39,    61,   nil,    45,   nil,   nil,   nil,
   nil,   nil,   nil,    60,    52,   nil,   nil,   nil,   nil,   nil,
    37,   nil,    38,   nil,   nil,    57,     6,    11,   nil,    15,
   nil,   nil,   nil,   nil,   nil,     2,   nil,    10,     2,   nil,
    52,    10,    10,    10,   nil,    15,   nil,   nil,   nil,    15,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,    40,   nil,   nil,   nil,   nil,    60,    60,    60,
   nil,    60,   nil,   nil,    15,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,    10,    92,    11,   nil,   nil,
    14,   nil,    84,   nil,    37,    39,    38,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
    15,   nil,   nil,   nil,   nil,   nil,     2,   nil,   nil,    10,
    11,   nil,    52,    52,    15,   nil,   nil,   nil,   nil,     6,
    52,     2,     2,     6,     6,   nil,   nil,    19,   nil,     6,
   nil,   nil,   nil,   nil,   nil,    11,   nil,    53,   nil,   nil,
   nil,   nil,    10,    10,    10,    52,    10,    10,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
    37,    10,    38,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,    10,   nil,   nil,    10,    13,   nil,     6,   nil,
    52,   nil,   nil,    10,   nil,    60,   nil,   nil,    40,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,    10,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
    10,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,     2,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,    10,   nil,     2,   nil,     2,     2 ]

racc_goto_pointer = [
   nil,    30,     0,    34,   nil,    22,   -12,   nil,   -14,    26,
   -14,   -76,  -332,  -110,  -226,  -127,  -285,   nil,   nil,   -72,
   -66,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   -44,   -42,  -110,
   -39,   nil,   nil,   nil,   -86,  -107,  -351,  -320,  -301,  -218,
  -239,  -380,   -97,   -99,  -168,   nil,   -83,  -275,   nil,   nil,
     6,   -16,  -311,    12,   nil,  -178,  -265,   nil,  -202,  -247,
   nil,  -203,  -233,  -152,   nil,  -150,   nil,   nil,   nil,  -169,
   -51,   -50,   nil,   nil,   -59,   -46,   -44,   nil,   -39,    52,
    52,   -40,  -150 ]

racc_goto_default = [
   nil,   nil,   403,   nil,     4,     5,     6,     7,   nil,     8,
     9,   nil,   nil,   nil,   nil,   nil,   240,    13,    14,   346,
   nil,    19,    20,    21,    22,    23,    24,    25,    26,    27,
    28,    29,    30,    31,    32,    33,    34,    35,    36,    37,
   nil,    43,    44,   128,   nil,   nil,   132,   nil,   nil,   nil,
   nil,   nil,   242,   nil,   nil,   110,   nil,   188,   190,   189,
    50,   nil,   nil,   nil,   116,   nil,   nil,   140,   nil,   141,
   142,   146,   249,   250,   251,   252,   253,   256,   156,   158,
    65,    66,    67,    69,   nil,   nil,   nil,   161,   nil,   nil,
   nil,   nil,   nil ]

racc_reduce_table = [
  0, 0, :racc_error,
  1, 98, :_reduce_1,
  1, 98, :_reduce_2,
  0, 98, :_reduce_3,
  1, 99, :_reduce_4,
  1, 101, :_reduce_5,
  3, 101, :_reduce_6,
  2, 101, :_reduce_7,
  1, 102, :_reduce_8,
  3, 102, :_reduce_9,
  1, 103, :_reduce_none,
  3, 103, :_reduce_11,
  3, 103, :_reduce_12,
  3, 103, :_reduce_13,
  1, 105, :_reduce_14,
  3, 105, :_reduce_15,
  1, 104, :_reduce_none,
  3, 104, :_reduce_17,
  3, 104, :_reduce_18,
  3, 104, :_reduce_19,
  3, 104, :_reduce_20,
  1, 106, :_reduce_none,
  2, 106, :_reduce_22,
  2, 106, :_reduce_23,
  7, 106, :_reduce_24,
  5, 106, :_reduce_25,
  5, 106, :_reduce_26,
  4, 113, :_reduce_27,
  1, 110, :_reduce_28,
  3, 110, :_reduce_29,
  1, 109, :_reduce_30,
  2, 109, :_reduce_31,
  4, 109, :_reduce_32,
  1, 107, :_reduce_none,
  1, 107, :_reduce_none,
  4, 107, :_reduce_35,
  3, 107, :_reduce_36,
  3, 107, :_reduce_37,
  3, 107, :_reduce_38,
  3, 107, :_reduce_39,
  3, 107, :_reduce_40,
  3, 107, :_reduce_41,
  3, 107, :_reduce_42,
  3, 107, :_reduce_43,
  3, 107, :_reduce_44,
  3, 107, :_reduce_45,
  2, 107, :_reduce_46,
  2, 107, :_reduce_47,
  3, 107, :_reduce_48,
  3, 107, :_reduce_49,
  3, 107, :_reduce_50,
  3, 107, :_reduce_51,
  3, 107, :_reduce_52,
  3, 107, :_reduce_53,
  2, 107, :_reduce_54,
  3, 107, :_reduce_55,
  3, 107, :_reduce_56,
  3, 107, :_reduce_57,
  3, 107, :_reduce_58,
  1, 116, :_reduce_59,
  3, 116, :_reduce_60,
  1, 114, :_reduce_none,
  1, 114, :_reduce_none,
  1, 114, :_reduce_none,
  1, 114, :_reduce_none,
  1, 114, :_reduce_none,
  1, 114, :_reduce_none,
  1, 114, :_reduce_none,
  1, 114, :_reduce_none,
  1, 114, :_reduce_none,
  1, 114, :_reduce_none,
  1, 114, :_reduce_none,
  1, 114, :_reduce_none,
  1, 114, :_reduce_none,
  1, 114, :_reduce_none,
  1, 114, :_reduce_none,
  1, 114, :_reduce_none,
  1, 114, :_reduce_none,
  1, 114, :_reduce_none,
  1, 114, :_reduce_none,
  1, 114, :_reduce_80,
  1, 114, :_reduce_81,
  1, 114, :_reduce_82,
  1, 114, :_reduce_83,
  1, 114, :_reduce_84,
  5, 115, :_reduce_85,
  3, 115, :_reduce_86,
  6, 115, :_reduce_87,
  4, 115, :_reduce_88,
  1, 119, :_reduce_89,
  2, 119, :_reduce_90,
  4, 138, :_reduce_91,
  3, 138, :_reduce_92,
  1, 138, :_reduce_93,
  3, 139, :_reduce_94,
  2, 137, :_reduce_95,
  3, 141, :_reduce_96,
  2, 141, :_reduce_97,
  2, 140, :_reduce_98,
  4, 140, :_reduce_99,
  2, 122, :_reduce_100,
  5, 143, :_reduce_101,
  4, 143, :_reduce_102,
  0, 144, :_reduce_none,
  2, 144, :_reduce_104,
  4, 144, :_reduce_105,
  3, 144, :_reduce_106,
  6, 123, :_reduce_107,
  5, 123, :_reduce_108,
  0, 145, :_reduce_none,
  4, 145, :_reduce_110,
  3, 145, :_reduce_111,
  5, 121, :_reduce_112,
  1, 146, :_reduce_113,
  2, 146, :_reduce_114,
  5, 147, :_reduce_115,
  1, 148, :_reduce_none,
  1, 148, :_reduce_none,
  1, 117, :_reduce_none,
  4, 117, :_reduce_119,
  1, 151, :_reduce_120,
  3, 151, :_reduce_121,
  3, 150, :_reduce_122,
  6, 120, :_reduce_123,
  2, 120, :_reduce_124,
  3, 152, :_reduce_125,
  3, 152, :_reduce_126,
  1, 153, :_reduce_none,
  1, 153, :_reduce_none,
  0, 108, :_reduce_129,
  1, 108, :_reduce_130,
  3, 108, :_reduce_131,
  1, 155, :_reduce_none,
  1, 155, :_reduce_none,
  3, 154, :_reduce_134,
  3, 154, :_reduce_135,
  3, 154, :_reduce_136,
  6, 124, :_reduce_137,
  6, 125, :_reduce_138,
  6, 126, :_reduce_139,
  1, 160, :_reduce_none,
  1, 160, :_reduce_none,
  7, 127, :_reduce_142,
  1, 161, :_reduce_143,
  1, 159, :_reduce_none,
  1, 159, :_reduce_none,
  1, 162, :_reduce_none,
  2, 162, :_reduce_147,
  1, 163, :_reduce_none,
  1, 163, :_reduce_none,
  7, 128, :_reduce_150,
  6, 128, :_reduce_151,
  1, 164, :_reduce_152,
  3, 164, :_reduce_153,
  1, 166, :_reduce_none,
  1, 166, :_reduce_none,
  1, 166, :_reduce_156,
  1, 166, :_reduce_none,
  1, 167, :_reduce_158,
  3, 167, :_reduce_159,
  1, 168, :_reduce_none,
  1, 168, :_reduce_none,
  1, 165, :_reduce_none,
  2, 165, :_reduce_163,
  6, 130, :_reduce_164,
  1, 157, :_reduce_none,
  1, 157, :_reduce_none,
  1, 157, :_reduce_none,
  1, 157, :_reduce_168,
  1, 158, :_reduce_169,
  2, 158, :_reduce_170,
  4, 158, :_reduce_171,
  1, 142, :_reduce_172,
  3, 142, :_reduce_173,
  1, 169, :_reduce_none,
  1, 169, :_reduce_none,
  1, 170, :_reduce_none,
  1, 170, :_reduce_none,
  3, 172, :_reduce_178,
  1, 172, :_reduce_179,
  2, 173, :_reduce_180,
  2, 171, :_reduce_181,
  1, 174, :_reduce_182,
  4, 174, :_reduce_183,
  1, 118, :_reduce_184,
  1, 131, :_reduce_185,
  1, 131, :_reduce_186,
  1, 131, :_reduce_187,
  1, 131, :_reduce_188,
  1, 131, :_reduce_189,
  1, 131, :_reduce_190,
  4, 132, :_reduce_191,
  2, 132, :_reduce_192,
  4, 132, :_reduce_193,
  2, 132, :_reduce_194,
  3, 133, :_reduce_195,
  4, 133, :_reduce_196,
  2, 133, :_reduce_197,
  1, 175, :_reduce_198,
  3, 175, :_reduce_199,
  3, 176, :_reduce_200,
  1, 135, :_reduce_none,
  1, 135, :_reduce_none,
  1, 135, :_reduce_none,
  1, 177, :_reduce_204,
  1, 177, :_reduce_205,
  2, 178, :_reduce_206,
  1, 180, :_reduce_207,
  1, 182, :_reduce_208,
  1, 183, :_reduce_209,
  2, 181, :_reduce_210,
  1, 184, :_reduce_211,
  1, 185, :_reduce_212,
  2, 185, :_reduce_213,
  2, 179, :_reduce_214,
  2, 186, :_reduce_215,
  2, 186, :_reduce_216,
  3, 100, :_reduce_217,
  0, 188, :_reduce_none,
  1, 188, :_reduce_none,
  0, 187, :_reduce_220,
  2, 187, :_reduce_221,
  4, 187, :_reduce_222,
  1, 129, :_reduce_223,
  3, 129, :_reduce_224,
  5, 129, :_reduce_225,
  1, 189, :_reduce_none,
  1, 189, :_reduce_none,
  1, 136, :_reduce_228,
  1, 134, :_reduce_229,
  0, 112, :_reduce_none,
  1, 112, :_reduce_231,
  0, 111, :_reduce_none,
  1, 111, :_reduce_none,
  1, 156, :_reduce_none,
  1, 156, :_reduce_none,
  1, 156, :_reduce_none,
  1, 156, :_reduce_none,
  1, 156, :_reduce_none,
  1, 156, :_reduce_none,
  1, 156, :_reduce_none,
  1, 156, :_reduce_none,
  1, 156, :_reduce_none,
  1, 156, :_reduce_none,
  1, 156, :_reduce_none,
  1, 156, :_reduce_none,
  1, 156, :_reduce_none,
  1, 156, :_reduce_none,
  1, 156, :_reduce_none,
  1, 156, :_reduce_none,
  1, 156, :_reduce_none,
  1, 156, :_reduce_none,
  1, 156, :_reduce_none,
  1, 156, :_reduce_none,
  0, 149, :_reduce_254 ]

racc_reduce_n = 255

racc_shift_n = 451

racc_token_table = {
  false => 0,
  :error => 1,
  :STRING => 2,
  :DQPRE => 3,
  :DQMID => 4,
  :DQPOST => 5,
  :WORD => 6,
  :LBRACK => 7,
  :RBRACK => 8,
  :LBRACE => 9,
  :RBRACE => 10,
  :SYMBOL => 11,
  :FARROW => 12,
  :COMMA => 13,
  :TRUE => 14,
  :FALSE => 15,
  :EQUALS => 16,
  :APPENDS => 17,
  :DELETES => 18,
  :LESSEQUAL => 19,
  :NOTEQUAL => 20,
  :DOT => 21,
  :COLON => 22,
  :LLCOLLECT => 23,
  :RRCOLLECT => 24,
  :QMARK => 25,
  :LPAREN => 26,
  :RPAREN => 27,
  :ISEQUAL => 28,
  :GREATEREQUAL => 29,
  :GREATERTHAN => 30,
  :LESSTHAN => 31,
  :IF => 32,
  :ELSE => 33,
  :DEFINE => 34,
  :ELSIF => 35,
  :VARIABLE => 36,
  :CLASS => 37,
  :INHERITS => 38,
  :NODE => 39,
  :BOOLEAN => 40,
  :NAME => 41,
  :SEMIC => 42,
  :CASE => 43,
  :DEFAULT => 44,
  :AT => 45,
  :ATAT => 46,
  :LCOLLECT => 47,
  :RCOLLECT => 48,
  :CLASSREF => 49,
  :NOT => 50,
  :OR => 51,
  :AND => 52,
  :UNDEF => 53,
  :PARROW => 54,
  :PLUS => 55,
  :MINUS => 56,
  :TIMES => 57,
  :DIV => 58,
  :LSHIFT => 59,
  :RSHIFT => 60,
  :UMINUS => 61,
  :MATCH => 62,
  :NOMATCH => 63,
  :REGEX => 64,
  :IN_EDGE => 65,
  :OUT_EDGE => 66,
  :IN_EDGE_SUB => 67,
  :OUT_EDGE_SUB => 68,
  :IN => 69,
  :UNLESS => 70,
  :PIPE => 71,
  :LAMBDA => 72,
  :SELBRACE => 73,
  :NUMBER => 74,
  :HEREDOC => 75,
  :SUBLOCATE => 76,
  :RENDER_STRING => 77,
  :RENDER_EXPR => 78,
  :EPP_START => 79,
  :EPP_END => 80,
  :EPP_END_TRIM => 81,
  :FUNCTION => 82,
  :PRIVATE => 83,
  :ATTR => 84,
  :TYPE => 85,
  :APPLICATION_R => 86,
  :CONSUMES_R => 87,
  :PRODUCES_R => 88,
  :LOW => 89,
  :APPLICATION => 90,
  :PRODUCES => 91,
  :CONSUMES => 92,
  :HIGH => 93,
  :LISTSTART => 94,
  :SPLAT => 95,
  :MODULO => 96 }

racc_nt_base = 97

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "STRING",
  "DQPRE",
  "DQMID",
  "DQPOST",
  "WORD",
  "LBRACK",
  "RBRACK",
  "LBRACE",
  "RBRACE",
  "SYMBOL",
  "FARROW",
  "COMMA",
  "TRUE",
  "FALSE",
  "EQUALS",
  "APPENDS",
  "DELETES",
  "LESSEQUAL",
  "NOTEQUAL",
  "DOT",
  "COLON",
  "LLCOLLECT",
  "RRCOLLECT",
  "QMARK",
  "LPAREN",
  "RPAREN",
  "ISEQUAL",
  "GREATEREQUAL",
  "GREATERTHAN",
  "LESSTHAN",
  "IF",
  "ELSE",
  "DEFINE",
  "ELSIF",
  "VARIABLE",
  "CLASS",
  "INHERITS",
  "NODE",
  "BOOLEAN",
  "NAME",
  "SEMIC",
  "CASE",
  "DEFAULT",
  "AT",
  "ATAT",
  "LCOLLECT",
  "RCOLLECT",
  "CLASSREF",
  "NOT",
  "OR",
  "AND",
  "UNDEF",
  "PARROW",
  "PLUS",
  "MINUS",
  "TIMES",
  "DIV",
  "LSHIFT",
  "RSHIFT",
  "UMINUS",
  "MATCH",
  "NOMATCH",
  "REGEX",
  "IN_EDGE",
  "OUT_EDGE",
  "IN_EDGE_SUB",
  "OUT_EDGE_SUB",
  "IN",
  "UNLESS",
  "PIPE",
  "LAMBDA",
  "SELBRACE",
  "NUMBER",
  "HEREDOC",
  "SUBLOCATE",
  "RENDER_STRING",
  "RENDER_EXPR",
  "EPP_START",
  "EPP_END",
  "EPP_END_TRIM",
  "FUNCTION",
  "PRIVATE",
  "ATTR",
  "TYPE",
  "APPLICATION_R",
  "CONSUMES_R",
  "PRODUCES_R",
  "LOW",
  "APPLICATION",
  "PRODUCES",
  "CONSUMES",
  "HIGH",
  "LISTSTART",
  "SPLAT",
  "MODULO",
  "$start",
  "program",
  "statements",
  "epp_expression",
  "syntactic_statements",
  "syntactic_statement",
  "assignment",
  "relationship",
  "assignments",
  "resource",
  "expression",
  "attribute_operations",
  "additional_resource_bodies",
  "resource_bodies",
  "endsemi",
  "endcomma",
  "resource_body",
  "primary_expression",
  "call_function_expression",
  "expressions",
  "selector_entries",
  "variable",
  "call_method_with_lambda_expression",
  "collection_expression",
  "case_expression",
  "if_expression",
  "unless_expression",
  "definition_expression",
  "application_expression",
  "capability_mapping",
  "hostclass_expression",
  "node_definition_expression",
  "epp_render_expression",
  "function_definition",
  "reserved_word",
  "array",
  "hash",
  "regex",
  "quotedtext",
  "type",
  "lambda",
  "call_method_expression",
  "named_access",
  "lambda_parameter_list",
  "lambda_rest",
  "parameters",
  "if_part",
  "else",
  "unless_else",
  "case_options",
  "case_option",
  "options_statements",
  "nil",
  "selector_entry",
  "selector_entry_list",
  "collect_query",
  "optional_query",
  "attribute_operation",
  "attribute_name",
  "keyword",
  "classname",
  "parameter_list",
  "opt_statements",
  "capability_kw",
  "stacked_classname",
  "classparent",
  "classnameordefault",
  "hostnames",
  "nodeparent",
  "hostname",
  "dotted_name",
  "name_or_number",
  "parameter",
  "untyped_parameter",
  "typed_parameter",
  "regular_parameter",
  "splat_parameter",
  "parameter_type",
  "hashpairs",
  "hashpair",
  "string",
  "dq_string",
  "heredoc",
  "dqpre",
  "dqrval",
  "dqpost",
  "dqmid",
  "text_expression",
  "dqtail",
  "sublocated_text",
  "epp_parameters_list",
  "optional_statements",
  "epp_end" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

module_eval(<<'.,.,', 'egrammar.ra', 68)
  def _reduce_1(val, _values, result)
     result = create_program(Factory.block_or_expression(*val[0])) 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 69)
  def _reduce_2(val, _values, result)
     result = create_program(Factory.block_or_expression(*val[0])) 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 70)
  def _reduce_3(val, _values, result)
     result = create_empty_program() 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 74)
  def _reduce_4(val, _values, result)
     result = transform_calls(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 81)
  def _reduce_5(val, _values, result)
     result = [val[0]]
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 82)
  def _reduce_6(val, _values, result)
     result = val[0].push val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 83)
  def _reduce_7(val, _values, result)
     result = val[0].push val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 90)
  def _reduce_8(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 91)
  def _reduce_9(val, _values, result)
     result = aryfy(val[0]).push(val[1]).push(val[2]) 
    result
  end
.,.,

# reduce 10 omitted

module_eval(<<'.,.,', 'egrammar.ra', 96)
  def _reduce_11(val, _values, result)
     result = val[0].set(val[2])      ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 97)
  def _reduce_12(val, _values, result)
     result = val[0].plus_set(val[2]) ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 98)
  def _reduce_13(val, _values, result)
     result = val[0].minus_set(val[2]); loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 101)
  def _reduce_14(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 102)
  def _reduce_15(val, _values, result)
     result = val[0].push(val[2]) 
    result
  end
.,.,

# reduce 16 omitted

module_eval(<<'.,.,', 'egrammar.ra', 106)
  def _reduce_17(val, _values, result)
     result = val[0].relop(val[1][:value], val[2]); loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 107)
  def _reduce_18(val, _values, result)
     result = val[0].relop(val[1][:value], val[2]); loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 108)
  def _reduce_19(val, _values, result)
     result = val[0].relop(val[1][:value], val[2]); loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 109)
  def _reduce_20(val, _values, result)
     result = val[0].relop(val[1][:value], val[2]); loc result, val[1] 
    result
  end
.,.,

# reduce 21 omitted

module_eval(<<'.,.,', 'egrammar.ra', 118)
  def _reduce_22(val, _values, result)
          result = val[1]
      unless Factory.set_resource_form(result, :virtual)
        # This is equivalent to a syntax error - additional semantic restrictions apply
        error val[0], "Virtual (@) can only be applied to a Resource Expression"
      end
      # relocate the result
      loc result, val[0], val[1]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 129)
  def _reduce_23(val, _values, result)
          result = val[1]
      unless Factory.set_resource_form(result, :exported)
        # This is equivalent to a syntax error - additional semantic restrictions apply
        error val[0], "Exported (@@) can only be applied to a Resource Expression"
      end
      # relocate the result
      loc result, val[0], val[1]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 140)
  def _reduce_24(val, _values, result)
          bodies = [Factory.RESOURCE_BODY(val[2], val[4])] + val[5]
      result = Factory.RESOURCE(val[0], bodies)
      loc result, val[0], val[6]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 147)
  def _reduce_25(val, _values, result)
            result = Factory.RESOURCE(Factory.fqn(token_text(val[0])), val[2])
        loc result, val[0], val[4]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 156)
  def _reduce_26(val, _values, result)
           result = case Factory.resource_shape(val[0])
       when :resource, :class
        # This catches deprecated syntax.
        # If the attribute operations does not include +>, then the found expression
        # is actually a LEFT followed by LITERAL_HASH
        #
        unless tmp = transform_resource_wo_title(val[0], val[2])
          error val[1], "Syntax error resource body without title or hash with +>"
        end
        tmp
      when :defaults
        Factory.RESOURCE_DEFAULTS(val[0], val[2])
      when :override
        # This was only done for override in original - TODO should it be here at all
        Factory.RESOURCE_OVERRIDE(val[0], val[2])
      else
        error val[0], "Expression is not valid as a resource, resource-default, or resource-override"
      end
     loc result, val[0], val[4]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 178)
  def _reduce_27(val, _values, result)
     result = Factory.RESOURCE_BODY(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 181)
  def _reduce_28(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 182)
  def _reduce_29(val, _values, result)
     result = val[0].push val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 188)
  def _reduce_30(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 189)
  def _reduce_31(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 190)
  def _reduce_32(val, _values, result)
     result = val[2] 
    result
  end
.,.,

# reduce 33 omitted

# reduce 34 omitted

module_eval(<<'.,.,', 'egrammar.ra', 197)
  def _reduce_35(val, _values, result)
     result = val[0][*val[2]]         ; loc result, val[0], val[3] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 198)
  def _reduce_36(val, _values, result)
     result = val[0].in val[2]        ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 199)
  def _reduce_37(val, _values, result)
     result = val[0] =~  val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 200)
  def _reduce_38(val, _values, result)
     result = val[0].mne val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 201)
  def _reduce_39(val, _values, result)
     result = val[0] +   val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 202)
  def _reduce_40(val, _values, result)
     result = val[0] -   val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 203)
  def _reduce_41(val, _values, result)
     result = val[0] /   val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 204)
  def _reduce_42(val, _values, result)
     result = val[0] *   val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 205)
  def _reduce_43(val, _values, result)
     result = val[0] %   val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 206)
  def _reduce_44(val, _values, result)
     result = val[0] <<  val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 207)
  def _reduce_45(val, _values, result)
     result = val[0] >>  val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 208)
  def _reduce_46(val, _values, result)
     result = val[1].minus()          ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 209)
  def _reduce_47(val, _values, result)
     result = val[1].unfold()         ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 210)
  def _reduce_48(val, _values, result)
     result = val[0].ne  val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 211)
  def _reduce_49(val, _values, result)
     result = val[0] ==  val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 212)
  def _reduce_50(val, _values, result)
     result = val[0] >   val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 213)
  def _reduce_51(val, _values, result)
     result = val[0] >=  val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 214)
  def _reduce_52(val, _values, result)
     result = val[0] <   val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 215)
  def _reduce_53(val, _values, result)
     result = val[0] <=  val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 216)
  def _reduce_54(val, _values, result)
     result = val[1].not              ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 217)
  def _reduce_55(val, _values, result)
     result = val[0].and val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 218)
  def _reduce_56(val, _values, result)
     result = val[0].or  val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 219)
  def _reduce_57(val, _values, result)
     result = val[0].select(*val[2])  ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 220)
  def _reduce_58(val, _values, result)
     result = val[1].paren()          ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 230)
  def _reduce_59(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 231)
  def _reduce_60(val, _values, result)
     result = val[0].push(val[2]) 
    result
  end
.,.,

# reduce 61 omitted

# reduce 62 omitted

# reduce 63 omitted

# reduce 64 omitted

# reduce 65 omitted

# reduce 66 omitted

# reduce 67 omitted

# reduce 68 omitted

# reduce 69 omitted

# reduce 70 omitted

# reduce 71 omitted

# reduce 72 omitted

# reduce 73 omitted

# reduce 74 omitted

# reduce 75 omitted

# reduce 76 omitted

# reduce 77 omitted

# reduce 78 omitted

# reduce 79 omitted

module_eval(<<'.,.,', 'egrammar.ra', 255)
  def _reduce_80(val, _values, result)
     result = Factory.NUMBER(val[0][:value])          ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 256)
  def _reduce_81(val, _values, result)
     result = Factory.literal(val[0][:value])         ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 257)
  def _reduce_82(val, _values, result)
     result = Factory.literal(:default)               ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 258)
  def _reduce_83(val, _values, result)
     result = Factory.literal(:undef)                 ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 259)
  def _reduce_84(val, _values, result)
     result = Factory.QNAME_OR_NUMBER(val[0][:value]) ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 268)
  def _reduce_85(val, _values, result)
          result = Factory.CALL_NAMED(val[0], true, val[2])
      loc result, val[0], val[4]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 272)
  def _reduce_86(val, _values, result)
          result = Factory.CALL_NAMED(val[0], true, [])
      loc result, val[0], val[2]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 276)
  def _reduce_87(val, _values, result)
          result = Factory.CALL_NAMED(val[0], true, val[2])
      loc result, val[0], val[4]
      result.lambda = val[5]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 281)
  def _reduce_88(val, _values, result)
          result = Factory.CALL_NAMED(val[0], true, [])
      loc result, val[0], val[2]
      result.lambda = val[3]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 289)
  def _reduce_89(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 290)
  def _reduce_90(val, _values, result)
     result = val[0]; val[0].lambda = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 293)
  def _reduce_91(val, _values, result)
     result = Factory.CALL_METHOD(val[0], val[2]); loc result, val[1], val[3] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 294)
  def _reduce_92(val, _values, result)
     result = Factory.CALL_METHOD(val[0], []); loc result, val[1], val[3] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 295)
  def _reduce_93(val, _values, result)
     result = Factory.CALL_METHOD(val[0], []); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 299)
  def _reduce_94(val, _values, result)
            result = val[0].dot(Factory.fqn(val[2][:value]))
        loc result, val[1], val[2]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 307)
  def _reduce_95(val, _values, result)
          result = Factory.LAMBDA(val[0][:value], val[1][:value])
      loc result, val[0][:start], val[1][:end]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 312)
  def _reduce_96(val, _values, result)
     result = {:end => val[2], :value =>val[1] } 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 313)
  def _reduce_97(val, _values, result)
     result = {:end => val[1], :value => nil } 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 317)
  def _reduce_98(val, _values, result)
     result = {:start => val[0], :value => [] } 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 318)
  def _reduce_99(val, _values, result)
     result = {:start => val[0], :value => val[1] } 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 326)
  def _reduce_100(val, _values, result)
          result = val[1]
      loc(result, val[0], val[1])
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 333)
  def _reduce_101(val, _values, result)
            result = Factory.IF(val[0], Factory.block_or_expression(*val[2]), val[4])
        loc(result, val[0], (val[4] ? val[4] : val[3]))
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 337)
  def _reduce_102(val, _values, result)
            result = Factory.IF(val[0], nil, val[3])
        loc(result, val[0], (val[3] ? val[3] : val[2]))
      
    result
  end
.,.,

# reduce 103 omitted

module_eval(<<'.,.,', 'egrammar.ra', 345)
  def _reduce_104(val, _values, result)
            result = val[1]
        loc(result, val[0], val[1])
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 349)
  def _reduce_105(val, _values, result)
            result = Factory.block_or_expression(*val[2])
        loc result, val[0], val[3]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 353)
  def _reduce_106(val, _values, result)
            result = nil # don't think a nop is needed here either
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 360)
  def _reduce_107(val, _values, result)
          result = Factory.UNLESS(val[1], Factory.block_or_expression(*val[3]), val[5])
      loc result, val[0], val[4]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 364)
  def _reduce_108(val, _values, result)
          result = Factory.UNLESS(val[1], nil, val[4])
      loc result, val[0], val[4]
    
    result
  end
.,.,

# reduce 109 omitted

module_eval(<<'.,.,', 'egrammar.ra', 374)
  def _reduce_110(val, _values, result)
            result = Factory.block_or_expression(*val[2])
        loc result, val[0], val[3]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 378)
  def _reduce_111(val, _values, result)
            result = nil # don't think a nop is needed here either
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 385)
  def _reduce_112(val, _values, result)
          result = Factory.CASE(val[1], *val[3])
      loc result, val[0], val[4]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 391)
  def _reduce_113(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 392)
  def _reduce_114(val, _values, result)
     result = val[0].push val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 397)
  def _reduce_115(val, _values, result)
            result = Factory.WHEN(val[0], val[3]); loc result, val[1], val[4]
      
    result
  end
.,.,

# reduce 116 omitted

# reduce 117 omitted

# reduce 118 omitted

module_eval(<<'.,.,', 'egrammar.ra', 413)
  def _reduce_119(val, _values, result)
            result = val[1]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 418)
  def _reduce_120(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 419)
  def _reduce_121(val, _values, result)
     result = val[0].push val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 424)
  def _reduce_122(val, _values, result)
     result = Factory.MAP(val[0], val[2]) ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 434)
  def _reduce_123(val, _values, result)
          result = Factory.COLLECT(val[0], val[1], val[3])
      loc result, val[0], val[5]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 438)
  def _reduce_124(val, _values, result)
          result = Factory.COLLECT(val[0], val[1], [])
      loc result, val[0], val[1]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 443)
  def _reduce_125(val, _values, result)
     result = Factory.VIRTUAL_QUERY(val[1])   ; loc result, val[0], val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 444)
  def _reduce_126(val, _values, result)
     result = Factory.EXPORTED_QUERY(val[1])  ; loc result, val[0], val[2] 
    result
  end
.,.,

# reduce 127 omitted

# reduce 128 omitted

module_eval(<<'.,.,', 'egrammar.ra', 453)
  def _reduce_129(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 454)
  def _reduce_130(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 455)
  def _reduce_131(val, _values, result)
     result = val[0].push(val[2]) 
    result
  end
.,.,

# reduce 132 omitted

# reduce 133 omitted

module_eval(<<'.,.,', 'egrammar.ra', 471)
  def _reduce_134(val, _values, result)
            result = Factory.ATTRIBUTE_OP(val[0][:value], :'=>', val[2])
        loc result, val[0], val[2]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 475)
  def _reduce_135(val, _values, result)
            result = Factory.ATTRIBUTE_OP(val[0][:value], :'+>', val[2])
        loc result, val[0], val[2]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 479)
  def _reduce_136(val, _values, result)
          result = Factory.ATTRIBUTES_OP(val[2]) ; loc result, val[0], val[2]
   
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 488)
  def _reduce_137(val, _values, result)
          result = add_definition(Factory.DEFINITION(classname(val[1][:value]), val[2], val[4]))
      loc result, val[0], val[5]
      # New lexer does not keep track of this, this is done in validation
      if @lexer.respond_to?(:'indefine=')
        @lexer.indefine = false
      end
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 499)
  def _reduce_138(val, _values, result)
        result = add_definition(Factory.APPLICATION(classname(val[1][:value]), val[2], val[4]))
    loc result, val[0], val[5]
  
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 505)
  def _reduce_139(val, _values, result)
        result = Factory.CAPABILITY_MAPPING(val[1][:value],
                                        classname(val[0][:value]),
                                        classname(val[2][:value]), val[4])
    loc result, val[0], val[5]
    add_mapping(result)
  
    result
  end
.,.,

# reduce 140 omitted

# reduce 141 omitted

module_eval(<<'.,.,', 'egrammar.ra', 522)
  def _reduce_142(val, _values, result)
          # Remove this class' name from the namestack as all nested classes have been parsed
      namepop
      result = add_definition(Factory.HOSTCLASS(classname(val[1][:value]), val[2], token_text(val[3]), val[5]))
      loc result, val[0], val[6]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 532)
  def _reduce_143(val, _values, result)
     namestack(val[0][:value]) ; result = val[0] 
    result
  end
.,.,

# reduce 144 omitted

# reduce 145 omitted

# reduce 146 omitted

module_eval(<<'.,.,', 'egrammar.ra', 541)
  def _reduce_147(val, _values, result)
     result = val[1] 
    result
  end
.,.,

# reduce 148 omitted

# reduce 149 omitted

module_eval(<<'.,.,', 'egrammar.ra', 558)
  def _reduce_150(val, _values, result)
          result = add_definition(Factory.NODE(val[1], val[3], val[5]))
      loc result, val[0], val[6]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 562)
  def _reduce_151(val, _values, result)
          result = add_definition(Factory.NODE(val[1], val[3], nil))
      loc result, val[0], val[5]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 572)
  def _reduce_152(val, _values, result)
     result = [result] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 573)
  def _reduce_153(val, _values, result)
     result = val[0].push(val[2]) 
    result
  end
.,.,

# reduce 154 omitted

# reduce 155 omitted

module_eval(<<'.,.,', 'egrammar.ra', 580)
  def _reduce_156(val, _values, result)
     result = Factory.literal(:default); loc result, val[0] 
    result
  end
.,.,

# reduce 157 omitted

module_eval(<<'.,.,', 'egrammar.ra', 584)
  def _reduce_158(val, _values, result)
     result = Factory.literal(val[0][:value]); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 585)
  def _reduce_159(val, _values, result)
     result = Factory.concat(val[0], '.', val[2][:value]); loc result, val[0], val[2] 
    result
  end
.,.,

# reduce 160 omitted

# reduce 161 omitted

# reduce 162 omitted

module_eval(<<'.,.,', 'egrammar.ra', 594)
  def _reduce_163(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 600)
  def _reduce_164(val, _values, result)
          result = add_definition(Factory.FUNCTION(val[1][:value], val[2], val[4]))
      loc result, val[0], val[5]
    
    result
  end
.,.,

# reduce 165 omitted

# reduce 166 omitted

# reduce 167 omitted

module_eval(<<'.,.,', 'egrammar.ra', 611)
  def _reduce_168(val, _values, result)
     error val[0], "'class' is not a valid classname" 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 615)
  def _reduce_169(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 616)
  def _reduce_170(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 617)
  def _reduce_171(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 621)
  def _reduce_172(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 622)
  def _reduce_173(val, _values, result)
     result = val[0].push(val[2]) 
    result
  end
.,.,

# reduce 174 omitted

# reduce 175 omitted

# reduce 176 omitted

# reduce 177 omitted

module_eval(<<'.,.,', 'egrammar.ra', 634)
  def _reduce_178(val, _values, result)
     result = Factory.PARAM(val[0][:value], val[2]) ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 635)
  def _reduce_179(val, _values, result)
     result = Factory.PARAM(val[0][:value]); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 638)
  def _reduce_180(val, _values, result)
     result = val[1]; val[1].captures_rest() 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 641)
  def _reduce_181(val, _values, result)
     val[1].type_expr(val[0]) ; result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 644)
  def _reduce_182(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 645)
  def _reduce_183(val, _values, result)
     result = val[0][*val[2]] ; loc result, val[0], val[3] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 650)
  def _reduce_184(val, _values, result)
     result = Factory.fqn(val[0][:value]).var ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 655)
  def _reduce_185(val, _values, result)
     result = Factory.RESERVED(val[0][:value]) ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 656)
  def _reduce_186(val, _values, result)
     result = Factory.RESERVED(val[0][:value]) ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 657)
  def _reduce_187(val, _values, result)
     result = Factory.RESERVED(val[0][:value]) ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 658)
  def _reduce_188(val, _values, result)
     result = Factory.RESERVED(val[0][:value], true) ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 659)
  def _reduce_189(val, _values, result)
     result = Factory.RESERVED(val[0][:value], true) ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 660)
  def _reduce_190(val, _values, result)
     result = Factory.RESERVED(val[0][:value], true) ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 666)
  def _reduce_191(val, _values, result)
     result = Factory.LIST(val[1]); loc result, val[0], val[3] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 667)
  def _reduce_192(val, _values, result)
     result = Factory.literal([]) ; loc result, val[0], val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 668)
  def _reduce_193(val, _values, result)
     result = Factory.LIST(val[1]); loc result, val[0], val[3] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 669)
  def _reduce_194(val, _values, result)
     result = Factory.literal([]) ; loc result, val[0], val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 672)
  def _reduce_195(val, _values, result)
     result = Factory.HASH(val[1]); loc result, val[0], val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 673)
  def _reduce_196(val, _values, result)
     result = Factory.HASH(val[1]); loc result, val[0], val[3] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 674)
  def _reduce_197(val, _values, result)
     result = Factory.literal({}) ; loc result, val[0], val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 677)
  def _reduce_198(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 678)
  def _reduce_199(val, _values, result)
     result = val[0].push val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 681)
  def _reduce_200(val, _values, result)
     result = Factory.KEY_ENTRY(val[0], val[2]); loc result, val[1] 
    result
  end
.,.,

# reduce 201 omitted

# reduce 202 omitted

# reduce 203 omitted

module_eval(<<'.,.,', 'egrammar.ra', 689)
  def _reduce_204(val, _values, result)
     result = Factory.literal(val[0][:value]) ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 690)
  def _reduce_205(val, _values, result)
     result = Factory.literal(val[0][:value]) ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 692)
  def _reduce_206(val, _values, result)
     result = Factory.string(val[0], *val[1]) ; loc result, val[0], val[1][-1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 693)
  def _reduce_207(val, _values, result)
     result = Factory.literal(val[0][:value]); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 694)
  def _reduce_208(val, _values, result)
     result = Factory.literal(val[0][:value]); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 695)
  def _reduce_209(val, _values, result)
     result = Factory.literal(val[0][:value]); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 696)
  def _reduce_210(val, _values, result)
     result = [val[0]] + val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 697)
  def _reduce_211(val, _values, result)
     result = Factory.TEXT(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 700)
  def _reduce_212(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 701)
  def _reduce_213(val, _values, result)
     result = [val[0]] + val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 704)
  def _reduce_214(val, _values, result)
     result = Factory.HEREDOC(val[0][:value], val[1]); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 707)
  def _reduce_215(val, _values, result)
     result = Factory.SUBLOCATE(val[0], val[1]); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 708)
  def _reduce_216(val, _values, result)
     result = Factory.SUBLOCATE(val[0], val[1]); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 711)
  def _reduce_217(val, _values, result)
     result = Factory.EPP(val[1], val[2]); loc result, val[0] 
    result
  end
.,.,

# reduce 218 omitted

# reduce 219 omitted

module_eval(<<'.,.,', 'egrammar.ra', 718)
  def _reduce_220(val, _values, result)
     result = nil 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 719)
  def _reduce_221(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 720)
  def _reduce_222(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 723)
  def _reduce_223(val, _values, result)
     result = Factory.RENDER_STRING(val[0][:value]); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 724)
  def _reduce_224(val, _values, result)
     result = Factory.RENDER_EXPR(val[1]); loc result, val[0], val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 725)
  def _reduce_225(val, _values, result)
     result = Factory.RENDER_EXPR(Factory.block_or_expression(*val[2])); loc result, val[0], val[4] 
    result
  end
.,.,

# reduce 226 omitted

# reduce 227 omitted

module_eval(<<'.,.,', 'egrammar.ra', 731)
  def _reduce_228(val, _values, result)
     result = Factory.QREF(val[0][:value])  ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 734)
  def _reduce_229(val, _values, result)
     result = Factory.literal(val[0][:value]); loc result, val[0] 
    result
  end
.,.,

# reduce 230 omitted

module_eval(<<'.,.,', 'egrammar.ra', 740)
  def _reduce_231(val, _values, result)
     result = nil 
    result
  end
.,.,

# reduce 232 omitted

# reduce 233 omitted

# reduce 234 omitted

# reduce 235 omitted

# reduce 236 omitted

# reduce 237 omitted

# reduce 238 omitted

# reduce 239 omitted

# reduce 240 omitted

# reduce 241 omitted

# reduce 242 omitted

# reduce 243 omitted

# reduce 244 omitted

# reduce 245 omitted

# reduce 246 omitted

# reduce 247 omitted

# reduce 248 omitted

# reduce 249 omitted

# reduce 250 omitted

# reduce 251 omitted

# reduce 252 omitted

# reduce 253 omitted

module_eval(<<'.,.,', 'egrammar.ra', 769)
  def _reduce_254(val, _values, result)
     result = nil
    result
  end
.,.,

def _reduce_none(val, _values, result)
  val[0]
end

      end   # class Parser
      end   # module Parser
    end   # module Pops
  end   # module Puppet
