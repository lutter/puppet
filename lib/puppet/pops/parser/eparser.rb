#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.11
# from Racc grammer file "".
#

require 'racc/parser.rb'

require 'puppet'
require 'puppet/pops'

module Puppet
  class ParseError < Puppet::Error; end
  class ImportError < Racc::ParseError; end
  class AlreadyImportedError < ImportError; end
end

module Puppet
  module Pops
    module Parser
      class Parser < Racc::Parser

module_eval(<<'...end egrammar.ra/module_eval...', 'egrammar.ra', 771)

# Make emacs happy
# Local Variables:
# mode: ruby
# End:
...end egrammar.ra/module_eval...
##### State transition tables begin ###

clist = [
'58,61,150,277,59,53,319,54,-240,80,-242,-241,238,133,-129,-238,-243',
'-229,331,332,320,279,280,101,18,104,280,99,100,79,42,379,45,239,47,12',
'111,46,36,39,110,44,37,10,11,278,134,66,17,103,-240,38,-242,-241,15',
'16,-129,-238,-243,-229,58,61,67,79,59,53,238,54,43,399,79,81,35,62,280',
'64,65,63,107,66,48,49,51,50,18,111,314,239,52,110,42,238,45,256,47,113',
'238,46,36,39,254,44,37,255,66,346,111,66,17,66,110,38,239,71,15,16,375',
'239,374,111,58,61,67,110,59,53,231,54,43,348,111,267,35,62,110,64,65',
'365,258,257,48,49,51,50,18,111,339,309,52,110,42,375,45,374,47,12,238',
'46,36,39,69,44,37,10,11,79,111,66,17,66,110,38,58,61,15,16,59,239,269',
'270,58,61,67,256,59,53,275,54,43,72,73,74,35,62,251,64,65,251,356,357',
'48,49,51,50,18,58,61,275,52,59,42,276,45,359,47,12,250,46,36,39,249',
'44,37,10,11,362,335,66,17,314,367,38,368,318,15,16,227,230,75,77,76',
'78,67,228,133,372,238,130,43,376,378,315,35,62,314,64,65,382,251,384',
'48,49,51,50,227,58,61,67,52,59,53,386,54,312,80,301,275,134,62,79,79',
'217,216,71,390,153,119,393,101,18,104,275,99,100,340,42,398,45,148,47',
'12,308,46,36,39,119,44,37,10,11,304,402,66,17,103,378,38,404,405,15',
'16,120,227,119,87,86,410,67,411,82,83,412,302,43,79,71,81,35,62,420',
'64,65,421,68,423,48,49,51,50,424,58,61,425,52,59,53,304,54,416,88,,',
',,,,,,,,,,,,18,,,,,,42,,45,,47,12,,46,36,39,,44,37,10,11,,,66,17,,,38',
',,15,16,,,,,58,61,67,,59,53,,54,43,,,,35,62,,64,65,,,,48,49,51,50,18',
',,,52,,42,,45,,47,113,,46,36,39,,44,37,,,,,66,17,,,38,,,15,16,,,,,58',
'61,67,,59,53,,54,43,,,,35,62,,64,65,,,,48,49,51,50,18,,,,52,,42,,45',
',47,12,,46,36,39,,44,37,10,11,,,66,17,,,38,,,15,16,,,,,58,61,67,,59',
'53,,54,43,,,,35,62,,64,65,,,,48,49,51,50,18,58,61,,52,59,42,,45,,47',
'12,,46,36,39,,44,37,10,11,,,66,17,,,38,,,15,16,,,,,,,67,,133,,,130,43',
',,,35,62,,64,65,,,,48,49,51,50,,58,61,67,52,59,53,,54,414,80,,,134,62',
',,,,,,,,,101,18,104,,99,100,,42,,45,,47,12,,46,36,39,,44,37,10,11,,',
'66,17,103,,38,,,15,16,,,,,58,61,67,,59,53,,54,43,,,81,35,62,,64,65,',
',,48,49,51,50,18,,,,52,,42,,45,,47,113,,46,36,39,,44,37,,,,,66,17,,',
'38,,,15,16,,,,,58,61,67,,59,53,,54,43,,,,35,62,,64,65,,,,48,49,51,50',
'18,,,,52,,42,,45,,47,113,,46,36,39,,44,37,,,,,66,17,,,38,,,15,16,,,',
',58,61,67,,59,53,,54,43,,,,35,62,,64,65,,,,48,49,51,50,18,,,,52,,42',
',45,,47,113,,46,36,39,,44,37,,,,,66,17,,,38,,,15,16,,,,,58,61,67,,59',
'53,,54,43,,,,35,62,,64,65,,,,48,49,51,50,18,58,61,,52,59,42,,45,,47',
'12,,46,36,39,,44,37,10,11,,,66,17,,,38,,,15,16,,,,,,,67,,133,,,130,43',
',,,35,62,,64,65,,,,48,49,51,50,,58,61,67,52,59,53,,54,409,80,,,134,62',
',,,,,,,,,101,18,104,,99,100,,42,,45,,47,12,,46,36,39,,44,37,10,11,,',
'66,17,103,,38,,,15,16,,,,,58,61,67,,59,53,,54,43,,,,35,62,,64,65,,,',
'48,49,51,50,18,,,,52,,42,,45,,47,12,,46,36,39,,44,37,10,11,,,66,17,',
',38,,,15,16,,,,,58,61,67,,59,53,,54,43,,,,35,62,,64,65,,,,48,49,51,50',
'18,,,,52,,42,,45,,47,113,,46,36,39,,44,37,,,,,66,17,,,38,,,15,16,,,',
',58,61,67,,59,53,,54,43,,,,35,62,,64,65,,,,48,49,51,50,18,,,,52,,42',
',45,,47,113,,46,36,39,,44,37,,,,,66,17,,,38,,,15,16,,,,,58,61,67,,59',
'53,,54,43,,,,35,62,,64,65,,,,48,49,51,50,18,,,,52,,42,,45,,47,113,,46',
'36,39,,44,37,,,,,66,17,,,38,,,15,16,,,,,58,61,67,,59,53,,54,43,,,,35',
'62,,64,65,,,,48,49,51,50,18,58,61,,52,59,42,,45,,47,113,,46,36,39,,44',
'37,,,,,66,17,,,38,,,15,16,,,,,,,67,,133,,,130,43,,,,35,62,,64,65,,,',
'48,49,51,50,,58,61,67,52,59,53,,54,322,80,,,134,62,,,,,,,,,,101,18,104',
',99,100,,42,,45,,47,12,,46,36,39,,44,37,10,11,,,66,17,103,,38,,,15,16',
',,,,58,61,67,,59,53,137,54,43,,,,35,62,,64,65,,,,48,49,51,50,18,,,,52',
',42,,45,,47,12,,46,36,39,,44,37,10,11,,,66,17,,,38,,,15,16,,,,,58,61',
'67,,59,53,139,54,43,,,,35,62,,64,65,,,,48,49,51,50,18,,,,52,,42,,45',
',47,12,,46,36,39,,44,37,10,11,,,66,17,,,38,,,15,16,,,,,,,67,,,,,,43',
',,,35,62,,64,65,,,,48,49,51,50,,58,61,,52,59,53,,54,141,80,,,,,,,,,',
',,,,101,18,104,,99,100,,42,,45,,47,12,,46,36,39,,44,37,10,11,,,66,17',
'103,,38,,,15,16,,,,,58,61,67,,59,53,,54,43,,,,35,62,,64,65,,,,48,49',
'51,50,18,,,,52,,42,,45,,47,12,,46,36,39,,44,37,10,11,,,66,17,,,38,,',
'15,16,,,,,,,67,,,,,,43,,,,35,62,,64,65,,,,48,49,51,50,,58,61,,52,59',
'53,,54,324,80,,,,,,,,,,,,,,101,18,104,,99,100,,42,,45,,47,12,,46,36',
'39,,44,37,10,11,,,66,17,103,,38,,,15,16,,,,,58,61,67,,59,53,,54,43,',
',,35,62,,64,65,,,,48,49,51,50,18,,,,52,,42,,45,,47,12,,46,36,39,,44',
'37,10,11,,,66,17,,,38,,,15,16,,,,,58,61,67,,59,53,,152,43,,,,35,62,',
'64,65,,,,48,49,51,50,18,,,,52,,42,,45,,47,113,,46,36,39,,44,37,,,,,66',
'17,,,38,,,15,16,,,,,58,61,67,,59,53,,54,43,,,,35,62,,64,65,,,,48,49',
'51,50,18,,,,52,,42,,45,,47,113,,46,36,39,,44,37,,,,,66,17,,,38,,,15',
'16,,,,,58,61,67,,59,53,,54,43,,,,35,62,,64,65,,,,48,49,51,50,18,,,,52',
',42,,45,,47,12,,46,36,39,,44,37,10,11,,,66,17,,,38,,,15,16,,,,,58,61',
'67,,59,53,,54,43,,,,35,62,,64,65,,,,48,49,51,50,18,,,,52,,42,,45,,47',
'113,,46,36,39,,44,37,,,,,66,17,,,38,,,15,16,,,,,58,61,67,,59,53,,54',
'43,,,,35,62,,64,65,,,,48,49,51,50,18,,,,52,,42,,45,,47,12,,46,36,39',
',44,37,10,11,,,66,17,,,38,,,15,16,,,,,58,61,67,,59,53,,54,43,,,,35,62',
',64,65,,,,48,49,51,50,18,,,,52,,42,,45,,47,12,,46,36,39,,44,37,10,11',
',,66,17,,,38,,,15,16,,,,,58,61,67,,59,53,,54,43,,,,35,62,,64,65,,,,48',
'49,51,50,18,,,,52,,42,,45,,47,12,,46,36,39,,44,37,10,11,,,66,17,,,38',
',,15,16,,,,,58,61,67,,59,53,,54,43,,,,35,62,,64,65,,,,48,49,51,50,18',
',,,52,,42,,45,,47,12,,46,36,39,,44,37,10,11,,,66,17,,,38,,,15,16,,,',
',58,61,67,,59,53,,54,43,,,,35,62,,64,65,,,,48,49,51,50,18,,,,52,,42',
',45,,47,12,,46,36,39,,44,37,10,11,,,66,17,,,38,,,15,16,,,,,58,61,67',
',59,53,,54,43,,,,35,62,,64,65,,,,48,49,51,50,18,,,,52,,42,,45,,47,12',
',46,36,39,,44,37,10,11,,,66,17,,,38,,,15,16,,,,,58,61,67,,59,53,,54',
'43,,,,35,62,,64,65,,,,48,49,51,50,18,,,,52,,42,,45,,47,12,,46,36,39',
',44,37,10,11,,,66,17,,,38,,,15,16,,,,,58,61,67,,59,53,,54,43,,,,35,62',
',64,65,,,,48,49,51,50,18,,,,52,,42,,45,,47,12,,46,36,39,,44,37,10,11',
',,66,17,,,38,,,15,16,,,,,58,61,67,,59,53,,54,43,,,,35,62,,64,65,,,,48',
'49,51,50,18,,,,52,,169,183,175,184,47,176,186,177,36,168,,171,166,,',
',,66,17,187,182,167,,,15,165,,,,,,,67,,,,,185,170,,,,35,62,,64,65,,',
',178,179,181,180,,188,189,,52,58,61,,,59,53,,54,,,,,,,,,,,,,,,,,18,',
',,,,42,,45,,47,113,,46,36,39,,44,37,,,,,66,17,,,38,,,15,16,,,,,58,61',
'67,,59,53,,54,43,,,,35,62,,64,65,,,,48,49,51,50,18,,,,52,,42,,45,,47',
'113,,46,36,39,,44,37,,,,,66,17,,,38,,,15,16,,,,,58,61,67,,59,53,,54',
'43,,,,35,62,,64,65,,,,48,49,51,50,18,,,,52,,42,,45,,47,113,,46,36,39',
',44,37,,,,,66,17,,,38,,,15,16,,,,,58,61,67,,59,53,,54,43,,,,35,62,,64',
'65,,,,48,49,51,50,18,,,,52,,42,,45,,47,113,,46,36,39,,44,37,,,,,66,17',
',,38,,,15,16,,,,,58,61,67,,59,53,,54,43,,,,35,62,,64,65,,,,48,49,51',
'50,18,,,,52,,42,,45,,47,113,,46,36,39,,44,37,,,,,66,17,,,38,,,15,16',
',,,,58,61,67,,59,53,,54,43,,,,35,62,,64,65,,,,48,49,51,50,18,,,,52,',
'42,,45,,47,113,,46,36,39,,44,37,,,,,66,17,,,38,,,15,16,,,,,58,61,67',
',59,53,,54,43,,,,35,62,,64,65,,,,48,49,51,50,18,,,,52,,42,,45,,47,113',
',46,36,39,,44,37,,,,,66,17,,,38,,,15,16,,,,,58,61,67,,59,53,,54,43,',
',,35,62,,64,65,,,,48,49,51,50,18,,,,52,,42,,45,,47,113,,46,36,39,,44',
'37,,,,,66,17,,,38,,,15,16,,,,,58,61,67,,59,53,,54,43,,,,35,62,,64,65',
',,,48,49,51,50,18,,,,52,,42,,45,,47,113,,46,36,39,,44,37,,,,,66,17,',
',38,,,15,16,,,,,58,61,67,,59,53,,54,43,,,,35,62,,64,65,,,,48,49,51,50',
'18,,,,52,,42,,45,,47,113,,46,36,39,,44,37,,,,,66,17,,,38,,,15,16,,,',
',58,61,67,,59,53,,54,43,,,,35,62,,64,65,,,,48,49,51,50,18,,,,52,,42',
',45,,47,113,,46,36,39,,44,37,,,,,66,17,,,38,,,15,16,,,,,58,61,67,,59',
'53,,54,43,,,,35,62,,64,65,,,,48,49,51,50,18,,,,52,,42,,45,,47,113,,46',
'36,39,,44,37,,,,,66,17,,,38,,,15,16,,,,,58,61,67,,59,53,,54,43,,,,35',
'62,,64,65,,,,48,49,51,50,18,,,,52,,42,,45,,47,113,,46,36,39,,44,37,',
',,,66,17,,,38,,,15,16,,,,,58,61,67,,59,53,,54,43,,,,35,62,,64,65,,,',
'48,49,51,50,18,,,,52,,42,,45,,47,113,,46,36,39,,44,37,,,,,66,17,,,38',
',,15,16,,,,,58,61,67,,59,53,,54,43,,,,35,62,,64,65,,,,48,49,51,50,18',
',,,52,,42,,45,,47,113,,46,36,39,,44,37,,,,,66,17,,,38,,,15,16,,,,,58',
'61,67,,59,53,,54,43,,,,35,62,,64,65,,,,48,49,51,50,18,,,,52,,42,,45',
',47,113,,46,36,39,,44,37,,,,,66,17,,,38,,,15,16,,,,,58,61,67,,59,53',
',54,43,,,,35,62,,64,65,,,,48,49,51,50,18,,,,52,,42,,45,,47,113,,46,36',
'39,,44,37,,,,,66,17,,,38,,,15,16,,,,,58,61,67,,59,53,,54,43,,,,35,62',
',64,65,,,,48,49,51,50,18,,,,52,,42,,45,,47,113,,46,36,39,,44,37,,,,',
'66,17,,,38,,,15,16,,,,,58,61,67,,59,53,,54,43,,,,35,62,,64,65,,,,48',
'49,51,50,18,,,,52,,42,,45,,47,113,,46,36,39,,44,37,,,,,66,17,,,38,,',
'15,16,,,,,58,61,67,,59,53,,54,43,,,,35,62,,64,65,,,,48,49,51,50,18,',
',,52,,42,,45,,47,113,,46,36,39,,44,37,,,,,66,17,,,38,,,15,16,,,,,58',
'61,67,,59,53,,54,43,,,213,35,62,,64,65,,,,48,49,51,50,18,215,,,52,,42',
',45,,47,12,,46,36,39,,44,37,10,11,,,66,17,,,38,,,15,16,,,,,58,61,67',
',59,53,,54,43,,,,35,62,,64,65,,,,48,49,51,50,18,,,,52,,42,,45,,47,113',
',46,36,39,,44,37,,,,,66,17,,,38,,,15,16,,,,,58,61,67,,59,53,,54,43,',
',,35,62,,64,65,,,,48,49,51,50,18,,,,52,,42,,45,,47,113,,46,36,39,,44',
'37,,,,,66,17,,,38,,,15,16,,,,,58,61,67,,59,53,,54,43,,,,35,62,,64,65',
',,,48,49,51,50,18,,,,52,,42,,45,,47,113,,46,36,39,,44,37,,,,,66,17,',
',38,,,15,16,,,,,58,61,67,,59,53,,54,43,,,,35,62,,64,65,,,,48,49,51,50',
'18,,,,52,,42,,45,,47,113,,46,36,39,,44,37,,,,,66,17,,,38,,,15,16,,,',
',58,61,67,,59,53,,54,43,,,,35,62,,64,65,,,,48,49,51,50,18,,,,52,,42',
',45,,47,113,,46,36,39,,44,37,,,,,66,17,,,38,,,15,16,,,,,58,61,67,,59',
'53,,54,43,,276,,35,62,,64,65,,,,48,49,51,50,18,,,,52,,42,,45,,47,113',
',46,36,39,,44,37,,,,,66,17,,,38,,,15,16,,,,,58,61,67,,59,53,,54,43,',
',,35,62,,64,65,,,,48,49,51,50,18,,,,52,,42,,45,,47,113,,46,36,39,,44',
'37,,,,,66,17,,,38,,,15,16,,,,,58,61,67,,59,53,,54,43,,,,35,62,,64,65',
',,,48,49,51,50,18,,,,52,,42,,45,,47,12,,46,36,39,,44,37,10,11,,,66,17',
',,38,,,15,16,,,,,,,67,,,,,,43,,,,35,62,,64,65,,,,48,49,51,50,,58,61',
',52,59,53,,54,341,80,,,,,,,,,,,,,,101,18,104,,99,100,,42,,45,,47,12',
',46,36,39,,44,37,10,11,,,66,17,103,,38,,,15,16,,84,85,87,86,,67,,82',
'83,,,43,,,81,35,62,,64,65,,,,48,49,51,50,,58,61,,52,59,53,,54,380,88',
',,,,,,,,,,,,,,18,,,,,,42,,45,,47,113,,46,36,39,,44,37,,,,,66,17,,,38',
',,15,16,,,,,58,61,67,,59,53,,54,43,,,,35,62,,64,65,,,,48,49,51,50,18',
',,,52,,42,,45,,47,12,,46,36,39,,44,37,10,11,,,66,17,,,38,,,15,16,,,',
',58,61,67,,59,53,,54,43,,,,35,62,,64,65,,,,48,49,51,50,18,,,,52,,42',
',45,,47,12,,46,36,39,,44,37,10,11,,,66,17,,,38,,,15,16,,,,,58,61,67',
',59,53,,54,43,,,,35,62,,64,65,,,,48,49,51,50,18,,,,52,,42,,45,,47,12',
',46,36,39,,44,37,10,11,,,66,17,,,38,,,15,16,,,,,58,61,67,,59,53,,54',
'43,,,,35,62,,64,65,,,,48,49,51,50,18,,,,52,,42,,45,,47,113,,46,36,39',
',44,37,,,,,66,17,,,38,,,15,16,,,,,,,67,,,,,,43,,,,35,62,,64,65,,,,48',
'49,51,50,,58,61,,52,59,53,,54,141,,,,,,,,,,,,,,,,18,,,,,,42,,45,,47',
'12,,46,36,39,,44,37,10,11,,,66,17,,,38,,,15,16,,,,,58,61,67,,59,53,',
'54,43,,,,35,62,,64,65,,,,48,49,51,50,18,243,,,52,,42,,45,,47,12,,46',
'36,39,,44,37,10,11,,,66,17,,,38,,,15,16,,,,,58,61,67,,59,53,,54,43,',
',,35,62,,64,65,,,,48,49,51,50,18,,,,52,,42,,45,,47,12,,46,36,39,,44',
'37,10,11,,,66,17,,,38,,,15,16,,,,,58,61,67,,59,53,,54,43,,,,35,62,,64',
'65,,,,48,49,51,50,18,,,,52,,42,,45,,47,113,,46,36,39,,44,37,,,,,66,17',
',,38,,,15,16,,,,,58,61,67,,59,53,,54,43,,,,35,62,,64,65,,,,48,49,51',
'50,18,,,,52,,42,,45,,47,113,,46,36,39,,44,37,,,,,66,17,,,38,,,15,16',
',,,,58,61,67,,59,53,,54,43,,,,35,62,,64,65,,,,48,49,51,50,18,,,,52,',
'42,,45,,47,113,,46,36,39,,44,37,,,,,66,17,,,38,,,15,16,,,,,58,61,67',
',59,53,,54,43,,,,35,62,,64,65,,,,48,49,51,50,18,,,,52,,42,,45,,47,113',
',46,36,39,,44,37,,,,,66,17,,,38,,,15,16,,,,,58,61,67,,59,53,,54,43,',
',,35,62,,64,65,,,,48,49,51,50,18,,,,52,,42,,45,,47,113,,46,36,39,,44',
'37,,,,,66,17,,,38,,,15,16,,,,,58,61,67,,59,53,,54,43,,,,35,62,,64,65',
',,,48,49,51,50,18,,,,52,,42,,45,,47,113,,46,36,39,,44,37,,,,,66,17,',
',38,,,15,16,,,,,58,61,67,,59,53,,54,43,,,,35,62,,64,65,,,,48,49,51,50',
'18,,,,52,,42,,45,,47,113,,46,36,39,,44,37,,,,,66,17,,,38,,,15,16,,,',
',,,67,,,,,,43,,,,35,62,,64,65,80,,,48,49,51,50,,,,,52,96,91,101,,104',
',99,100,,92,94,93,95,,,,,,,,,,,,,,,,103,,,,98,97,,,84,85,87,86,89,90',
',82,83,80,,246,,,81,,,,,,,96,91,101,,104,,99,100,,92,94,93,95,,,,88',
',,,,,,,,,,,103,,,,98,97,,,84,85,87,86,89,90,,82,83,80,,245,,,81,,,,',
',,96,91,101,,104,,99,100,,92,94,93,95,,,,88,,,,,,,,,,,,103,,,,98,97',
',,84,85,87,86,89,90,,82,83,80,,244,,,81,,,,,,,96,91,101,,104,80,99,100',
',92,94,93,95,,,,88,,,101,,104,,99,100,,,,103,,,,98,97,,80,84,85,87,86',
'89,90,,82,83,103,,96,91,101,81,104,80,99,100,,92,94,93,95,82,83,,,,',
'101,81,104,,99,100,,88,,103,,,,98,97,,80,84,85,87,86,89,90,,82,83,103',
',96,91,101,81,104,,99,100,,92,94,93,95,82,83,,,,,,81,,,,,,88,,103,,',
',98,97,,,84,85,87,86,89,90,,82,83,,,,,,81,,,80,,,,,,,,269,270,,,96,91',
'101,305,104,80,99,100,88,92,94,93,95,,,,,,,101,,104,,99,100,,,,103,',
',,98,97,,80,84,85,87,86,89,90,,82,83,103,,96,91,101,81,104,,99,100,',
'92,94,93,95,82,83,,,,,,81,,,,,,88,,103,,,,98,97,,,84,85,87,86,89,90',
'80,82,83,,,281,,,81,,,,96,91,101,,104,,99,100,,92,94,93,95,,,,,,,88',
',,,,,,,,103,,,,98,97,,80,84,85,87,86,89,90,,82,83,,,96,91,101,81,104',
',99,100,,92,94,93,95,,,,,,,,,,,,,,88,,103,,,,,97,,80,84,85,87,86,89',
'90,,82,83,,,96,91,101,81,104,,99,100,,92,94,93,95,,,,,,,,,,,,,,88,,103',
',,,98,97,,,84,85,87,86,89,90,80,82,83,,,,,,81,,,,96,91,101,273,104,',
'99,100,80,92,94,93,95,,,,,,,88,,,101,,104,,99,100,103,,,,98,97,,,84',
'85,87,86,89,90,,82,83,,,,103,,81,,,,,,84,85,87,86,89,90,80,82,83,,,',
',,81,,,88,96,91,101,,104,,99,100,,92,94,93,95,,,,,,,88,,,,,,,,,103,',
',,98,97,,80,84,85,87,86,89,90,,82,83,,,96,91,101,81,104,,99,100,,92',
'94,93,95,,,80,,,,,,,,,,,88,,103,101,,104,,99,100,80,84,85,87,86,89,90',
',82,83,,,,91,101,81,104,,99,100,103,92,,,,,,,84,85,87,86,,,,82,83,,88',
',103,,81,,,,,,84,85,87,86,89,90,80,82,83,,,,,,81,,,88,96,91,101,,104',
',99,100,80,92,94,93,95,,,,,,,88,,,101,,104,,99,100,103,,,,98,97,,,84',
'85,87,86,89,90,,82,83,,,,103,,81,,,,,,,,87,86,,,80,82,83,,,,,,81,,,88',
'96,91,101,,104,,99,100,80,92,94,93,95,,,,,,,88,,91,101,,104,,99,100',
'103,92,,,98,97,,,84,85,87,86,89,90,,82,83,,,,103,,81,,,,,,84,85,87,86',
'89,90,80,82,83,,,,,,81,,,88,96,91,101,,104,,99,100,,92,94,93,95,,,,',
',,88,,,,,,,,,103,,,,98,97,,80,84,85,87,86,89,90,,82,83,,,96,91,101,81',
'104,80,99,100,,92,94,93,95,,,,,,,101,,104,,99,100,,88,,103,,,,98,97',
',,84,85,87,86,89,90,,82,83,103,,,,,81,,,84,85,87,86,89,90,,82,83,80',
',,,,81,,,,,,88,,91,101,,104,80,99,100,,92,,,,,,,88,,91,101,,104,,99',
'100,,92,,103,,,,,,,,84,85,87,86,89,90,,82,83,103,,,,,81,,,84,85,87,86',
'89,90,,82,83,,293,183,292,184,81,290,186,294,,287,88,289,291,,,,,,,187',
'182,295,,,,288,,88,,,,,,,,,,185,296,,,,,,,,,,,,299,300,298,297,,188',
'189,293,183,292,184,,290,186,294,,287,,289,291,,,,,,,187,182,295,,,',
'288,,,,,,,,,,,,185,296,,,,,,,,,,,,299,300,298,297,,188,189,293,183,292',
'184,,290,186,294,,287,,289,291,,,,,,,187,182,295,,,,288,,,,,,,,,,,,185',
'296,,,,,,,,,,,,299,300,298,297,,188,189,293,183,292,184,,290,186,294',
',287,,289,291,,,,,,,187,182,295,,,,288,,,,,,,,,,,,185,296,,,,,,,,,,',
',299,300,298,297,,188,189' ]
        racc_action_table = arr = ::Array.new(6769, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

clist = [
'0,0,63,174,0,0,242,0,180,193,178,181,240,250,168,167,179,166,247,247',
'242,191,325,193,0,193,191,193,193,161,0,325,0,240,0,0,45,0,0,0,45,0',
'0,0,0,174,250,0,0,193,180,0,178,181,0,0,168,167,179,166,411,411,0,160',
'411,411,314,411,0,371,159,193,0,0,371,0,0,0,12,314,0,0,0,0,411,113,266',
'314,0,113,411,119,411,271,411,411,150,411,411,411,140,411,411,140,119',
'272,12,411,411,150,12,411,119,154,411,411,372,150,372,330,4,4,411,330',
'4,4,119,4,411,274,308,150,411,411,308,411,411,308,145,145,411,411,411',
'411,4,175,252,227,411,175,4,322,4,322,4,4,227,4,4,4,4,4,4,4,4,162,176',
'4,4,227,176,4,148,148,4,4,148,227,346,346,405,405,4,143,405,405,164',
'405,4,7,7,7,4,4,138,4,4,136,282,284,4,4,4,4,405,177,177,286,4,177,405',
'288,405,303,405,405,128,405,405,405,126,405,405,405,405,306,248,405',
'405,310,311,405,313,241,405,405,125,118,7,7,7,7,405,116,177,321,239',
'177,405,323,324,238,405,405,232,405,405,328,214,333,405,405,405,405',
'108,230,230,177,405,230,230,345,230,230,195,219,347,177,177,106,105',
'102,101,70,355,68,357,358,195,230,195,361,195,195,253,230,366,230,62',
'230,230,225,230,230,230,215,230,230,230,230,222,375,230,230,195,376',
'230,378,379,230,230,41,383,40,195,195,388,230,389,195,195,395,221,230',
'8,5,195,230,230,406,230,230,408,1,413,230,230,230,230,415,404,404,417',
'230,404,404,422,404,404,195,,,,,,,,,,,,,,,404,,,,,,404,,404,,404,404',
',404,404,404,,404,404,404,404,,,404,404,,,404,,,404,404,,,,,213,213',
'404,,213,213,,213,404,,,,404,404,,404,404,,,,404,404,404,404,213,,,',
'404,,213,,213,,213,213,,213,213,213,,213,213,,,,,213,213,,,213,,,213',
'213,,,,,10,10,213,,10,10,,10,213,,,,213,213,,213,213,,,,213,213,213',
'213,10,,,,213,,10,,10,,10,10,,10,10,10,,10,10,10,10,,,10,10,,,10,,,10',
'10,,,,,11,11,10,,11,11,,11,10,,,,10,10,,10,10,,,,10,10,10,10,11,249',
'249,,10,249,11,,11,,11,11,,11,11,11,,11,11,11,11,,,11,11,,,11,,,11,11',
',,,,,,11,,249,,,249,11,,,,11,11,,11,11,,,,11,11,11,11,,402,402,249,11',
'402,402,,402,402,194,,,249,249,,,,,,,,,,194,402,194,,194,194,,402,,402',
',402,402,,402,402,402,,402,402,402,402,,,402,402,194,,402,,,402,402',
',,,,15,15,402,,15,15,,15,402,,,194,402,402,,402,402,,,,402,402,402,402',
'15,,,,402,,15,,15,,15,15,,15,15,15,,15,15,,,,,15,15,,,15,,,15,15,,,',
',16,16,15,,16,16,,16,15,,,,15,15,,15,15,,,,15,15,15,15,16,,,,15,,16',
',16,,16,16,,16,16,16,,16,16,,,,,16,16,,,16,,,16,16,,,,,17,17,16,,17',
'17,,17,16,,,,16,16,,16,16,,,,16,16,16,16,17,,,,16,,17,,17,,17,17,,17',
'17,17,,17,17,,,,,17,17,,,17,,,17,17,,,,,18,18,17,,18,18,,18,17,,,,17',
'17,,17,17,,,,17,17,17,17,18,335,335,,17,335,18,,18,,18,18,,18,18,18',
',18,18,18,18,,,18,18,,,18,,,18,18,,,,,,,18,,335,,,335,18,,,,18,18,,18',
'18,,,,18,18,18,18,,384,384,335,18,384,384,,384,384,114,,,335,335,,,',
',,,,,,114,384,114,,114,114,,384,,384,,384,384,,384,384,384,,384,384',
'384,384,,,384,384,114,,384,,,384,384,,,,,382,382,384,,382,382,,382,384',
',,,384,384,,384,384,,,,384,384,384,384,382,,,,384,,382,,382,,382,382',
',382,382,382,,382,382,382,382,,,382,382,,,382,,,382,382,,,,,42,42,382',
',42,42,,42,382,,,,382,382,,382,382,,,,382,382,382,382,42,,,,382,,42',
',42,,42,42,,42,42,42,,42,42,,,,,42,42,,,42,,,42,42,,,,,43,43,42,,43',
'43,,43,42,,,,42,42,,42,42,,,,42,42,42,42,43,,,,42,,43,,43,,43,43,,43',
'43,43,,43,43,,,,,43,43,,,43,,,43,43,,,,,44,44,43,,44,44,,44,43,,,,43',
'43,,43,43,,,,43,43,43,43,44,,,,43,,44,,44,,44,44,,44,44,44,,44,44,,',
',,44,44,,,44,,,44,44,,,,,374,374,44,,374,374,,374,44,,,,44,44,,44,44',
',,,44,44,44,44,374,46,46,,44,46,374,,374,,374,374,,374,374,374,,374',
'374,,,,,374,374,,,374,,,374,374,,,,,,,374,,46,,,46,374,,,,374,374,,374',
'374,,,,374,374,374,374,,244,244,46,374,244,244,,244,244,115,,,46,46',
',,,,,,,,,115,244,115,,115,115,,244,,244,,244,244,,244,244,244,,244,244',
'244,244,,,244,244,115,,244,,,244,244,,,,,52,52,244,,52,52,52,52,244',
',,,244,244,,244,244,,,,244,244,244,244,52,,,,244,,52,,52,,52,52,,52',
'52,52,,52,52,52,52,,,52,52,,,52,,,52,52,,,,,53,53,52,,53,53,53,53,52',
',,,52,52,,52,52,,,,52,52,52,52,53,,,,52,,53,,53,,53,53,,53,53,53,,53',
'53,53,53,,,53,53,,,53,,,53,53,,,,,,,53,,,,,,53,,,,53,53,,53,53,,,,53',
'53,53,53,,54,54,,53,54,54,,54,54,192,,,,,,,,,,,,,,192,54,192,,192,192',
',54,,54,,54,54,,54,54,54,,54,54,54,54,,,54,54,192,,54,,,54,54,,,,,60',
'60,54,,60,60,,60,54,,,,54,54,,54,54,,,,54,54,54,54,60,,,,54,,60,,60',
',60,60,,60,60,60,,60,60,60,60,,,60,60,,,60,,,60,60,,,,,,,60,,,,,,60',
',,,60,60,,60,60,,,,60,60,60,60,,245,245,,60,245,245,,245,245,112,,,',
',,,,,,,,,,112,245,112,,112,112,,245,,245,,245,245,,245,245,245,,245',
'245,245,245,,,245,245,112,,245,,,245,245,,,,,362,362,245,,362,362,,362',
'245,,,,245,245,,245,245,,,,245,245,245,245,362,,,,245,,362,,362,,362',
'362,,362,362,362,,362,362,362,362,,,362,362,,,362,,,362,362,,,,,65,65',
'362,,65,65,,65,362,,,,362,362,,362,362,,,,362,362,362,362,65,,,,362',
',65,,65,,65,65,,65,65,65,,65,65,,,,,65,65,,,65,,,65,65,,,,,356,356,65',
',356,356,,356,65,,,,65,65,,65,65,,,,65,65,65,65,356,,,,65,,356,,356',
',356,356,,356,356,356,,356,356,,,,,356,356,,,356,,,356,356,,,,,69,69',
'356,,69,69,,69,356,,,,356,356,,356,356,,,,356,356,356,356,69,,,,356',
',69,,69,,69,69,,69,69,69,,69,69,69,69,,,69,69,,,69,,,69,69,,,,,246,246',
'69,,246,246,,246,69,,,,69,69,,69,69,,,,69,69,69,69,246,,,,69,,246,,246',
',246,246,,246,246,246,,246,246,,,,,246,246,,,246,,,246,246,,,,,71,71',
'246,,71,71,,71,246,,,,246,246,,246,246,,,,246,246,246,246,71,,,,246',
',71,,71,,71,71,,71,71,71,,71,71,71,71,,,71,71,,,71,,,71,71,,,,,72,72',
'71,,72,72,,72,71,,,,71,71,,71,71,,,,71,71,71,71,72,,,,71,,72,,72,,72',
'72,,72,72,72,,72,72,72,72,,,72,72,,,72,,,72,72,,,,,73,73,72,,73,73,',
'73,72,,,,72,72,,72,72,,,,72,72,72,72,73,,,,72,,73,,73,,73,73,,73,73',
'73,,73,73,73,73,,,73,73,,,73,,,73,73,,,,,74,74,73,,74,74,,74,73,,,,73',
'73,,73,73,,,,73,73,73,73,74,,,,73,,74,,74,,74,74,,74,74,74,,74,74,74',
'74,,,74,74,,,74,,,74,74,,,,,75,75,74,,75,75,,75,74,,,,74,74,,74,74,',
',,74,74,74,74,75,,,,74,,75,,75,,75,75,,75,75,75,,75,75,75,75,,,75,75',
',,75,,,75,75,,,,,76,76,75,,76,76,,76,75,,,,75,75,,75,75,,,,75,75,75',
'75,76,,,,75,,76,,76,,76,76,,76,76,76,,76,76,76,76,,,76,76,,,76,,,76',
'76,,,,,77,77,76,,77,77,,77,76,,,,76,76,,76,76,,,,76,76,76,76,77,,,,76',
',77,,77,,77,77,,77,77,77,,77,77,77,77,,,77,77,,,77,,,77,77,,,,,78,78',
'77,,78,78,,78,77,,,,77,77,,77,77,,,,77,77,77,77,78,,,,77,,78,,78,,78',
'78,,78,78,78,,78,78,78,78,,,78,78,,,78,,,78,78,,,,,79,79,78,,79,79,',
'79,78,,,,78,78,,78,78,,,,78,78,78,78,79,,,,78,,79,79,79,79,79,79,79',
'79,79,79,,79,79,,,,,79,79,79,79,79,,,79,79,,,,,,,79,,,,,79,79,,,,79',
'79,,79,79,,,,79,79,79,79,,79,79,,79,80,80,,,80,80,,80,,,,,,,,,,,,,,',
',,80,,,,,,80,,80,,80,80,,80,80,80,,80,80,,,,,80,80,,,80,,,80,80,,,,',
'81,81,80,,81,81,,81,80,,,,80,80,,80,80,,,,80,80,80,80,81,,,,80,,81,',
'81,,81,81,,81,81,81,,81,81,,,,,81,81,,,81,,,81,81,,,,,82,82,81,,82,82',
',82,81,,,,81,81,,81,81,,,,81,81,81,81,82,,,,81,,82,,82,,82,82,,82,82',
'82,,82,82,,,,,82,82,,,82,,,82,82,,,,,83,83,82,,83,83,,83,82,,,,82,82',
',82,82,,,,82,82,82,82,83,,,,82,,83,,83,,83,83,,83,83,83,,83,83,,,,,83',
'83,,,83,,,83,83,,,,,84,84,83,,84,84,,84,83,,,,83,83,,83,83,,,,83,83',
'83,83,84,,,,83,,84,,84,,84,84,,84,84,84,,84,84,,,,,84,84,,,84,,,84,84',
',,,,85,85,84,,85,85,,85,84,,,,84,84,,84,84,,,,84,84,84,84,85,,,,84,',
'85,,85,,85,85,,85,85,85,,85,85,,,,,85,85,,,85,,,85,85,,,,,86,86,85,',
'86,86,,86,85,,,,85,85,,85,85,,,,85,85,85,85,86,,,,85,,86,,86,,86,86',
',86,86,86,,86,86,,,,,86,86,,,86,,,86,86,,,,,87,87,86,,87,87,,87,86,',
',,86,86,,86,86,,,,86,86,86,86,87,,,,86,,87,,87,,87,87,,87,87,87,,87',
'87,,,,,87,87,,,87,,,87,87,,,,,88,88,87,,88,88,,88,87,,,,87,87,,87,87',
',,,87,87,87,87,88,,,,87,,88,,88,,88,88,,88,88,88,,88,88,,,,,88,88,,',
'88,,,88,88,,,,,89,89,88,,89,89,,89,88,,,,88,88,,88,88,,,,88,88,88,88',
'89,,,,88,,89,,89,,89,89,,89,89,89,,89,89,,,,,89,89,,,89,,,89,89,,,,',
'90,90,89,,90,90,,90,89,,,,89,89,,89,89,,,,89,89,89,89,90,,,,89,,90,',
'90,,90,90,,90,90,90,,90,90,,,,,90,90,,,90,,,90,90,,,,,91,91,90,,91,91',
',91,90,,,,90,90,,90,90,,,,90,90,90,90,91,,,,90,,91,,91,,91,91,,91,91',
'91,,91,91,,,,,91,91,,,91,,,91,91,,,,,92,92,91,,92,92,,92,91,,,,91,91',
',91,91,,,,91,91,91,91,92,,,,91,,92,,92,,92,92,,92,92,92,,92,92,,,,,92',
'92,,,92,,,92,92,,,,,93,93,92,,93,93,,93,92,,,,92,92,,92,92,,,,92,92',
'92,92,93,,,,92,,93,,93,,93,93,,93,93,93,,93,93,,,,,93,93,,,93,,,93,93',
',,,,94,94,93,,94,94,,94,93,,,,93,93,,93,93,,,,93,93,93,93,94,,,,93,',
'94,,94,,94,94,,94,94,94,,94,94,,,,,94,94,,,94,,,94,94,,,,,95,95,94,',
'95,95,,95,94,,,,94,94,,94,94,,,,94,94,94,94,95,,,,94,,95,,95,,95,95',
',95,95,95,,95,95,,,,,95,95,,,95,,,95,95,,,,,96,96,95,,96,96,,96,95,',
',,95,95,,95,95,,,,95,95,95,95,96,,,,95,,96,,96,,96,96,,96,96,96,,96',
'96,,,,,96,96,,,96,,,96,96,,,,,97,97,96,,97,97,,97,96,,,,96,96,,96,96',
',,,96,96,96,96,97,,,,96,,97,,97,,97,97,,97,97,97,,97,97,,,,,97,97,,',
'97,,,97,97,,,,,98,98,97,,98,98,,98,97,,,,97,97,,97,97,,,,97,97,97,97',
'98,,,,97,,98,,98,,98,98,,98,98,98,,98,98,,,,,98,98,,,98,,,98,98,,,,',
'99,99,98,,99,99,,99,98,,,,98,98,,98,98,,,,98,98,98,98,99,,,,98,,99,',
'99,,99,99,,99,99,99,,99,99,,,,,99,99,,,99,,,99,99,,,,,100,100,99,,100',
'100,,100,99,,,99,99,99,,99,99,,,,99,99,99,99,100,100,,,99,,100,,100',
',100,100,,100,100,100,,100,100,100,100,,,100,100,,,100,,,100,100,,,',
',171,171,100,,171,171,,171,100,,,,100,100,,100,100,,,,100,100,100,100',
'171,,,,100,,171,,171,,171,171,,171,171,171,,171,171,,,,,171,171,,,171',
',,171,171,,,,,280,280,171,,280,280,,280,171,,,,171,171,,171,171,,,,171',
'171,171,171,280,,,,171,,280,,280,,280,280,,280,280,280,,280,280,,,,',
'280,280,,,280,,,280,280,,,,,103,103,280,,103,103,,103,280,,,,280,280',
',280,280,,,,280,280,280,280,103,,,,280,,103,,103,,103,103,,103,103,103',
',103,103,,,,,103,103,,,103,,,103,103,,,,,104,104,103,,104,104,,104,103',
',,,103,103,,103,103,,,,103,103,103,103,104,,,,103,,104,,104,,104,104',
',104,104,104,,104,104,,,,,104,104,,,104,,,104,104,,,,,169,169,104,,169',
'169,,169,104,,,,104,104,,104,104,,,,104,104,104,104,169,,,,104,,169',
',169,,169,169,,169,169,169,,169,169,,,,,169,169,,,169,,,169,169,,,,',
'165,165,169,,165,165,,165,169,,165,,169,169,,169,169,,,,169,169,169',
'169,165,,,,169,,165,,165,,165,165,,165,165,165,,165,165,,,,,165,165',
',,165,,,165,165,,,,,107,107,165,,107,107,,107,165,,,,165,165,,165,165',
',,,165,165,165,165,107,,,,165,,107,,107,,107,107,,107,107,107,,107,107',
',,,,107,107,,,107,,,107,107,,,,,251,251,107,,251,251,,251,107,,,,107',
'107,,107,107,,,,107,107,107,107,251,,,,107,,251,,251,,251,251,,251,251',
'251,,251,251,251,251,,,251,251,,,251,,,251,251,,,,,,,251,,,,,,251,,',
',251,251,,251,251,,,,251,251,251,251,,255,255,,251,255,255,,255,255',
'201,,,,,,,,,,,,,,201,255,201,,201,201,,255,,255,,255,255,,255,255,255',
',255,255,255,255,,,255,255,201,,255,,,255,255,,201,201,201,201,,255',
',201,201,,,255,,,201,255,255,,255,255,,,,255,255,255,255,,326,326,,255',
'326,326,,326,326,201,,,,,,,,,,,,,,,326,,,,,,326,,326,,326,326,,326,326',
'326,,326,326,,,,,326,326,,,326,,,326,326,,,,,256,256,326,,256,256,,256',
'326,,,,326,326,,326,326,,,,326,326,326,326,256,,,,326,,256,,256,,256',
'256,,256,256,256,,256,256,256,256,,,256,256,,,256,,,256,256,,,,,261',
'261,256,,261,261,,261,256,,,,256,256,,256,256,,,,256,256,256,256,261',
',,,256,,261,,261,,261,261,,261,261,261,,261,261,261,261,,,261,261,,',
'261,,,261,261,,,,,319,319,261,,319,319,,319,261,,,,261,261,,261,261',
',,,261,261,261,261,319,,,,261,,319,,319,,319,319,,319,319,319,,319,319',
'319,319,,,319,319,,,319,,,319,319,,,,,318,318,319,,318,318,,318,319',
',,,319,319,,319,319,,,,319,319,319,319,318,,,,319,,318,,318,,318,318',
',318,318,318,,318,318,,,,,318,318,,,318,,,318,318,,,,,,,318,,,,,,318',
',,,318,318,,318,318,,,,318,318,318,318,,152,152,,318,152,152,,152,152',
',,,,,,,,,,,,,,,152,,,,,,152,,152,,152,152,,152,152,152,,152,152,152',
'152,,,152,152,,,152,,,152,152,,,,,120,120,152,,120,120,,120,152,,,,152',
'152,,152,152,,,,152,152,152,152,120,120,,,152,,120,,120,,120,120,,120',
'120,120,,120,120,120,120,,,120,120,,,120,,,120,120,,,,,149,149,120,',
'149,149,,149,120,,,,120,120,,120,120,,,,120,120,120,120,149,,,,120,',
'149,,149,,149,149,,149,149,149,,149,149,149,149,,,149,149,,,149,,,149',
'149,,,,,276,276,149,,276,276,,276,149,,,,149,149,,149,149,,,,149,149',
'149,149,276,,,,149,,276,,276,,276,276,,276,276,276,,276,276,,,,,276',
'276,,,276,,,276,276,,,,,277,277,276,,277,277,,277,276,,,,276,276,,276',
'276,,,,276,276,276,276,277,,,,276,,277,,277,,277,277,,277,277,277,,277',
'277,,,,,277,277,,,277,,,277,277,,,,,315,315,277,,315,315,,315,277,,',
',277,277,,277,277,,,,277,277,277,277,315,,,,277,,315,,315,,315,315,',
'315,315,315,,315,315,,,,,315,315,,,315,,,315,315,,,,,278,278,315,,278',
'278,,278,315,,,,315,315,,315,315,,,,315,315,315,315,278,,,,315,,278',
',278,,278,278,,278,278,278,,278,278,,,,,278,278,,,278,,,278,278,,,,',
'304,304,278,,304,304,,304,278,,,,278,278,,278,278,,,,278,278,278,278',
'304,,,,278,,304,,304,,304,304,,304,304,304,,304,304,,,,,304,304,,,304',
',,304,304,,,,,281,281,304,,281,281,,281,304,,,,304,304,,304,304,,,,304',
'304,304,304,281,,,,304,,281,,281,,281,281,,281,281,281,,281,281,,,,',
'281,281,,,281,,,281,281,,,,,170,170,281,,170,170,,170,281,,,,281,281',
',281,281,,,,281,281,281,281,170,,,,281,,170,,170,,170,170,,170,170,170',
',170,170,,,,,170,170,,,170,,,170,170,,,,,,,170,,,,,,170,,,,170,170,',
'170,170,352,,,170,170,170,170,,,,,170,352,352,352,,352,,352,352,,352',
'352,352,352,,,,,,,,,,,,,,,,352,,,,352,352,,,352,352,352,352,352,352',
',352,352,124,,124,,,352,,,,,,,124,124,124,,124,,124,124,,124,124,124',
'124,,,,352,,,,,,,,,,,,124,,,,124,124,,,124,124,124,124,124,124,,124',
'124,123,,123,,,124,,,,,,,123,123,123,,123,,123,123,,123,123,123,123',
',,,124,,,,,,,,,,,,123,,,,123,123,,,123,123,123,123,123,123,,123,123',
'121,,121,,,123,,,,,,,121,121,121,,121,197,121,121,,121,121,121,121,',
',,123,,,197,,197,,197,197,,,,121,,,,121,121,,218,121,121,121,121,121',
'121,,121,121,197,,218,218,218,121,218,198,218,218,,218,218,218,218,197',
'197,,,,,198,197,198,,198,198,,121,,218,,,,218,218,,151,218,218,218,218',
'218,218,,218,218,198,,151,151,151,218,151,,151,151,,151,151,151,151',
'198,198,,,,,,198,,,,,,218,,151,,,,151,151,,,151,151,151,151,151,151',
',151,151,,,,,,151,,,223,,,,,,,,151,151,,,223,223,223,223,223,199,223',
'223,151,223,223,223,223,,,,,,,199,,199,,199,199,,,,223,,,,223,223,,9',
'223,223,223,223,223,223,,223,223,199,,9,9,9,223,9,,9,9,,9,9,9,9,199',
'199,,,,,,199,,,,,,223,,9,,,,9,9,,,9,9,9,9,9,9,210,9,9,,,210,,,9,,,,210',
'210,210,,210,,210,210,,210,210,210,210,,,,,,,9,,,,,,,,,210,,,,210,210',
',209,210,210,210,210,210,210,,210,210,,,209,209,209,210,209,,209,209',
',209,209,209,209,,,,,,,,,,,,,,210,,209,,,,,209,,190,209,209,209,209',
'209,209,,209,209,,,190,190,190,209,190,,190,190,,190,190,190,190,,,',
',,,,,,,,,,209,,190,,,,190,190,,,190,190,190,190,190,190,163,190,190',
',,,,,190,,,,163,163,163,163,163,,163,163,202,163,163,163,163,,,,,,,190',
',,202,,202,,202,202,163,,,,163,163,,,163,163,163,163,163,163,,163,163',
',,,202,,163,,,,,,202,202,202,202,202,202,350,202,202,,,,,,202,,,163',
'350,350,350,,350,,350,350,,350,350,350,350,,,,,,,202,,,,,,,,,350,,,',
'350,350,,208,350,350,350,350,350,350,,350,350,,,208,208,208,350,208',
',208,208,,208,208,208,208,,,200,,,,,,,,,,,350,,208,200,,200,,200,200',
'207,208,208,208,208,208,208,,208,208,,,,207,207,208,207,,207,207,200',
'207,,,,,,,200,200,200,200,,,,200,200,,208,,207,,200,,,,,,207,207,207',
'207,207,207,351,207,207,,,,,,207,,,200,351,351,351,,351,,351,351,196',
'351,351,351,351,,,,,,,207,,,196,,196,,196,196,351,,,,351,351,,,351,351',
'351,351,351,351,,351,351,,,,196,,351,,,,,,,,196,196,,,353,196,196,,',
',,,196,,,351,353,353,353,,353,,353,353,205,353,353,353,353,,,,,,,196',
',205,205,,205,,205,205,353,205,,,353,353,,,353,353,353,353,353,353,',
'353,353,,,,205,,353,,,,,,205,205,205,205,205,205,354,205,205,,,,,,205',
',,353,354,354,354,,354,,354,354,,354,354,354,354,,,,,,,205,,,,,,,,,354',
',,,354,354,,370,354,354,354,354,354,354,,354,354,,,370,370,370,354,370',
'203,370,370,,370,370,370,370,,,,,,,203,,203,,203,203,,354,,370,,,,370',
'370,,,370,370,370,370,370,370,,370,370,203,,,,,370,,,203,203,203,203',
'203,203,,203,203,204,,,,,203,,,,,,370,,204,204,,204,206,204,204,,204',
',,,,,,203,,206,206,,206,,206,206,,206,,204,,,,,,,,204,204,204,204,204',
'204,,204,204,206,,,,,204,,,206,206,206,206,206,206,,206,206,,273,273',
'273,273,206,273,273,273,,273,204,273,273,,,,,,,273,273,273,,,,273,,206',
',,,,,,,,,273,273,,,,,,,,,,,,273,273,273,273,,273,273,275,275,275,275',
',275,275,275,,275,,275,275,,,,,,,275,275,275,,,,275,,,,,,,,,,,,275,275',
',,,,,,,,,,,275,275,275,275,,275,275,305,305,305,305,,305,305,305,,305',
',305,305,,,,,,,305,305,305,,,,305,,,,,,,,,,,,305,305,,,,,,,,,,,,305',
'305,305,305,,305,305,217,217,217,217,,217,217,217,,217,,217,217,,,,',
',,217,217,217,,,,217,,,,,,,,,,,,217,217,,,,,,,,,,,,217,217,217,217,',
'217,217' ]
        racc_action_check = arr = ::Array.new(6769, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

racc_action_pointer = [
    -2,   343,   nil,   nil,   118,   322,   nil,   173,   325,  5766,
   468,   528,    69,   nil,   nil,   673,   733,   793,   853,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   252,   295,  1058,  1118,  1178,    -1,  1263,   nil,   nil,   nil,
   nil,   nil,  1383,  1443,  1528,   nil,   nil,   nil,   nil,   nil,
  1588,   nil,   222,   -69,   nil,  1793,   nil,   nil,   285,  1913,
   270,  2033,  2093,  2153,  2213,  2273,  2333,  2393,  2453,  2513,
  2602,  2662,  2722,  2782,  2842,  2902,  2962,  3022,  3082,  3142,
  3202,  3262,  3322,  3382,  3442,  3502,  3562,  3622,  3682,  3742,
  3802,   241,   272,  3982,  4042,   271,   270,  4222,   238,   nil,
   nil,   nil,  1677,    48,   942,  1327,   216,   nil,   228,    55,
  4837,  5560,   nil,  5503,  5446,   210,   207,   nil,   195,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   184,   nil,   181,   nil,
    90,   nil,   nil,   171,   nil,   134,   nil,   nil,   170,  4897,
    60,  5654,  4777,   nil,   100,   nil,   nil,   nil,   nil,    61,
    54,    20,   156,  5968,   173,  4162,     5,     3,     2,  4102,
  5317,  3862,   nil,   nil,    -9,   108,   129,   203,    -2,     4,
    -4,    -1,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
  5914,    13,  1532,     2,   617,   267,  6210,  5577,  5624,  5736,
  6116,  4371,  5988,  6402,  6459,  6284,  6476,  6136,  6089,  5867,
  5820,   nil,   nil,   408,   245,   234,   nil,  6680,  5607,   227,
   nil,   308,   268,  5719,   nil,   263,   nil,   120,   nil,   nil,
   263,   nil,   241,   nil,   nil,   nil,   nil,   nil,   235,   210,
   -24,   226,    -7,   nil,  1323,  1673,  1973,   -69,   188,   553,
   -28,  4282,   138,   286,   nil,  4367,  4512,   nil,   nil,   nil,
   nil,  4572,   nil,   nil,   nil,   nil,    73,   nil,   nil,   nil,
   nil,    81,    95,  6509,   119,  6566,  4957,  5017,  5137,   nil,
  3922,  5257,   185,   nil,   172,   nil,   194,   nil,   199,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   203,  5197,  6623,   216,   nil,    93,   nil,
   216,   220,   nil,   161,    30,  5077,   nil,   nil,  4692,  4632,
   nil,   235,   118,   239,   217,     9,  4452,   nil,   248,   nil,
    82,   nil,   nil,   250,   nil,   878,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   200,    98,   263,   nil,   nil,
  6042,  6190,  5389,  6264,  6338,   274,  1853,   215,   277,   nil,
   nil,   278,  1733,   nil,   nil,   nil,   269,   nil,   nil,   nil,
  6385,    61,    83,   nil,  1238,   302,   282,   nil,   308,   309,
   nil,   nil,   998,   296,   938,   nil,   nil,   nil,   316,   286,
   nil,   nil,   nil,   nil,   nil,   321,   nil,   nil,   nil,   nil,
   nil,   nil,   613,   nil,   348,   178,   329,   nil,   332,   nil,
   nil,    58,   nil,   334,   nil,   339,   nil,   342,   nil,   nil,
   nil,   nil,   314,   nil,   nil,   nil,   nil ]

racc_action_default = [
    -3,  -247,    -1,    -2,    -4,    -5,    -8,   -10,   -16,   -21,
  -247,  -247,  -247,   -33,   -34,  -247,  -247,  -247,  -247,   -61,
   -62,   -63,   -64,   -65,   -66,   -67,   -68,   -69,   -70,   -71,
   -72,   -73,   -74,   -75,   -76,   -77,   -78,   -79,   -80,   -81,
   -86,   -90,  -247,  -247,  -247,  -247,  -247,  -178,  -179,  -180,
  -181,  -182,  -247,  -247,  -247,  -193,  -194,  -195,  -196,  -197,
  -247,  -199,  -247,  -212,  -215,  -247,  -220,  -221,  -247,  -247,
    -7,  -247,  -247,  -247,  -247,  -247,  -247,  -247,  -247,  -126,
  -247,  -247,  -247,  -247,  -247,  -247,  -247,  -247,  -247,  -247,
  -247,  -247,  -247,  -247,  -247,  -247,  -247,  -247,  -247,  -247,
  -247,  -247,  -121,  -246,  -246,   -22,   -23,  -247,  -246,  -140,
  -161,  -162,   -46,  -247,   -47,   -54,  -247,   -87,  -247,  -247,
  -247,  -247,   -97,  -247,  -247,  -246,  -222,  -149,  -151,  -152,
  -153,  -154,  -155,  -157,  -158,   -14,  -222,  -184,  -222,  -186,
  -247,  -189,  -190,  -247,  -198,  -247,  -203,  -206,  -247,  -210,
  -247,  -247,  -247,   427,    -6,    -9,   -11,   -12,   -13,   -17,
   -18,   -19,   -20,  -247,  -222,  -247,   -79,   -80,   -81,  -233,
  -239,  -227,  -127,  -130,  -247,  -230,  -228,  -236,  -179,  -180,
  -181,  -182,  -226,  -231,  -232,  -234,  -235,  -237,  -244,  -245,
   -59,  -247,   -36,   -37,   -38,   -39,   -40,   -41,   -42,   -43,
   -44,   -45,   -48,   -49,   -50,   -51,   -52,   -53,   -55,   -56,
  -247,   -57,  -115,  -247,  -222,   -83,   -91,  -126,  -125,  -247,
  -124,  -247,  -224,  -247,   -28,  -246,  -163,  -247,   -58,   -92,
  -247,   -95,  -222,  -166,  -168,  -169,  -170,  -171,  -173,  -247,
  -247,  -176,  -247,   -89,  -247,  -247,  -247,  -246,  -246,  -223,
  -247,  -223,  -247,  -247,  -187,  -247,  -247,  -200,  -201,  -202,
  -204,  -247,  -207,  -208,  -209,  -211,  -222,  -213,  -216,  -218,
  -219,    -8,  -247,  -126,  -247,  -223,  -247,  -247,  -247,   -35,
  -247,  -247,  -222,  -117,  -247,   -85,  -222,  -129,  -247,  -227,
  -228,  -229,  -230,  -233,  -236,  -238,  -239,  -240,  -241,  -242,
  -243,  -122,  -123,  -247,  -225,  -126,  -247,  -143,  -247,  -164,
  -222,  -247,   -94,  -247,  -223,  -247,  -174,  -175,  -247,  -247,
   -88,  -247,  -100,  -247,  -106,  -247,  -247,  -110,  -247,  -135,
  -247,  -137,  -138,  -247,  -159,  -247,  -150,  -156,   -15,  -183,
  -185,  -188,  -191,  -192,  -205,  -247,  -247,  -222,   -26,  -128,
  -133,  -131,  -132,   -60,  -119,  -247,  -223,   -82,  -247,   -25,
   -29,  -222,  -246,  -144,  -145,  -146,  -247,   -93,   -96,  -167,
  -172,  -247,  -100,   -99,  -247,  -247,  -106,  -105,  -247,  -247,
  -109,  -111,  -246,  -246,  -247,  -160,  -214,  -217,  -247,   -30,
  -116,  -118,   -84,  -120,   -27,  -247,  -141,  -142,  -165,  -177,
   -98,  -101,  -247,  -104,  -247,  -246,  -247,  -136,  -247,  -148,
   -24,   -31,  -139,  -247,  -103,  -247,  -108,  -247,  -113,  -114,
  -134,  -147,  -224,  -102,  -107,  -112,   -32 ]

racc_goto_table = [
     2,   112,   114,   115,   117,   222,   129,   131,   225,   220,
   220,   191,   212,   303,   125,   144,   241,   268,   336,   327,
   164,   248,   232,    70,   395,   247,   219,   221,   121,   123,
   124,   252,   330,   253,   417,   377,   282,   326,   136,   138,
   349,   373,   401,   211,   406,   328,   229,   241,   388,   306,
   363,   151,   333,   266,   105,   106,   360,   337,   369,   274,
   116,   317,   316,   342,   262,   163,   190,   192,   193,   194,
   195,   196,   197,   198,   199,   200,   201,   202,   203,   204,
   205,   206,   207,   208,   209,   210,   214,   403,   154,   218,
   218,   400,   263,   223,   135,   135,   143,     3,   260,   381,
   261,   259,   146,   147,   385,   149,   242,   264,     1,   284,
   nil,   nil,   nil,   155,   156,   157,   158,   nil,   nil,   159,
   160,   161,   162,   nil,   241,   nil,   283,   313,   nil,   nil,
   310,   307,   nil,   nil,   nil,   nil,   nil,   129,   131,   nil,
   nil,   nil,   135,   nil,   125,   nil,   nil,   nil,   nil,   265,
   nil,   114,   272,   329,   334,   121,   123,   124,   286,   nil,
   nil,   345,   135,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   355,   nil,   285,
   nil,   358,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   271,   nil,   nil,   nil,   nil,   210,
   nil,   nil,   nil,   nil,   nil,   366,   nil,   nil,   nil,   129,
   131,   241,   387,   426,   347,   nil,   344,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   311,   nil,   190,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   389,   nil,   321,   323,   361,   nil,   nil,   371,
   nil,   nil,   nil,   nil,   nil,   nil,   394,   nil,   nil,   nil,
   nil,   nil,   350,   351,   352,   nil,   353,   354,   397,   391,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   364,   nil,   nil,
   nil,   nil,   nil,   407,   nil,   nil,   nil,   nil,   397,   nil,
   223,   nil,   nil,   338,   nil,   129,   131,   143,   343,   383,
   nil,   370,   nil,   146,   190,   nil,   nil,   nil,   nil,   422,
   nil,   418,   190,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   392,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   210,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   121,   338,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   408,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   223,   nil,   nil,
   nil,   nil,   413,   nil,   415,   419 ]

racc_goto_check = [
     2,    10,    10,    10,    37,    13,    35,    34,    58,    49,
    49,    19,    50,    14,    57,    82,    36,    90,    67,    47,
    11,    15,    42,     5,    60,    58,    53,    53,    10,    10,
    10,    15,    61,    15,    48,    45,    51,    46,     8,     8,
    54,    44,    43,    20,    60,    59,    41,    36,    12,    63,
    64,    10,    66,    42,     9,     9,    16,    69,    70,    15,
     6,    71,    73,    77,    78,    10,    10,    10,    10,    10,
    10,    10,    10,    10,    10,    10,    10,    10,    10,    10,
    10,    10,    10,    10,    10,    10,     8,    45,     5,    10,
    10,    44,    79,    10,     6,     6,     6,     3,    83,    47,
    84,    86,     6,    87,    67,    88,     8,    89,     1,    15,
   nil,   nil,   nil,     6,     6,     6,     6,   nil,   nil,     9,
     9,     9,     9,   nil,    36,   nil,    50,    15,   nil,   nil,
    42,    49,   nil,   nil,   nil,   nil,   nil,    35,    34,   nil,
   nil,   nil,     6,   nil,    57,   nil,   nil,   nil,   nil,     2,
   nil,    10,     2,    49,    49,    10,    10,    10,    11,   nil,
   nil,    15,     6,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,    15,   nil,    37,
   nil,    15,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,     6,   nil,   nil,   nil,   nil,    10,
   nil,   nil,   nil,   nil,   nil,    15,   nil,   nil,   nil,    35,
    34,    36,    90,    14,    11,   nil,    82,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
     2,   nil,    10,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,    15,   nil,     2,     2,    11,   nil,   nil,    19,
   nil,   nil,   nil,   nil,   nil,   nil,    15,   nil,   nil,   nil,
   nil,   nil,    10,    10,    10,   nil,    10,    10,    49,    50,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,    57,   nil,   nil,
   nil,   nil,   nil,    58,   nil,   nil,   nil,   nil,    49,   nil,
    10,   nil,   nil,     6,   nil,    35,    34,     6,     6,    57,
   nil,    10,   nil,     6,    10,   nil,   nil,   nil,   nil,    13,
   nil,    49,    10,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,    37,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,    10,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
    10,     6,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,     2,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,    10,   nil,   nil,
   nil,   nil,     2,   nil,     2,     2 ]

racc_goto_pointer = [
   nil,   108,     0,    97,   nil,    19,    42,   nil,   -14,    44,
   -14,   -59,  -299,  -102,  -209,  -105,  -248,   nil,   nil,   -69,
   -56,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   -39,   -40,  -103,   -36,   nil,   nil,
   nil,   -72,   -97,  -332,  -281,  -289,  -209,  -227,  -371,   -94,
   -87,  -177,   nil,   -77,  -235,   nil,   nil,   -31,  -100,  -202,
  -338,  -215,   nil,  -176,  -258,   nil,  -196,  -231,   nil,  -193,
  -256,  -179,   nil,  -177,   nil,   nil,   nil,  -192,   -84,   -56,
   nil,   nil,   -45,   -47,   -45,   nil,   -44,    41,    42,   -42,
  -134 ]

racc_goto_default = [
   nil,   nil,   396,   nil,     4,     5,     6,     7,   nil,     8,
     9,   nil,   nil,   nil,   nil,   nil,   224,    13,    14,   325,
   nil,    19,    20,    21,    22,    23,    24,    25,    26,    27,
    28,    29,    30,    31,    32,    33,    34,   nil,    40,    41,
   118,   nil,   nil,   122,   nil,   nil,   nil,   nil,   nil,   226,
   nil,   nil,   102,   nil,   172,   174,   173,   109,   nil,   nil,
   nil,   nil,   108,   nil,   nil,   126,   nil,   127,   128,   132,
   233,   234,   235,   236,   237,   240,   140,   142,    55,    56,
    57,    60,   nil,   nil,   nil,   145,   nil,   nil,   nil,   nil,
   nil ]

racc_reduce_table = [
  0, 0, :racc_error,
  1, 94, :_reduce_1,
  1, 94, :_reduce_2,
  0, 94, :_reduce_3,
  1, 95, :_reduce_4,
  1, 97, :_reduce_5,
  3, 97, :_reduce_6,
  2, 97, :_reduce_7,
  1, 98, :_reduce_8,
  3, 98, :_reduce_9,
  1, 99, :_reduce_none,
  3, 99, :_reduce_11,
  3, 99, :_reduce_12,
  3, 99, :_reduce_13,
  1, 101, :_reduce_14,
  3, 101, :_reduce_15,
  1, 100, :_reduce_none,
  3, 100, :_reduce_17,
  3, 100, :_reduce_18,
  3, 100, :_reduce_19,
  3, 100, :_reduce_20,
  1, 102, :_reduce_none,
  2, 102, :_reduce_22,
  2, 102, :_reduce_23,
  7, 102, :_reduce_24,
  5, 102, :_reduce_25,
  5, 102, :_reduce_26,
  4, 109, :_reduce_27,
  1, 106, :_reduce_28,
  3, 106, :_reduce_29,
  1, 105, :_reduce_30,
  2, 105, :_reduce_31,
  4, 105, :_reduce_32,
  1, 103, :_reduce_none,
  1, 103, :_reduce_none,
  4, 103, :_reduce_35,
  3, 103, :_reduce_36,
  3, 103, :_reduce_37,
  3, 103, :_reduce_38,
  3, 103, :_reduce_39,
  3, 103, :_reduce_40,
  3, 103, :_reduce_41,
  3, 103, :_reduce_42,
  3, 103, :_reduce_43,
  3, 103, :_reduce_44,
  3, 103, :_reduce_45,
  2, 103, :_reduce_46,
  2, 103, :_reduce_47,
  3, 103, :_reduce_48,
  3, 103, :_reduce_49,
  3, 103, :_reduce_50,
  3, 103, :_reduce_51,
  3, 103, :_reduce_52,
  3, 103, :_reduce_53,
  2, 103, :_reduce_54,
  3, 103, :_reduce_55,
  3, 103, :_reduce_56,
  3, 103, :_reduce_57,
  3, 103, :_reduce_58,
  1, 112, :_reduce_59,
  3, 112, :_reduce_60,
  1, 110, :_reduce_none,
  1, 110, :_reduce_none,
  1, 110, :_reduce_none,
  1, 110, :_reduce_none,
  1, 110, :_reduce_none,
  1, 110, :_reduce_none,
  1, 110, :_reduce_none,
  1, 110, :_reduce_none,
  1, 110, :_reduce_none,
  1, 110, :_reduce_none,
  1, 110, :_reduce_none,
  1, 110, :_reduce_none,
  1, 110, :_reduce_none,
  1, 110, :_reduce_none,
  1, 110, :_reduce_none,
  1, 110, :_reduce_none,
  1, 110, :_reduce_77,
  1, 110, :_reduce_78,
  1, 110, :_reduce_79,
  1, 110, :_reduce_80,
  1, 110, :_reduce_81,
  5, 111, :_reduce_82,
  3, 111, :_reduce_83,
  6, 111, :_reduce_84,
  4, 111, :_reduce_85,
  1, 115, :_reduce_86,
  2, 115, :_reduce_87,
  4, 131, :_reduce_88,
  3, 131, :_reduce_89,
  1, 131, :_reduce_90,
  3, 132, :_reduce_91,
  2, 130, :_reduce_92,
  3, 134, :_reduce_93,
  2, 134, :_reduce_94,
  2, 133, :_reduce_95,
  4, 133, :_reduce_96,
  2, 118, :_reduce_97,
  5, 136, :_reduce_98,
  4, 136, :_reduce_99,
  0, 137, :_reduce_none,
  2, 137, :_reduce_101,
  4, 137, :_reduce_102,
  3, 137, :_reduce_103,
  6, 119, :_reduce_104,
  5, 119, :_reduce_105,
  0, 138, :_reduce_none,
  4, 138, :_reduce_107,
  3, 138, :_reduce_108,
  5, 117, :_reduce_109,
  1, 139, :_reduce_110,
  2, 139, :_reduce_111,
  5, 140, :_reduce_112,
  1, 141, :_reduce_none,
  1, 141, :_reduce_none,
  1, 113, :_reduce_none,
  4, 113, :_reduce_116,
  1, 144, :_reduce_117,
  3, 144, :_reduce_118,
  3, 143, :_reduce_119,
  6, 116, :_reduce_120,
  2, 116, :_reduce_121,
  3, 145, :_reduce_122,
  3, 145, :_reduce_123,
  1, 146, :_reduce_none,
  1, 146, :_reduce_none,
  0, 104, :_reduce_126,
  1, 104, :_reduce_127,
  3, 104, :_reduce_128,
  1, 148, :_reduce_none,
  1, 148, :_reduce_none,
  3, 147, :_reduce_131,
  3, 147, :_reduce_132,
  3, 147, :_reduce_133,
  7, 120, :_reduce_134,
  1, 152, :_reduce_none,
  3, 152, :_reduce_136,
  1, 154, :_reduce_137,
  1, 154, :_reduce_138,
  7, 121, :_reduce_139,
  1, 155, :_reduce_140,
  1, 153, :_reduce_none,
  1, 153, :_reduce_none,
  1, 156, :_reduce_none,
  2, 156, :_reduce_144,
  1, 157, :_reduce_none,
  1, 157, :_reduce_none,
  7, 122, :_reduce_147,
  6, 122, :_reduce_148,
  1, 158, :_reduce_149,
  3, 158, :_reduce_150,
  1, 160, :_reduce_none,
  1, 160, :_reduce_none,
  1, 160, :_reduce_153,
  1, 160, :_reduce_none,
  1, 161, :_reduce_155,
  3, 161, :_reduce_156,
  1, 162, :_reduce_none,
  1, 162, :_reduce_none,
  1, 159, :_reduce_none,
  2, 159, :_reduce_160,
  1, 150, :_reduce_none,
  1, 150, :_reduce_162,
  1, 151, :_reduce_163,
  2, 151, :_reduce_164,
  4, 151, :_reduce_165,
  1, 135, :_reduce_166,
  3, 135, :_reduce_167,
  1, 163, :_reduce_none,
  1, 163, :_reduce_none,
  1, 164, :_reduce_none,
  1, 164, :_reduce_none,
  3, 166, :_reduce_172,
  1, 166, :_reduce_173,
  2, 167, :_reduce_174,
  2, 165, :_reduce_175,
  1, 168, :_reduce_176,
  4, 168, :_reduce_177,
  1, 114, :_reduce_178,
  1, 124, :_reduce_179,
  1, 124, :_reduce_180,
  1, 124, :_reduce_181,
  1, 124, :_reduce_182,
  4, 125, :_reduce_183,
  2, 125, :_reduce_184,
  4, 125, :_reduce_185,
  2, 125, :_reduce_186,
  3, 126, :_reduce_187,
  4, 126, :_reduce_188,
  2, 126, :_reduce_189,
  1, 169, :_reduce_190,
  3, 169, :_reduce_191,
  3, 170, :_reduce_192,
  1, 128, :_reduce_none,
  1, 128, :_reduce_none,
  1, 128, :_reduce_none,
  1, 171, :_reduce_196,
  1, 171, :_reduce_197,
  2, 172, :_reduce_198,
  1, 174, :_reduce_199,
  1, 176, :_reduce_200,
  1, 177, :_reduce_201,
  2, 175, :_reduce_202,
  1, 178, :_reduce_203,
  1, 179, :_reduce_204,
  2, 179, :_reduce_205,
  2, 173, :_reduce_206,
  2, 180, :_reduce_207,
  2, 180, :_reduce_208,
  3, 96, :_reduce_209,
  0, 182, :_reduce_none,
  1, 182, :_reduce_none,
  0, 181, :_reduce_212,
  2, 181, :_reduce_213,
  4, 181, :_reduce_214,
  1, 123, :_reduce_215,
  3, 123, :_reduce_216,
  5, 123, :_reduce_217,
  1, 183, :_reduce_none,
  1, 183, :_reduce_none,
  1, 129, :_reduce_220,
  1, 127, :_reduce_221,
  0, 108, :_reduce_none,
  1, 108, :_reduce_223,
  0, 107, :_reduce_none,
  1, 107, :_reduce_none,
  1, 149, :_reduce_none,
  1, 149, :_reduce_none,
  1, 149, :_reduce_none,
  1, 149, :_reduce_none,
  1, 149, :_reduce_none,
  1, 149, :_reduce_none,
  1, 149, :_reduce_none,
  1, 149, :_reduce_none,
  1, 149, :_reduce_none,
  1, 149, :_reduce_none,
  1, 149, :_reduce_none,
  1, 149, :_reduce_none,
  1, 149, :_reduce_none,
  1, 149, :_reduce_none,
  1, 149, :_reduce_none,
  1, 149, :_reduce_none,
  1, 149, :_reduce_none,
  1, 149, :_reduce_none,
  1, 149, :_reduce_none,
  1, 149, :_reduce_none,
  0, 142, :_reduce_246 ]

racc_reduce_n = 247

racc_shift_n = 427

racc_token_table = {
  false => 0,
  :error => 1,
  :STRING => 2,
  :DQPRE => 3,
  :DQMID => 4,
  :DQPOST => 5,
  :WORD => 6,
  :LBRACK => 7,
  :RBRACK => 8,
  :LBRACE => 9,
  :RBRACE => 10,
  :SYMBOL => 11,
  :FARROW => 12,
  :COMMA => 13,
  :TRUE => 14,
  :FALSE => 15,
  :EQUALS => 16,
  :APPENDS => 17,
  :DELETES => 18,
  :LESSEQUAL => 19,
  :NOTEQUAL => 20,
  :DOT => 21,
  :COLON => 22,
  :LLCOLLECT => 23,
  :RRCOLLECT => 24,
  :QMARK => 25,
  :LPAREN => 26,
  :RPAREN => 27,
  :ISEQUAL => 28,
  :GREATEREQUAL => 29,
  :GREATERTHAN => 30,
  :LESSTHAN => 31,
  :IF => 32,
  :ELSE => 33,
  :DEFINE => 34,
  :ELSIF => 35,
  :VARIABLE => 36,
  :CLASS => 37,
  :INHERITS => 38,
  :NODE => 39,
  :BOOLEAN => 40,
  :NAME => 41,
  :SEMIC => 42,
  :CASE => 43,
  :DEFAULT => 44,
  :AT => 45,
  :ATAT => 46,
  :LCOLLECT => 47,
  :RCOLLECT => 48,
  :CLASSREF => 49,
  :NOT => 50,
  :OR => 51,
  :AND => 52,
  :UNDEF => 53,
  :PARROW => 54,
  :PLUS => 55,
  :MINUS => 56,
  :TIMES => 57,
  :DIV => 58,
  :LSHIFT => 59,
  :RSHIFT => 60,
  :UMINUS => 61,
  :MATCH => 62,
  :NOMATCH => 63,
  :REGEX => 64,
  :IN_EDGE => 65,
  :OUT_EDGE => 66,
  :IN_EDGE_SUB => 67,
  :OUT_EDGE_SUB => 68,
  :IN => 69,
  :UNLESS => 70,
  :PIPE => 71,
  :LAMBDA => 72,
  :SELBRACE => 73,
  :NUMBER => 74,
  :HEREDOC => 75,
  :SUBLOCATE => 76,
  :RENDER_STRING => 77,
  :RENDER_EXPR => 78,
  :EPP_START => 79,
  :EPP_END => 80,
  :EPP_END_TRIM => 81,
  :FUNCTION => 82,
  :PRIVATE => 83,
  :ATTR => 84,
  :TYPE => 85,
  :LOW => 86,
  :PRODUCES => 87,
  :CONSUMES => 88,
  :HIGH => 89,
  :LISTSTART => 90,
  :SPLAT => 91,
  :MODULO => 92 }

racc_nt_base = 93

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "STRING",
  "DQPRE",
  "DQMID",
  "DQPOST",
  "WORD",
  "LBRACK",
  "RBRACK",
  "LBRACE",
  "RBRACE",
  "SYMBOL",
  "FARROW",
  "COMMA",
  "TRUE",
  "FALSE",
  "EQUALS",
  "APPENDS",
  "DELETES",
  "LESSEQUAL",
  "NOTEQUAL",
  "DOT",
  "COLON",
  "LLCOLLECT",
  "RRCOLLECT",
  "QMARK",
  "LPAREN",
  "RPAREN",
  "ISEQUAL",
  "GREATEREQUAL",
  "GREATERTHAN",
  "LESSTHAN",
  "IF",
  "ELSE",
  "DEFINE",
  "ELSIF",
  "VARIABLE",
  "CLASS",
  "INHERITS",
  "NODE",
  "BOOLEAN",
  "NAME",
  "SEMIC",
  "CASE",
  "DEFAULT",
  "AT",
  "ATAT",
  "LCOLLECT",
  "RCOLLECT",
  "CLASSREF",
  "NOT",
  "OR",
  "AND",
  "UNDEF",
  "PARROW",
  "PLUS",
  "MINUS",
  "TIMES",
  "DIV",
  "LSHIFT",
  "RSHIFT",
  "UMINUS",
  "MATCH",
  "NOMATCH",
  "REGEX",
  "IN_EDGE",
  "OUT_EDGE",
  "IN_EDGE_SUB",
  "OUT_EDGE_SUB",
  "IN",
  "UNLESS",
  "PIPE",
  "LAMBDA",
  "SELBRACE",
  "NUMBER",
  "HEREDOC",
  "SUBLOCATE",
  "RENDER_STRING",
  "RENDER_EXPR",
  "EPP_START",
  "EPP_END",
  "EPP_END_TRIM",
  "FUNCTION",
  "PRIVATE",
  "ATTR",
  "TYPE",
  "LOW",
  "PRODUCES",
  "CONSUMES",
  "HIGH",
  "LISTSTART",
  "SPLAT",
  "MODULO",
  "$start",
  "program",
  "statements",
  "epp_expression",
  "syntactic_statements",
  "syntactic_statement",
  "assignment",
  "relationship",
  "assignments",
  "resource",
  "expression",
  "attribute_operations",
  "additional_resource_bodies",
  "resource_bodies",
  "endsemi",
  "endcomma",
  "resource_body",
  "primary_expression",
  "call_function_expression",
  "expressions",
  "selector_entries",
  "variable",
  "call_method_with_lambda_expression",
  "collection_expression",
  "case_expression",
  "if_expression",
  "unless_expression",
  "definition_expression",
  "hostclass_expression",
  "node_definition_expression",
  "epp_render_expression",
  "reserved_word",
  "array",
  "hash",
  "regex",
  "quotedtext",
  "type",
  "lambda",
  "call_method_expression",
  "named_access",
  "lambda_parameter_list",
  "lambda_rest",
  "parameters",
  "if_part",
  "else",
  "unless_else",
  "case_options",
  "case_option",
  "options_statements",
  "nil",
  "selector_entry",
  "selector_entry_list",
  "collect_query",
  "optional_query",
  "attribute_operation",
  "attribute_name",
  "keyword",
  "classname",
  "parameter_list",
  "capability",
  "opt_statements",
  "produces_or_consumes",
  "stacked_classname",
  "classparent",
  "classnameordefault",
  "hostnames",
  "nodeparent",
  "hostname",
  "dotted_name",
  "name_or_number",
  "parameter",
  "untyped_parameter",
  "typed_parameter",
  "regular_parameter",
  "splat_parameter",
  "parameter_type",
  "hashpairs",
  "hashpair",
  "string",
  "dq_string",
  "heredoc",
  "dqpre",
  "dqrval",
  "dqpost",
  "dqmid",
  "text_expression",
  "dqtail",
  "sublocated_text",
  "epp_parameters_list",
  "optional_statements",
  "epp_end" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

module_eval(<<'.,.,', 'egrammar.ra', 66)
  def _reduce_1(val, _values, result)
     result = create_program(Factory.block_or_expression(*val[0])) 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 67)
  def _reduce_2(val, _values, result)
     result = create_program(Factory.block_or_expression(*val[0])) 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 68)
  def _reduce_3(val, _values, result)
     result = create_empty_program() 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 72)
  def _reduce_4(val, _values, result)
     result = transform_calls(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 79)
  def _reduce_5(val, _values, result)
     result = [val[0]]
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 80)
  def _reduce_6(val, _values, result)
     result = val[0].push val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 81)
  def _reduce_7(val, _values, result)
     result = val[0].push val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 88)
  def _reduce_8(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 89)
  def _reduce_9(val, _values, result)
     result = aryfy(val[0]).push(val[1]).push(val[2]) 
    result
  end
.,.,

# reduce 10 omitted

module_eval(<<'.,.,', 'egrammar.ra', 94)
  def _reduce_11(val, _values, result)
     result = val[0].set(val[2])      ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 95)
  def _reduce_12(val, _values, result)
     result = val[0].plus_set(val[2]) ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 96)
  def _reduce_13(val, _values, result)
     result = val[0].minus_set(val[2]); loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 99)
  def _reduce_14(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 100)
  def _reduce_15(val, _values, result)
     result = val[0].push(val[2]) 
    result
  end
.,.,

# reduce 16 omitted

module_eval(<<'.,.,', 'egrammar.ra', 104)
  def _reduce_17(val, _values, result)
     result = val[0].relop(val[1][:value], val[2]); loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 105)
  def _reduce_18(val, _values, result)
     result = val[0].relop(val[1][:value], val[2]); loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 106)
  def _reduce_19(val, _values, result)
     result = val[0].relop(val[1][:value], val[2]); loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 107)
  def _reduce_20(val, _values, result)
     result = val[0].relop(val[1][:value], val[2]); loc result, val[1] 
    result
  end
.,.,

# reduce 21 omitted

module_eval(<<'.,.,', 'egrammar.ra', 116)
  def _reduce_22(val, _values, result)
          result = val[1]
      unless Factory.set_resource_form(result, :virtual)
        # This is equivalent to a syntax error - additional semantic restrictions apply
        error val[0], "Virtual (@) can only be applied to a Resource Expression"
      end
      # relocate the result
      loc result, val[0], val[1]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 127)
  def _reduce_23(val, _values, result)
          result = val[1]
      unless Factory.set_resource_form(result, :exported)
        # This is equivalent to a syntax error - additional semantic restrictions apply
        error val[0], "Exported (@@) can only be applied to a Resource Expression"
      end
      # relocate the result
      loc result, val[0], val[1]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 138)
  def _reduce_24(val, _values, result)
          bodies = [Factory.RESOURCE_BODY(val[2], val[4])] + val[5]
      result = Factory.RESOURCE(val[0], bodies)
      loc result, val[0], val[6]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 145)
  def _reduce_25(val, _values, result)
            result = Factory.RESOURCE(Factory.fqn(token_text(val[0])), val[2])
        loc result, val[0], val[4]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 154)
  def _reduce_26(val, _values, result)
           result = case Factory.resource_shape(val[0])
       when :resource, :class
        # This catches deprecated syntax.
        # If the attribute operations does not include +>, then the found expression
        # is actually a LEFT followed by LITERAL_HASH
        #
        unless tmp = transform_resource_wo_title(val[0], val[2])
          error val[1], "Syntax error resource body without title or hash with +>"
        end
        tmp
      when :defaults
        Factory.RESOURCE_DEFAULTS(val[0], val[2])
      when :override
        # This was only done for override in original - TODO should it be here at all
        Factory.RESOURCE_OVERRIDE(val[0], val[2])
      else
        error val[0], "Expression is not valid as a resource, resource-default, or resource-override"
      end
     loc result, val[0], val[4]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 176)
  def _reduce_27(val, _values, result)
     result = Factory.RESOURCE_BODY(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 179)
  def _reduce_28(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 180)
  def _reduce_29(val, _values, result)
     result = val[0].push val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 186)
  def _reduce_30(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 187)
  def _reduce_31(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 188)
  def _reduce_32(val, _values, result)
     result = val[2] 
    result
  end
.,.,

# reduce 33 omitted

# reduce 34 omitted

module_eval(<<'.,.,', 'egrammar.ra', 195)
  def _reduce_35(val, _values, result)
     result = val[0][*val[2]]         ; loc result, val[0], val[3] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 196)
  def _reduce_36(val, _values, result)
     result = val[0].in val[2]        ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 197)
  def _reduce_37(val, _values, result)
     result = val[0] =~  val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 198)
  def _reduce_38(val, _values, result)
     result = val[0].mne val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 199)
  def _reduce_39(val, _values, result)
     result = val[0] +   val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 200)
  def _reduce_40(val, _values, result)
     result = val[0] -   val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 201)
  def _reduce_41(val, _values, result)
     result = val[0] /   val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 202)
  def _reduce_42(val, _values, result)
     result = val[0] *   val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 203)
  def _reduce_43(val, _values, result)
     result = val[0] %   val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 204)
  def _reduce_44(val, _values, result)
     result = val[0] <<  val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 205)
  def _reduce_45(val, _values, result)
     result = val[0] >>  val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 206)
  def _reduce_46(val, _values, result)
     result = val[1].minus()          ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 207)
  def _reduce_47(val, _values, result)
     result = val[1].unfold()         ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 208)
  def _reduce_48(val, _values, result)
     result = val[0].ne  val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 209)
  def _reduce_49(val, _values, result)
     result = val[0] ==  val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 210)
  def _reduce_50(val, _values, result)
     result = val[0] >   val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 211)
  def _reduce_51(val, _values, result)
     result = val[0] >=  val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 212)
  def _reduce_52(val, _values, result)
     result = val[0] <   val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 213)
  def _reduce_53(val, _values, result)
     result = val[0] <=  val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 214)
  def _reduce_54(val, _values, result)
     result = val[1].not              ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 215)
  def _reduce_55(val, _values, result)
     result = val[0].and val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 216)
  def _reduce_56(val, _values, result)
     result = val[0].or  val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 217)
  def _reduce_57(val, _values, result)
     result = val[0].select(*val[2])  ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 218)
  def _reduce_58(val, _values, result)
     result = val[1].paren()          ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 228)
  def _reduce_59(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 229)
  def _reduce_60(val, _values, result)
     result = val[0].push(val[2]) 
    result
  end
.,.,

# reduce 61 omitted

# reduce 62 omitted

# reduce 63 omitted

# reduce 64 omitted

# reduce 65 omitted

# reduce 66 omitted

# reduce 67 omitted

# reduce 68 omitted

# reduce 69 omitted

# reduce 70 omitted

# reduce 71 omitted

# reduce 72 omitted

# reduce 73 omitted

# reduce 74 omitted

# reduce 75 omitted

# reduce 76 omitted

module_eval(<<'.,.,', 'egrammar.ra', 248)
  def _reduce_77(val, _values, result)
     result = Factory.NUMBER(val[0][:value])          ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 249)
  def _reduce_78(val, _values, result)
     result = Factory.literal(val[0][:value])         ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 250)
  def _reduce_79(val, _values, result)
     result = Factory.literal(:default)               ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 251)
  def _reduce_80(val, _values, result)
     result = Factory.literal(:undef)                 ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 252)
  def _reduce_81(val, _values, result)
     result = Factory.QNAME_OR_NUMBER(val[0][:value]) ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 261)
  def _reduce_82(val, _values, result)
          result = Factory.CALL_NAMED(val[0], true, val[2])
      loc result, val[0], val[4]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 265)
  def _reduce_83(val, _values, result)
          result = Factory.CALL_NAMED(val[0], true, [])
      loc result, val[0], val[2]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 269)
  def _reduce_84(val, _values, result)
          result = Factory.CALL_NAMED(val[0], true, val[2])
      loc result, val[0], val[4]
      result.lambda = val[5]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 274)
  def _reduce_85(val, _values, result)
          result = Factory.CALL_NAMED(val[0], true, [])
      loc result, val[0], val[2]
      result.lambda = val[3]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 282)
  def _reduce_86(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 283)
  def _reduce_87(val, _values, result)
     result = val[0]; val[0].lambda = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 286)
  def _reduce_88(val, _values, result)
     result = Factory.CALL_METHOD(val[0], val[2]); loc result, val[1], val[3] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 287)
  def _reduce_89(val, _values, result)
     result = Factory.CALL_METHOD(val[0], []); loc result, val[1], val[3] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 288)
  def _reduce_90(val, _values, result)
     result = Factory.CALL_METHOD(val[0], []); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 292)
  def _reduce_91(val, _values, result)
            result = val[0].dot(Factory.fqn(val[2][:value]))
        loc result, val[1], val[2]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 300)
  def _reduce_92(val, _values, result)
          result = Factory.LAMBDA(val[0][:value], val[1][:value])
      loc result, val[0][:start], val[1][:end]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 305)
  def _reduce_93(val, _values, result)
     result = {:end => val[2], :value =>val[1] } 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 306)
  def _reduce_94(val, _values, result)
     result = {:end => val[1], :value => nil } 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 310)
  def _reduce_95(val, _values, result)
     result = {:start => val[0], :value => [] } 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 311)
  def _reduce_96(val, _values, result)
     result = {:start => val[0], :value => val[1] } 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 319)
  def _reduce_97(val, _values, result)
          result = val[1]
      loc(result, val[0], val[1])
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 326)
  def _reduce_98(val, _values, result)
            result = Factory.IF(val[0], Factory.block_or_expression(*val[2]), val[4])
        loc(result, val[0], (val[4] ? val[4] : val[3]))
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 330)
  def _reduce_99(val, _values, result)
            result = Factory.IF(val[0], nil, val[3])
        loc(result, val[0], (val[3] ? val[3] : val[2]))
      
    result
  end
.,.,

# reduce 100 omitted

module_eval(<<'.,.,', 'egrammar.ra', 338)
  def _reduce_101(val, _values, result)
            result = val[1]
        loc(result, val[0], val[1])
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 342)
  def _reduce_102(val, _values, result)
            result = Factory.block_or_expression(*val[2])
        loc result, val[0], val[3]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 346)
  def _reduce_103(val, _values, result)
            result = nil # don't think a nop is needed here either
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 353)
  def _reduce_104(val, _values, result)
          result = Factory.UNLESS(val[1], Factory.block_or_expression(*val[3]), val[5])
      loc result, val[0], val[4]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 357)
  def _reduce_105(val, _values, result)
          result = Factory.UNLESS(val[1], nil, nil)
      loc result, val[0], val[4]
    
    result
  end
.,.,

# reduce 106 omitted

module_eval(<<'.,.,', 'egrammar.ra', 367)
  def _reduce_107(val, _values, result)
            result = Factory.block_or_expression(*val[2])
        loc result, val[0], val[3]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 371)
  def _reduce_108(val, _values, result)
            result = nil # don't think a nop is needed here either
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 378)
  def _reduce_109(val, _values, result)
          result = Factory.CASE(val[1], *val[3])
      loc result, val[0], val[4]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 384)
  def _reduce_110(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 385)
  def _reduce_111(val, _values, result)
     result = val[0].push val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 390)
  def _reduce_112(val, _values, result)
            result = Factory.WHEN(val[0], val[3]); loc result, val[1], val[4]
      
    result
  end
.,.,

# reduce 113 omitted

# reduce 114 omitted

# reduce 115 omitted

module_eval(<<'.,.,', 'egrammar.ra', 406)
  def _reduce_116(val, _values, result)
            result = val[1]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 411)
  def _reduce_117(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 412)
  def _reduce_118(val, _values, result)
     result = val[0].push val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 417)
  def _reduce_119(val, _values, result)
     result = Factory.MAP(val[0], val[2]) ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 427)
  def _reduce_120(val, _values, result)
          result = Factory.COLLECT(val[0], val[1], val[3])
      loc result, val[0], val[5]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 431)
  def _reduce_121(val, _values, result)
          result = Factory.COLLECT(val[0], val[1], [])
      loc result, val[0], val[1]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 436)
  def _reduce_122(val, _values, result)
     result = Factory.VIRTUAL_QUERY(val[1])   ; loc result, val[0], val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 437)
  def _reduce_123(val, _values, result)
     result = Factory.EXPORTED_QUERY(val[1])  ; loc result, val[0], val[2] 
    result
  end
.,.,

# reduce 124 omitted

# reduce 125 omitted

module_eval(<<'.,.,', 'egrammar.ra', 446)
  def _reduce_126(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 447)
  def _reduce_127(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 448)
  def _reduce_128(val, _values, result)
     result = val[0].push(val[2]) 
    result
  end
.,.,

# reduce 129 omitted

# reduce 130 omitted

module_eval(<<'.,.,', 'egrammar.ra', 464)
  def _reduce_131(val, _values, result)
            result = Factory.ATTRIBUTE_OP(val[0][:value], :'=>', val[2])
        loc result, val[0], val[2]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 468)
  def _reduce_132(val, _values, result)
            result = Factory.ATTRIBUTE_OP(val[0][:value], :'+>', val[2])
        loc result, val[0], val[2]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 472)
  def _reduce_133(val, _values, result)
          result = Factory.ATTRIBUTES_OP(val[2]) ; loc result, val[0], val[2]
   
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 481)
  def _reduce_134(val, _values, result)
          result = add_definition(Factory.DEFINITION(classname(val[1][:value]), val[2], val[3], val[5]))
      loc result, val[0], val[6]
      # New lexer does not keep track of this, this is done in validation
      if @lexer.respond_to?(:'indefine=')
        @lexer.indefine = false
      end
    
    result
  end
.,.,

# reduce 135 omitted

module_eval(<<'.,.,', 'egrammar.ra', 496)
  def _reduce_136(val, _values, result)
        result = Factory.CAPABILITY(val[1][:value], val[0][:value], val[2])
    loc result, val[1], val[1]
  
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 501)
  def _reduce_137(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 502)
  def _reduce_138(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 510)
  def _reduce_139(val, _values, result)
          # Remove this class' name from the namestack as all nested classes have been parsed
      namepop
      result = add_definition(Factory.HOSTCLASS(classname(val[1][:value]), val[2], token_text(val[3]), val[5]))
      loc result, val[0], val[6]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 520)
  def _reduce_140(val, _values, result)
     namestack(val[0][:value]) ; result = val[0] 
    result
  end
.,.,

# reduce 141 omitted

# reduce 142 omitted

# reduce 143 omitted

module_eval(<<'.,.,', 'egrammar.ra', 529)
  def _reduce_144(val, _values, result)
     result = val[1] 
    result
  end
.,.,

# reduce 145 omitted

# reduce 146 omitted

module_eval(<<'.,.,', 'egrammar.ra', 546)
  def _reduce_147(val, _values, result)
          result = add_definition(Factory.NODE(val[1], val[3], val[5]))
      loc result, val[0], val[6]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 550)
  def _reduce_148(val, _values, result)
          result = add_definition(Factory.NODE(val[1], val[3], nil))
      loc result, val[0], val[5]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 560)
  def _reduce_149(val, _values, result)
     result = [result] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 561)
  def _reduce_150(val, _values, result)
     result = val[0].push(val[2]) 
    result
  end
.,.,

# reduce 151 omitted

# reduce 152 omitted

module_eval(<<'.,.,', 'egrammar.ra', 568)
  def _reduce_153(val, _values, result)
     result = Factory.literal(:default); loc result, val[0] 
    result
  end
.,.,

# reduce 154 omitted

module_eval(<<'.,.,', 'egrammar.ra', 572)
  def _reduce_155(val, _values, result)
     result = Factory.literal(val[0][:value]); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 573)
  def _reduce_156(val, _values, result)
     result = Factory.concat(val[0], '.', val[2][:value]); loc result, val[0], val[2] 
    result
  end
.,.,

# reduce 157 omitted

# reduce 158 omitted

# reduce 159 omitted

module_eval(<<'.,.,', 'egrammar.ra', 582)
  def _reduce_160(val, _values, result)
     result = val[1] 
    result
  end
.,.,

# reduce 161 omitted

module_eval(<<'.,.,', 'egrammar.ra', 599)
  def _reduce_162(val, _values, result)
     error val[0], "'class' is not a valid classname" 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 603)
  def _reduce_163(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 604)
  def _reduce_164(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 605)
  def _reduce_165(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 609)
  def _reduce_166(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 610)
  def _reduce_167(val, _values, result)
     result = val[0].push(val[2]) 
    result
  end
.,.,

# reduce 168 omitted

# reduce 169 omitted

# reduce 170 omitted

# reduce 171 omitted

module_eval(<<'.,.,', 'egrammar.ra', 622)
  def _reduce_172(val, _values, result)
     result = Factory.PARAM(val[0][:value], val[2]) ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 623)
  def _reduce_173(val, _values, result)
     result = Factory.PARAM(val[0][:value]); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 626)
  def _reduce_174(val, _values, result)
     result = val[1]; val[1].captures_rest() 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 629)
  def _reduce_175(val, _values, result)
     val[1].type_expr(val[0]) ; result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 632)
  def _reduce_176(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 633)
  def _reduce_177(val, _values, result)
     result = val[0][*val[2]] ; loc result, val[0], val[3] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 638)
  def _reduce_178(val, _values, result)
     result = Factory.fqn(val[0][:value]).var ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 643)
  def _reduce_179(val, _values, result)
     result = Factory.RESERVED(val[0][:value]) ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 644)
  def _reduce_180(val, _values, result)
     result = Factory.RESERVED(val[0][:value]) ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 645)
  def _reduce_181(val, _values, result)
     result = Factory.RESERVED(val[0][:value]) ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 646)
  def _reduce_182(val, _values, result)
     result = Factory.RESERVED(val[0][:value]) ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 652)
  def _reduce_183(val, _values, result)
     result = Factory.LIST(val[1]); loc result, val[0], val[3] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 653)
  def _reduce_184(val, _values, result)
     result = Factory.literal([]) ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 654)
  def _reduce_185(val, _values, result)
     result = Factory.LIST(val[1]); loc result, val[0], val[3] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 655)
  def _reduce_186(val, _values, result)
     result = Factory.literal([]) ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 658)
  def _reduce_187(val, _values, result)
     result = Factory.HASH(val[1]); loc result, val[0], val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 659)
  def _reduce_188(val, _values, result)
     result = Factory.HASH(val[1]); loc result, val[0], val[3] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 660)
  def _reduce_189(val, _values, result)
     result = Factory.literal({}) ; loc result, val[0], val[3] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 663)
  def _reduce_190(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 664)
  def _reduce_191(val, _values, result)
     result = val[0].push val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 667)
  def _reduce_192(val, _values, result)
     result = Factory.KEY_ENTRY(val[0], val[2]); loc result, val[1] 
    result
  end
.,.,

# reduce 193 omitted

# reduce 194 omitted

# reduce 195 omitted

module_eval(<<'.,.,', 'egrammar.ra', 675)
  def _reduce_196(val, _values, result)
     result = Factory.literal(val[0][:value]) ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 676)
  def _reduce_197(val, _values, result)
     result = Factory.literal(val[0][:value]) ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 678)
  def _reduce_198(val, _values, result)
     result = Factory.string(val[0], *val[1]) ; loc result, val[0], val[1][-1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 679)
  def _reduce_199(val, _values, result)
     result = Factory.literal(val[0][:value]); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 680)
  def _reduce_200(val, _values, result)
     result = Factory.literal(val[0][:value]); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 681)
  def _reduce_201(val, _values, result)
     result = Factory.literal(val[0][:value]); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 682)
  def _reduce_202(val, _values, result)
     result = [val[0]] + val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 683)
  def _reduce_203(val, _values, result)
     result = Factory.TEXT(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 686)
  def _reduce_204(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 687)
  def _reduce_205(val, _values, result)
     result = [val[0]] + val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 690)
  def _reduce_206(val, _values, result)
     result = Factory.HEREDOC(val[0][:value], val[1]); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 693)
  def _reduce_207(val, _values, result)
     result = Factory.SUBLOCATE(val[0], val[1]); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 694)
  def _reduce_208(val, _values, result)
     result = Factory.SUBLOCATE(val[0], val[1]); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 697)
  def _reduce_209(val, _values, result)
     result = Factory.EPP(val[1], val[2]); loc result, val[0] 
    result
  end
.,.,

# reduce 210 omitted

# reduce 211 omitted

module_eval(<<'.,.,', 'egrammar.ra', 704)
  def _reduce_212(val, _values, result)
     result = nil 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 705)
  def _reduce_213(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 706)
  def _reduce_214(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 709)
  def _reduce_215(val, _values, result)
     result = Factory.RENDER_STRING(val[0][:value]); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 710)
  def _reduce_216(val, _values, result)
     result = Factory.RENDER_EXPR(val[1]); loc result, val[0], val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 711)
  def _reduce_217(val, _values, result)
     result = Factory.RENDER_EXPR(Factory.block_or_expression(*val[2])); loc result, val[0], val[4] 
    result
  end
.,.,

# reduce 218 omitted

# reduce 219 omitted

module_eval(<<'.,.,', 'egrammar.ra', 717)
  def _reduce_220(val, _values, result)
     result = Factory.QREF(val[0][:value])  ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 720)
  def _reduce_221(val, _values, result)
     result = Factory.literal(val[0][:value]); loc result, val[0] 
    result
  end
.,.,

# reduce 222 omitted

module_eval(<<'.,.,', 'egrammar.ra', 726)
  def _reduce_223(val, _values, result)
     result = nil 
    result
  end
.,.,

# reduce 224 omitted

# reduce 225 omitted

# reduce 226 omitted

# reduce 227 omitted

# reduce 228 omitted

# reduce 229 omitted

# reduce 230 omitted

# reduce 231 omitted

# reduce 232 omitted

# reduce 233 omitted

# reduce 234 omitted

# reduce 235 omitted

# reduce 236 omitted

# reduce 237 omitted

# reduce 238 omitted

# reduce 239 omitted

# reduce 240 omitted

# reduce 241 omitted

# reduce 242 omitted

# reduce 243 omitted

# reduce 244 omitted

# reduce 245 omitted

module_eval(<<'.,.,', 'egrammar.ra', 755)
  def _reduce_246(val, _values, result)
     result = nil
    result
  end
.,.,

def _reduce_none(val, _values, result)
  val[0]
end

      end   # class Parser
      end   # module Parser
    end   # module Pops
  end   # module Puppet
