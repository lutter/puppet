#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.11
# from Racc grammer file "".
#

require 'racc/parser.rb'

require 'puppet'
require 'puppet/pops'

module Puppet
  class ParseError < Puppet::Error; end
  class ImportError < Racc::ParseError; end
  class AlreadyImportedError < ImportError; end
end

module Puppet
  module Pops
    module Parser
      class Parser < Racc::Parser

module_eval(<<'...end egrammar.ra/module_eval...', 'egrammar.ra', 765)

# Make emacs happy
# Local Variables:
# mode: ruby
# End:
...end egrammar.ra/module_eval...
##### State transition tables begin ###

clist = [
'60,63,336,-236,61,55,323,56,280,82,-130,-238,240,136,-227,-241,-239',
'-240,272,273,324,400,283,103,18,106,283,101,102,253,43,380,46,241,49',
'12,113,48,37,40,112,45,38,10,11,-236,137,68,17,105,281,39,-130,-238',
'15,16,-227,-241,-239,-240,60,63,69,340,61,55,113,56,44,282,112,83,36',
'64,283,66,67,65,109,341,50,51,53,52,18,47,376,54,375,113,43,240,46,112',
'49,115,240,48,37,40,257,45,38,258,68,252,113,68,17,68,112,39,241,229',
'15,16,240,241,229,113,60,63,69,112,61,55,233,56,44,68,113,270,36,64',
'112,66,67,241,261,260,50,51,53,52,18,47,376,54,375,113,43,318,46,112',
'49,12,313,48,37,40,71,45,38,10,11,240,113,68,17,259,112,39,347,366,15',
'16,333,349,68,332,60,63,69,254,61,55,241,56,44,74,75,76,36,64,232,66',
'67,230,254,322,50,51,53,52,18,47,357,54,358,278,43,279,46,360,49,12',
'240,48,37,40,319,45,38,10,11,60,63,68,17,61,363,39,318,318,15,16,368',
'369,77,79,78,80,69,259,312,229,81,373,44,308,377,379,36,64,306,66,67',
'81,219,218,50,51,53,52,82,47,387,54,60,63,305,389,61,55,121,56,417,82',
'103,278,106,73,101,102,156,153,151,254,393,73,121,103,18,106,396,101',
'102,278,43,81,46,399,49,12,105,48,37,40,122,45,38,10,11,81,81,68,17',
'105,121,39,403,379,15,16,405,406,83,407,408,81,69,411,84,85,412,413',
'44,81,278,83,36,64,73,66,67,421,70,423,50,51,53,52,82,47,424,54,60,63',
'425,308,61,55,,56,415,82,103,,106,,101,102,,,,,,,,103,18,106,,101,102',
',43,,46,,49,12,105,48,37,40,,45,38,10,11,,,68,17,105,,39,,,15,16,,,',
',60,63,69,,61,55,,56,44,,,,36,64,,66,67,,,,50,51,53,52,18,47,,54,,,43',
',46,,49,115,,48,37,40,,45,38,,,,,68,17,,,39,,,15,16,,,,,60,63,69,,61',
'55,,56,44,,,,36,64,,66,67,,,,50,51,53,52,18,47,,54,,,43,,46,,49,12,',
'48,37,40,,45,38,10,11,,,68,17,,,39,,,15,16,,,,,60,63,69,,61,55,,56,44',
',,,36,64,,66,67,,,,50,51,53,52,18,47,,54,,,43,,46,,49,12,,48,37,40,',
'45,38,10,11,,,68,17,,,39,,,15,16,,,,,,,69,,,,,,44,,,,36,64,,66,67,,',
',50,51,53,52,82,47,,54,60,63,,,61,55,,56,410,82,103,,106,,101,102,,',
',,,,,103,18,106,,101,102,,43,,46,,49,12,105,48,37,40,,45,38,10,11,,',
'68,17,105,,39,,,15,16,,,,,60,63,69,,61,55,,56,44,,,,36,64,,66,67,,,',
'50,51,53,52,18,47,,54,,,43,,46,,49,115,,48,37,40,,45,38,,,,,68,17,,',
'39,,,15,16,,,,,60,63,69,,61,55,,56,44,,,,36,64,,66,67,,,,50,51,53,52',
'18,47,,54,,,43,,46,,49,115,,48,37,40,,45,38,,,,,68,17,,,39,,,15,16,',
',,,60,63,69,,61,55,,56,44,,,,36,64,,66,67,,,,50,51,53,52,18,47,,54,',
',43,,46,,49,115,,48,37,40,,45,38,,,,,68,17,,,39,,,15,16,,,,,60,63,69',
',61,55,,56,44,,,,36,64,,66,67,,,,50,51,53,52,18,47,,54,,,43,,46,,49',
'12,,48,37,40,,45,38,10,11,,,68,17,,,39,,,15,16,,,,,60,63,69,,61,55,',
'56,44,,,,36,64,,66,67,,,,50,51,53,52,18,47,,54,,,43,,46,,49,115,,48',
'37,40,,45,38,,,,,68,17,,,39,,,15,16,,,,,60,63,69,,61,55,,56,44,,,,36',
'64,,66,67,,,,50,51,53,52,18,47,,54,,,43,,46,,49,115,,48,37,40,,45,38',
',,,,68,17,,,39,,,15,16,,,,,60,63,69,,61,55,,56,44,,,,36,64,,66,67,,',
',50,51,53,52,18,47,,54,,,43,,46,,49,115,,48,37,40,,45,38,,,,,68,17,',
',39,,,15,16,,,,,60,63,69,,61,55,,56,44,,,,36,64,,66,67,,,,50,51,53,52',
'18,47,,54,,,43,,46,,49,115,,48,37,40,,45,38,,,,,68,17,,,39,,,15,16,',
',,,60,63,69,,61,55,,56,44,,,,36,64,,66,67,,,,50,51,53,52,18,47,,54,',
',43,,46,,49,115,,48,37,40,,45,38,,,,,68,17,,,39,,,15,16,,,,,60,63,69',
',61,55,,56,44,,,,36,64,,66,67,,,,50,51,53,52,18,47,,54,,,43,,46,,49',
'12,,48,37,40,,45,38,10,11,,,68,17,,,39,,,15,16,,,,,60,63,69,,61,55,',
'56,44,,,,36,64,,66,67,,,,50,51,53,52,18,47,,54,,,43,,46,,49,115,,48',
'37,40,,45,38,,,,,68,17,,,39,,,15,16,,,,,60,63,69,,61,55,,56,44,,,,36',
'64,,66,67,,,,50,51,53,52,18,47,,54,,,43,,46,,49,115,,48,37,40,,45,38',
',,,,68,17,,,39,,,15,16,,,,,60,63,69,,61,55,140,56,44,,,,36,64,,66,67',
',,,50,51,53,52,18,47,,54,,,43,,46,,49,12,,48,37,40,,45,38,10,11,,,68',
'17,,,39,,,15,16,,,,,60,63,69,,61,55,142,56,44,,,,36,64,,66,67,,,,50',
'51,53,52,18,47,,54,,,43,,46,,49,12,,48,37,40,,45,38,10,11,,,68,17,,',
'39,,,15,16,,,,,,,69,,,,,,44,,,,36,64,,66,67,,,,50,51,53,52,,47,,54,60',
'63,,,61,55,,56,144,,,,,,,,,,,,,,,,18,,,,,,43,,46,,49,12,,48,37,40,,45',
'38,10,11,,,68,17,,,39,,,15,16,,,,,60,63,69,,61,55,,56,44,,,,36,64,,66',
'67,,,,50,51,53,52,18,47,,54,,,43,,46,,49,12,,48,37,40,,45,38,10,11,',
',68,17,,,39,,,15,16,,,,,60,63,69,,61,55,,56,44,,279,,36,64,,66,67,,',
',50,51,53,52,18,47,,54,,,43,,46,,49,115,,48,37,40,,45,38,,,,,68,17,',
',39,,,15,16,,,,,,,69,,,,,,44,,,,36,64,,66,67,,,,50,51,53,52,,47,,54',
'60,63,,,61,55,,56,144,,,,,,,,,,,,,,,,18,,,,,,43,,46,,49,12,,48,37,40',
',45,38,10,11,,,68,17,,,39,,,15,16,,,,,60,63,69,,61,55,,155,44,,,,36',
'64,,66,67,,,,50,51,53,52,18,47,,54,,,43,,46,,49,115,,48,37,40,,45,38',
',,,,68,17,,,39,,,15,16,,,,,60,63,69,,61,55,,56,44,,,,36,64,,66,67,,',
',50,51,53,52,18,47,,54,,,43,,46,,49,115,,48,37,40,,45,38,,,,,68,17,',
',39,,,15,16,,,,,60,63,69,,61,55,,56,44,,,,36,64,,66,67,,,,50,51,53,52',
'18,47,,54,,,43,,46,,49,12,,48,37,40,,45,38,10,11,,,68,17,,,39,,,15,16',
',,,,60,63,69,,61,55,,56,44,,,,36,64,,66,67,,,,50,51,53,52,18,47,,54',
',,43,,46,,49,12,,48,37,40,,45,38,10,11,,,68,17,,,39,,,15,16,,,,,60,63',
'69,,61,55,,56,44,,,,36,64,,66,67,,,,50,51,53,52,18,47,,54,,,43,,46,',
'49,12,,48,37,40,,45,38,10,11,,,68,17,,,39,,,15,16,,,,,60,63,69,,61,55',
',56,44,,,,36,64,,66,67,,,,50,51,53,52,18,47,,54,,,43,,46,,49,12,,48',
'37,40,,45,38,10,11,,,68,17,,,39,,,15,16,,,,,60,63,69,,61,55,,56,44,',
',,36,64,,66,67,,,,50,51,53,52,18,47,,54,,,43,,46,,49,12,,48,37,40,,45',
'38,10,11,,,68,17,,,39,,,15,16,,,,,60,63,69,,61,55,,56,44,,,,36,64,,66',
'67,,,,50,51,53,52,18,47,,54,,,43,,46,,49,12,,48,37,40,,45,38,10,11,',
',68,17,,,39,,,15,16,,,,,60,63,69,,61,55,,56,44,,,,36,64,,66,67,,,,50',
'51,53,52,18,47,,54,,,43,,46,,49,12,,48,37,40,,45,38,10,11,,,68,17,,',
'39,,,15,16,,,,,60,63,69,,61,55,,56,44,,,,36,64,,66,67,,,,50,51,53,52',
'18,47,,54,,,43,,46,,49,12,,48,37,40,,45,38,10,11,,,68,17,,,39,,,15,16',
',,,,60,63,69,,61,55,,56,44,,,,36,64,,66,67,,,,50,51,53,52,18,47,,54',
',,43,,46,,49,12,,48,37,40,,45,38,10,11,,,68,17,,,39,,,15,16,,,,,60,63',
'69,,61,55,,56,44,,,,36,64,,66,67,,,,50,51,53,52,18,47,,54,,,43,,46,',
'49,12,,48,37,40,,45,38,10,11,,,68,17,,,39,,,15,16,,,,,60,63,69,,61,55',
',56,44,,,,36,64,,66,67,,,,50,51,53,52,18,47,,54,,,172,187,178,188,49',
'180,190,181,37,171,,174,169,,,,,68,17,191,186,170,,,15,168,,,,60,63',
',69,61,,,,189,173,,,,36,64,,66,67,,,,182,183,185,184,,179,,54,60,63',
',,61,55,,56,,,136,,,133,,,,,,,,,,,18,,,,,,43,,46,69,49,115,,48,37,40',
',45,38,137,64,,,68,17,,,39,,,15,16,,,,,60,63,69,,61,55,,56,44,,,,36',
'64,,66,67,,,,50,51,53,52,18,47,,54,,,43,,46,,49,115,,48,37,40,,45,38',
',,,,68,17,,,39,,,15,16,,,,,60,63,69,,61,55,,56,44,,,,36,64,,66,67,,',
',50,51,53,52,18,47,,54,,,43,,46,,49,115,,48,37,40,,45,38,,,,,68,17,',
',39,,,15,16,,,,,60,63,69,,61,55,,56,44,,,,36,64,,66,67,,,,50,51,53,52',
'18,47,,54,,,43,,46,,49,115,,48,37,40,,45,38,,,,,68,17,,,39,,,15,16,',
',,,60,63,69,,61,55,,56,44,,,,36,64,,66,67,,,,50,51,53,52,18,47,,54,',
',43,,46,,49,115,,48,37,40,,45,38,,,,,68,17,,,39,,,15,16,,,,,60,63,69',
',61,55,,56,44,,,,36,64,,66,67,,,,50,51,53,52,18,47,,54,,,43,,46,,49',
'115,,48,37,40,,45,38,,,,,68,17,,,39,,,15,16,,,,,60,63,69,,61,55,,56',
'44,,,,36,64,,66,67,,,,50,51,53,52,18,47,,54,,,43,,46,,49,115,,48,37',
'40,,45,38,,,,,68,17,,,39,,,15,16,,,,,60,63,69,,61,55,,56,44,,,,36,64',
',66,67,,,,50,51,53,52,18,47,,54,,,43,,46,,49,115,,48,37,40,,45,38,,',
',,68,17,,,39,,,15,16,,,,,60,63,69,,61,55,,56,44,,,,36,64,,66,67,,,,50',
'51,53,52,18,47,,54,,,43,,46,,49,115,,48,37,40,,45,38,,,,,68,17,,,39',
',,15,16,,,,,60,63,69,,61,55,,56,44,,,,36,64,,66,67,,,,50,51,53,52,18',
'47,,54,,,43,,46,,49,115,,48,37,40,,45,38,,,,,68,17,,,39,,,15,16,,,,',
'60,63,69,,61,55,,56,44,,,,36,64,,66,67,,,,50,51,53,52,18,47,,54,,,43',
',46,,49,115,,48,37,40,,45,38,,,,,68,17,,,39,,,15,16,,,,,60,63,69,,61',
'55,,56,44,,,,36,64,,66,67,,,,50,51,53,52,18,47,,54,,,43,,46,,49,115',
',48,37,40,,45,38,,,,,68,17,,,39,,,15,16,,,,,60,63,69,,61,55,,56,44,',
',,36,64,,66,67,,,,50,51,53,52,18,47,,54,,,43,,46,,49,115,,48,37,40,',
'45,38,,,,,68,17,,,39,,,15,16,,,,,60,63,69,,61,55,,56,44,,,,36,64,,66',
'67,,,,50,51,53,52,18,47,,54,,,43,,46,,49,115,,48,37,40,,45,38,,,,,68',
'17,,,39,,,15,16,,,,,60,63,69,,61,55,,56,44,,,,36,64,,66,67,,,,50,51',
'53,52,18,47,,54,,,43,,46,,49,115,,48,37,40,,45,38,,,,,68,17,,,39,,,15',
'16,,,,,60,63,69,,61,55,,56,44,,,,36,64,,66,67,,,,50,51,53,52,18,47,',
'54,,,43,,46,,49,115,,48,37,40,,45,38,,,,,68,17,,,39,,,15,16,,,,,60,63',
'69,,61,55,,56,44,,,,36,64,,66,67,,,,50,51,53,52,18,47,,54,,,43,,46,',
'49,115,,48,37,40,,45,38,,,,,68,17,,,39,,,15,16,,,,,60,63,69,,61,55,',
'56,44,,,,36,64,,66,67,,,,50,51,53,52,18,47,,54,,,43,,46,,49,115,,48',
'37,40,,45,38,,,,,68,17,,,39,,,15,16,,,,,60,63,69,,61,55,,56,44,,,,36',
'64,,66,67,,,,50,51,53,52,18,47,,54,,,43,,46,,49,115,,48,37,40,,45,38',
',,,,68,17,,,39,,,15,16,,,,,60,63,69,,61,55,,56,44,,,,36,64,,66,67,,',
',50,51,53,52,18,47,,54,,,43,,46,,49,115,,48,37,40,,45,38,,,,,68,17,',
',39,,,15,16,,,,,,,69,,,,,,44,,,215,36,64,,66,67,,,,50,51,53,52,,47,',
'54,60,63,,,61,55,,56,,,,,,,,,,,,,,,,,18,217,,,,,43,,46,,49,12,,48,37',
'40,,45,38,10,11,,,68,17,,,39,,,15,16,,,,,60,63,69,,61,55,,56,44,,,,36',
'64,,66,67,,,,50,51,53,52,18,47,,54,,,43,,46,,49,12,,48,37,40,,45,38',
'10,11,,,68,17,,,39,,,15,16,,,,,60,63,69,,61,55,,56,44,,,,36,64,,66,67',
',,,50,51,53,52,18,47,,54,,,43,,46,,49,12,,48,37,40,,45,38,10,11,,,68',
'17,,,39,,,15,16,,,,,60,63,69,,61,55,,56,44,,,,36,64,,66,67,,,,50,51',
'53,52,18,47,,54,,,43,,46,,49,115,,48,37,40,,45,38,,,,,68,17,,,39,,,15',
'16,,,,,60,63,69,,61,55,,56,44,,,,36,64,,66,67,,,,50,51,53,52,18,47,',
'54,,,43,,46,,49,115,,48,37,40,,45,38,,,,,68,17,,,39,,,15,16,,,,60,63',
',69,61,,,,,44,,,,36,64,,66,67,,,,50,51,53,52,,47,,54,60,63,,,61,55,',
'56,381,,136,,,133,,,,,,,,,,,18,,,,,,43,,46,69,49,115,,48,37,40,,45,38',
'137,64,,,68,17,,,39,,,15,16,,,,,60,63,69,,61,55,,56,44,,,,36,64,,66',
'67,,,,50,51,53,52,18,47,,54,,,43,,46,,49,12,,48,37,40,,45,38,10,11,',
',68,17,,,39,,,15,16,,,,,60,63,69,,61,55,,56,44,,,,36,64,,66,67,,,,50',
'51,53,52,18,47,,54,,,43,,46,,49,115,,48,37,40,,45,38,,,,,68,17,,,39',
',,15,16,,,,,60,63,69,,61,55,,56,44,,,,36,64,,66,67,,,,50,51,53,52,18',
'47,,54,,,43,,46,,49,115,,48,37,40,,45,38,,,,,68,17,,,39,,,15,16,,,,',
'60,63,69,,61,55,,56,44,,,,36,64,,66,67,,,,50,51,53,52,18,47,,54,,,43',
',46,,49,115,,48,37,40,,45,38,,,,,68,17,,,39,,,15,16,,,,,60,63,69,,61',
'55,,56,44,,,,36,64,,66,67,,,,50,51,53,52,18,47,,54,,,43,,46,,49,115',
',48,37,40,,45,38,,,,,68,17,,,39,,,15,16,,,,,60,63,69,,61,55,,56,44,',
',,36,64,,66,67,,,,50,51,53,52,18,47,,54,,,43,,46,,49,115,,48,37,40,',
'45,38,,,,,68,17,,,39,,,15,16,,,,,60,63,69,,61,55,,56,44,,,,36,64,,66',
'67,,,,50,51,53,52,18,47,,54,,,43,,46,,49,115,,48,37,40,,45,38,,,,,68',
'17,,,39,,,15,16,,,,,60,63,69,,61,55,,56,44,,,,36,64,,66,67,,,,50,51',
'53,52,18,47,,54,,,43,,46,,49,115,,48,37,40,,45,38,,,,,68,17,,,39,,,15',
'16,,,,,60,63,69,,61,55,,56,44,,,,36,64,,66,67,,,,50,51,53,52,18,47,',
'54,,,43,,46,,49,115,,48,37,40,,45,38,,,,,68,17,,,39,,,15,16,,,,,60,63',
'69,,61,55,,56,44,,,,36,64,,66,67,,,,50,51,53,52,18,47,,54,,,43,,46,',
'49,115,,48,37,40,,45,38,,,,,68,17,,,39,,,15,16,,,,,,,69,,,,,,44,,,,36',
'64,,66,67,,,,50,51,53,52,,47,,54,60,63,,,61,55,,56,296,187,295,188,',
'293,190,297,,290,,292,294,,,,18,245,,191,186,298,43,,46,291,49,12,,48',
'37,40,,45,38,10,11,189,299,68,17,,,39,,,15,16,,,302,303,301,300,69,304',
',,,,44,,,,36,64,,66,67,,,,50,51,53,52,,47,,54,60,63,,,61,55,,56,316',
'82,,,,,,,,,,,,,,103,18,106,,101,102,,43,,46,,49,12,,48,37,40,,45,38',
'10,11,,,68,17,105,,39,,,15,16,,,,,,,69,,84,85,,,44,,,83,36,64,,66,67',
',,,50,51,53,52,,47,,54,60,63,,,61,55,,56,326,82,,,,,,,,,,,,,,103,18',
'106,,101,102,,43,,46,,49,12,,48,37,40,,45,38,10,11,,,68,17,105,,39,',
',15,16,,,,,,,69,,84,85,,,44,,,83,36,64,,66,67,,,,50,51,53,52,,47,,54',
'60,63,,,61,55,,56,328,,,,,,,,,,,,,,,,18,,,,,,43,,46,,49,12,,48,37,40',
',45,38,10,11,,,68,17,,,39,,,15,16,,,,,60,63,69,,61,55,,56,44,,,,36,64',
',66,67,,,,50,51,53,52,18,47,,54,,,43,,46,,49,12,,48,37,40,,45,38,10',
'11,,,68,17,,,39,,,15,16,,,,,60,63,69,,61,55,,56,44,,,,36,64,,66,67,',
',,50,51,53,52,18,47,,54,,,43,,46,,49,12,,48,37,40,,45,38,10,11,,,68',
'17,,,39,,,15,16,,,,,,,69,,,,,,44,,,,36,64,,66,67,,,,50,51,53,52,,47',
',54,60,63,,,61,55,,56,342,,,,,,,,,,,,,,,,18,,,,,,43,,46,,49,12,,48,37',
'40,,45,38,10,11,,,68,17,,,39,,,15,16,,,,,60,63,69,,61,55,,56,44,,,,36',
'64,,66,67,,,,50,51,53,52,18,47,,54,,,43,,46,,49,115,,48,37,40,,45,38',
',,,,68,17,,,39,,,15,16,,,,,60,63,69,,61,55,,56,44,,,,36,64,,66,67,,',
',50,51,53,52,18,47,,54,,,43,,46,,49,12,,48,37,40,,45,38,10,11,,,68,17',
',,39,,,15,16,,,,,,,69,,,,,,44,,,,36,64,,66,67,82,,248,50,51,53,52,,47',
',54,,98,93,103,,106,,101,102,,94,96,95,97,,60,63,,,61,,,,,,,,,,105,',
',,100,99,,,86,87,89,88,91,92,,84,85,82,,247,,,83,,,136,,,133,98,93,103',
',106,,101,102,,94,96,95,97,,,90,,,,69,,,,,,,,,105,137,64,,100,99,,,86',
'87,89,88,91,92,,84,85,82,,246,,,83,,,,,,,98,93,103,,106,,101,102,,94',
'96,95,97,,,90,,,,,,,,,,,,,105,,,,100,99,,,86,87,89,88,91,92,82,84,85',
',,,,,83,,,,98,93,103,309,106,,101,102,,94,96,95,97,,,,,,90,,,,,,,,,',
'105,,,,100,99,,82,86,87,89,88,91,92,,84,85,,,98,93,103,83,106,,101,102',
',94,96,95,97,,,,,,,,,,,,,90,,,105,,,,100,99,,82,86,87,89,88,91,92,,84',
'85,,,98,93,103,83,106,,101,102,,94,96,95,97,,,,,,,,,,,,,90,,,105,,,',
'100,99,,82,86,87,89,88,91,92,,84,85,,,98,93,103,83,106,,101,102,,94',
'96,95,97,,,,,,,,,,,,,90,,,105,,,,100,99,,82,86,87,89,88,91,92,,84,85',
',,98,93,103,83,106,,101,102,,94,96,95,97,,,,,,,,,,,,,90,,,105,,,,100',
'99,,82,86,87,89,88,91,92,,84,85,,,98,93,103,83,106,,101,102,,94,96,95',
'97,,272,273,,,,,,,,,,90,,,105,,,,100,99,,,86,87,89,88,91,92,82,84,85',
',,284,,,83,,,,98,93,103,,106,,101,102,,94,96,95,97,,,,,,90,,,,,,,,,',
'105,,,,100,99,,82,86,87,89,88,91,92,,84,85,,,98,93,103,83,106,,101,102',
'82,94,96,95,97,,,,,,,,98,93,103,,106,90,101,102,105,94,96,95,97,99,',
',86,87,89,88,91,92,,84,85,,,,105,,83,,,,,82,86,87,89,88,91,92,,84,85',
',,,93,103,83,106,90,101,102,82,94,,,,,,,,,,,,93,103,,106,90,101,102',
'105,94,,,,,,,86,87,89,88,91,92,,84,85,,,,105,,83,,,,,,86,87,89,88,91',
'92,82,84,85,,,,,,83,,90,,98,93,103,276,106,,101,102,82,94,96,95,97,',
',,,,90,,,93,103,,106,,101,102,105,94,,,100,99,,,86,87,89,88,91,92,,84',
'85,,,,105,,83,,,,,82,86,87,89,88,91,92,,84,85,,,98,93,103,83,106,90',
'101,102,82,94,96,95,97,,,,,,,,,93,103,,106,90,101,102,105,94,,,100,99',
',82,86,87,89,88,91,92,,84,85,,,,105,103,83,106,,101,102,82,86,87,89',
'88,91,92,,84,85,,,,,103,83,106,90,101,102,105,,,,,,,82,86,87,89,88,91',
'92,,84,85,90,,,105,103,83,106,,101,102,82,86,87,89,88,91,92,,84,85,',
',98,93,103,83,106,90,101,102,105,94,96,95,97,,,,86,87,89,88,,,,84,85',
'90,,,105,,83,,100,99,,82,86,87,89,88,91,92,,84,85,,,98,93,103,83,106',
'90,101,102,,94,96,95,97,,,,,,,,,,,,,90,,,105,,,,100,99,,82,86,87,89',
'88,91,92,,84,85,,,98,93,103,83,106,82,101,102,,94,96,95,97,,,,,,,103',
',106,,101,102,90,,,105,,,,100,99,,,86,87,89,88,91,92,,84,85,105,,,,',
'83,,82,86,87,89,88,,,,84,85,,,,,103,83,106,,101,102,90,,,,,82,,,,,,',
',,,,,90,,103,105,106,,101,102,82,,,,,89,88,,,,84,85,98,93,103,,106,83',
'101,102,105,94,96,95,97,,,,60,63,89,88,61,,,84,85,,,90,105,,83,,100',
'99,,,86,87,89,88,91,92,,84,85,,,,,,83,,90,,,136,,,133,,,,296,187,295',
'188,,293,190,297,,290,90,292,294,,,,69,,,191,186,298,,,,291,137,64,',
',,,,,,,,189,299,,,,,,,,,,,,302,303,301,300,,304,296,187,295,188,,293',
'190,297,,290,,292,294,,,,,,,191,186,298,,,,291,,,,,,,,,,,,189,299,,',
',,,,,,,,,302,303,301,300,,304,296,187,295,188,,293,190,297,,290,,292',
'294,,,,,,,191,186,298,,,,291,,,,,,,,,,,,189,299,,,,,,,,,,,,302,303,301',
'300,,304' ]
        racc_action_table = arr = ::Array.new(6812, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

clist = [
'0,0,251,170,0,0,244,0,177,195,171,184,242,253,169,183,185,182,347,347',
'244,372,329,195,0,195,372,195,195,131,0,329,0,242,0,0,178,0,0,0,178',
'0,0,0,0,170,253,0,0,195,177,0,171,184,0,0,169,183,185,182,412,412,0',
'255,412,412,180,412,0,193,180,195,0,0,193,0,0,0,12,256,0,0,0,0,412,0',
'373,0,373,46,412,121,412,46,412,412,153,412,412,412,143,412,412,143',
'121,129,12,412,412,153,12,412,121,128,412,412,318,153,127,47,4,4,412',
'47,4,4,121,4,412,318,179,153,412,412,179,412,412,318,148,148,412,412',
'412,412,4,412,326,412,326,115,4,269,4,115,4,4,229,4,4,4,4,4,4,4,4,229',
'312,4,4,274,312,4,275,312,4,4,250,277,229,249,406,406,4,139,406,406',
'229,406,4,7,7,7,4,4,120,4,4,118,141,243,4,4,4,4,406,4,285,4,287,289',
'406,291,406,307,406,406,241,406,406,406,240,406,406,406,406,151,151',
'406,406,151,310,406,234,314,406,406,315,317,7,7,7,7,406,146,227,110',
'108,325,406,224,327,328,406,406,223,406,406,107,104,103,406,406,406',
'406,196,406,334,406,405,405,221,346,405,405,217,405,405,200,196,348',
'196,72,196,196,70,65,64,216,356,157,358,200,405,200,359,200,200,362',
'405,162,405,367,405,405,196,405,405,405,42,405,405,405,405,163,164,405',
'405,200,41,405,376,377,405,405,379,380,196,383,386,165,405,391,200,200',
'392,398,405,8,167,200,405,405,5,405,405,409,1,414,405,405,405,405,114',
'405,416,405,403,403,418,422,403,403,,403,403,116,114,,114,,114,114,',
',,,,,,116,403,116,,116,116,,403,,403,,403,403,114,403,403,403,,403,403',
'403,403,,,403,403,116,,403,,,403,403,,,,,174,174,403,,174,174,,174,403',
',,,403,403,,403,403,,,,403,403,403,403,174,403,,403,,,174,,174,,174',
'174,,174,174,174,,174,174,,,,,174,174,,,174,,,174,174,,,,,10,10,174',
',10,10,,10,174,,,,174,174,,174,174,,,,174,174,174,174,10,174,,174,,',
'10,,10,,10,10,,10,10,10,,10,10,10,10,,,10,10,,,10,,,10,10,,,,,11,11',
'10,,11,11,,11,10,,,,10,10,,10,10,,,,10,10,10,10,11,10,,10,,,11,,11,',
'11,11,,11,11,11,,11,11,11,11,,,11,11,,,11,,,11,11,,,,,,,11,,,,,,11,',
',,11,11,,11,11,,,,11,11,11,11,194,11,,11,387,387,,,387,387,,387,387',
'117,194,,194,,194,194,,,,,,,,117,387,117,,117,117,,387,,387,,387,387',
'194,387,387,387,,387,387,387,387,,,387,387,117,,387,,,387,387,,,,,15',
'15,387,,15,15,,15,387,,,,387,387,,387,387,,,,387,387,387,387,15,387',
',387,,,15,,15,,15,15,,15,15,15,,15,15,,,,,15,15,,,15,,,15,15,,,,,16',
'16,15,,16,16,,16,15,,,,15,15,,15,15,,,,15,15,15,15,16,15,,15,,,16,,16',
',16,16,,16,16,16,,16,16,,,,,16,16,,,16,,,16,16,,,,,17,17,16,,17,17,',
'17,16,,,,16,16,,16,16,,,,16,16,16,16,17,16,,16,,,17,,17,,17,17,,17,17',
'17,,17,17,,,,,17,17,,,17,,,17,17,,,,,18,18,17,,18,18,,18,17,,,,17,17',
',17,17,,,,17,17,17,17,18,17,,17,,,18,,18,,18,18,,18,18,18,,18,18,18',
'18,,,18,18,,,18,,,18,18,,,,,375,375,18,,375,375,,375,18,,,,18,18,,18',
'18,,,,18,18,18,18,375,18,,18,,,375,,375,,375,375,,375,375,375,,375,375',
',,,,375,375,,,375,,,375,375,,,,,173,173,375,,173,173,,173,375,,,,375',
'375,,375,375,,,,375,375,375,375,173,375,,375,,,173,,173,,173,173,,173',
'173,173,,173,173,,,,,173,173,,,173,,,173,173,,,,,43,43,173,,43,43,,43',
'173,,,,173,173,,173,173,,,,173,173,173,173,43,173,,173,,,43,,43,,43',
'43,,43,43,43,,43,43,,,,,43,43,,,43,,,43,43,,,,,44,44,43,,44,44,,44,43',
',,,43,43,,43,43,,,,43,43,43,43,44,43,,43,,,44,,44,,44,44,,44,44,44,',
'44,44,,,,,44,44,,,44,,,44,44,,,,,45,45,44,,45,45,,45,44,,,,44,44,,44',
'44,,,,44,44,44,44,45,44,,44,,,45,,45,,45,45,,45,45,45,,45,45,,,,,45',
'45,,,45,,,45,45,,,,,363,363,45,,363,363,,363,45,,,,45,45,,45,45,,,,45',
'45,45,45,363,45,,45,,,363,,363,,363,363,,363,363,363,,363,363,363,363',
',,363,363,,,363,,,363,363,,,,,357,357,363,,357,357,,357,363,,,,363,363',
',363,363,,,,363,363,363,363,357,363,,363,,,357,,357,,357,357,,357,357',
'357,,357,357,,,,,357,357,,,357,,,357,357,,,,,172,172,357,,172,172,,172',
'357,,,,357,357,,357,357,,,,357,357,357,357,172,357,,357,,,172,,172,',
'172,172,,172,172,172,,172,172,,,,,172,172,,,172,,,172,172,,,,,54,54',
'172,,54,54,54,54,172,,,,172,172,,172,172,,,,172,172,172,172,54,172,',
'172,,,54,,54,,54,54,,54,54,54,,54,54,54,54,,,54,54,,,54,,,54,54,,,,',
'55,55,54,,55,55,55,55,54,,,,54,54,,54,54,,,,54,54,54,54,55,54,,54,,',
'55,,55,,55,55,,55,55,55,,55,55,55,55,,,55,55,,,55,,,55,55,,,,,,,55,',
',,,,55,,,,55,55,,55,55,,,,55,55,55,55,,55,,55,56,56,,,56,56,,56,56,',
',,,,,,,,,,,,,,56,,,,,,56,,56,,56,56,,56,56,56,,56,56,56,56,,,56,56,',
',56,,,56,56,,,,,62,62,56,,62,62,,62,56,,,,56,56,,56,56,,,,56,56,56,56',
'62,56,,56,,,62,,62,,62,62,,62,62,62,,62,62,62,62,,,62,62,,,62,,,62,62',
',,,,168,168,62,,168,168,,168,62,,168,,62,62,,62,62,,,,62,62,62,62,168',
'62,,62,,,168,,168,,168,168,,168,168,168,,168,168,,,,,168,168,,,168,',
',168,168,,,,,,,168,,,,,,168,,,,168,168,,168,168,,,,168,168,168,168,',
'168,,168,155,155,,,155,155,,155,155,,,,,,,,,,,,,,,,155,,,,,,155,,155',
',155,155,,155,155,155,,155,155,155,155,,,155,155,,,155,,,155,155,,,',
',67,67,155,,67,67,,67,155,,,,155,155,,155,155,,,,155,155,155,155,67',
'155,,155,,,67,,67,,67,67,,67,67,67,,67,67,,,,,67,67,,,67,,,67,67,,,',
',215,215,67,,215,215,,215,67,,,,67,67,,67,67,,,,67,67,67,67,215,67,',
'67,,,215,,215,,215,215,,215,215,215,,215,215,,,,,215,215,,,215,,,215',
'215,,,,,71,71,215,,71,71,,71,215,,,,215,215,,215,215,,,,215,215,215',
'215,71,215,,215,,,71,,71,,71,71,,71,71,71,,71,71,71,71,,,71,71,,,71',
',,71,71,,,,,152,152,71,,152,152,,152,71,,,,71,71,,71,71,,,,71,71,71',
'71,152,71,,71,,,152,,152,,152,152,,152,152,152,,152,152,152,152,,,152',
'152,,,152,,,152,152,,,,,73,73,152,,73,73,,73,152,,,,152,152,,152,152',
',,,152,152,152,152,73,152,,152,,,73,,73,,73,73,,73,73,73,,73,73,73,73',
',,73,73,,,73,,,73,73,,,,,74,74,73,,74,74,,74,73,,,,73,73,,73,73,,,,73',
'73,73,73,74,73,,73,,,74,,74,,74,74,,74,74,74,,74,74,74,74,,,74,74,,',
'74,,,74,74,,,,,75,75,74,,75,75,,75,74,,,,74,74,,74,74,,,,74,74,74,74',
'75,74,,74,,,75,,75,,75,75,,75,75,75,,75,75,75,75,,,75,75,,,75,,,75,75',
',,,,76,76,75,,76,76,,76,75,,,,75,75,,75,75,,,,75,75,75,75,76,75,,75',
',,76,,76,,76,76,,76,76,76,,76,76,76,76,,,76,76,,,76,,,76,76,,,,,77,77',
'76,,77,77,,77,76,,,,76,76,,76,76,,,,76,76,76,76,77,76,,76,,,77,,77,',
'77,77,,77,77,77,,77,77,77,77,,,77,77,,,77,,,77,77,,,,,78,78,77,,78,78',
',78,77,,,,77,77,,77,77,,,,77,77,77,77,78,77,,77,,,78,,78,,78,78,,78',
'78,78,,78,78,78,78,,,78,78,,,78,,,78,78,,,,,79,79,78,,79,79,,79,78,',
',,78,78,,78,78,,,,78,78,78,78,79,78,,78,,,79,,79,,79,79,,79,79,79,,79',
'79,79,79,,,79,79,,,79,,,79,79,,,,,80,80,79,,80,80,,80,79,,,,79,79,,79',
'79,,,,79,79,79,79,80,79,,79,,,80,,80,,80,80,,80,80,80,,80,80,80,80,',
',80,80,,,80,,,80,80,,,,,81,81,80,,81,81,,81,80,,,,80,80,,80,80,,,,80',
'80,80,80,81,80,,80,,,81,81,81,81,81,81,81,81,81,81,,81,81,,,,,81,81',
'81,81,81,,,81,81,,,,336,336,,81,336,,,,81,81,,,,81,81,,81,81,,,,81,81',
'81,81,,81,,81,82,82,,,82,82,,82,,,336,,,336,,,,,,,,,,,82,,,,,,82,,82',
'336,82,82,,82,82,82,,82,82,336,336,,,82,82,,,82,,,82,82,,,,,83,83,82',
',83,83,,83,82,,,,82,82,,82,82,,,,82,82,82,82,83,82,,82,,,83,,83,,83',
'83,,83,83,83,,83,83,,,,,83,83,,,83,,,83,83,,,,,84,84,83,,84,84,,84,83',
',,,83,83,,83,83,,,,83,83,83,83,84,83,,83,,,84,,84,,84,84,,84,84,84,',
'84,84,,,,,84,84,,,84,,,84,84,,,,,85,85,84,,85,85,,85,84,,,,84,84,,84',
'84,,,,84,84,84,84,85,84,,84,,,85,,85,,85,85,,85,85,85,,85,85,,,,,85',
'85,,,85,,,85,85,,,,,86,86,85,,86,86,,86,85,,,,85,85,,85,85,,,,85,85',
'85,85,86,85,,85,,,86,,86,,86,86,,86,86,86,,86,86,,,,,86,86,,,86,,,86',
'86,,,,,87,87,86,,87,87,,87,86,,,,86,86,,86,86,,,,86,86,86,86,87,86,',
'86,,,87,,87,,87,87,,87,87,87,,87,87,,,,,87,87,,,87,,,87,87,,,,,88,88',
'87,,88,88,,88,87,,,,87,87,,87,87,,,,87,87,87,87,88,87,,87,,,88,,88,',
'88,88,,88,88,88,,88,88,,,,,88,88,,,88,,,88,88,,,,,89,89,88,,89,89,,89',
'88,,,,88,88,,88,88,,,,88,88,88,88,89,88,,88,,,89,,89,,89,89,,89,89,89',
',89,89,,,,,89,89,,,89,,,89,89,,,,,90,90,89,,90,90,,90,89,,,,89,89,,89',
'89,,,,89,89,89,89,90,89,,89,,,90,,90,,90,90,,90,90,90,,90,90,,,,,90',
'90,,,90,,,90,90,,,,,91,91,90,,91,91,,91,90,,,,90,90,,90,90,,,,90,90',
'90,90,91,90,,90,,,91,,91,,91,91,,91,91,91,,91,91,,,,,91,91,,,91,,,91',
'91,,,,,92,92,91,,92,92,,92,91,,,,91,91,,91,91,,,,91,91,91,91,92,91,',
'91,,,92,,92,,92,92,,92,92,92,,92,92,,,,,92,92,,,92,,,92,92,,,,,93,93',
'92,,93,93,,93,92,,,,92,92,,92,92,,,,92,92,92,92,93,92,,92,,,93,,93,',
'93,93,,93,93,93,,93,93,,,,,93,93,,,93,,,93,93,,,,,94,94,93,,94,94,,94',
'93,,,,93,93,,93,93,,,,93,93,93,93,94,93,,93,,,94,,94,,94,94,,94,94,94',
',94,94,,,,,94,94,,,94,,,94,94,,,,,95,95,94,,95,95,,95,94,,,,94,94,,94',
'94,,,,94,94,94,94,95,94,,94,,,95,,95,,95,95,,95,95,95,,95,95,,,,,95',
'95,,,95,,,95,95,,,,,96,96,95,,96,96,,96,95,,,,95,95,,95,95,,,,95,95',
'95,95,96,95,,95,,,96,,96,,96,96,,96,96,96,,96,96,,,,,96,96,,,96,,,96',
'96,,,,,97,97,96,,97,97,,97,96,,,,96,96,,96,96,,,,96,96,96,96,97,96,',
'96,,,97,,97,,97,97,,97,97,97,,97,97,,,,,97,97,,,97,,,97,97,,,,,98,98',
'97,,98,98,,98,97,,,,97,97,,97,97,,,,97,97,97,97,98,97,,97,,,98,,98,',
'98,98,,98,98,98,,98,98,,,,,98,98,,,98,,,98,98,,,,,99,99,98,,99,99,,99',
'98,,,,98,98,,98,98,,,,98,98,98,98,99,98,,98,,,99,,99,,99,99,,99,99,99',
',99,99,,,,,99,99,,,99,,,99,99,,,,,100,100,99,,100,100,,100,99,,,,99',
'99,,99,99,,,,99,99,99,99,100,99,,99,,,100,,100,,100,100,,100,100,100',
',100,100,,,,,100,100,,,100,,,100,100,,,,,101,101,100,,101,101,,101,100',
',,,100,100,,100,100,,,,100,100,100,100,101,100,,100,,,101,,101,,101',
'101,,101,101,101,,101,101,,,,,101,101,,,101,,,101,101,,,,,,,101,,,,',
',101,,,101,101,101,,101,101,,,,101,101,101,101,,101,,101,102,102,,,102',
'102,,102,,,,,,,,,,,,,,,,,102,102,,,,,102,,102,,102,102,,102,102,102',
',102,102,102,102,,,102,102,,,102,,,102,102,,,,,333,333,102,,333,333',
',333,102,,,,102,102,,102,102,,,,102,102,102,102,333,102,,102,,,333,',
'333,,333,333,,333,333,333,,333,333,333,333,,,333,333,,,333,,,333,333',
',,,,332,332,333,,332,332,,332,333,,,,333,333,,333,333,,,,333,333,333',
'333,332,333,,333,,,332,,332,,332,332,,332,332,332,,332,332,332,332,',
',332,332,,,332,,,332,332,,,,,105,105,332,,105,105,,105,332,,,,332,332',
',332,332,,,,332,332,332,332,105,332,,332,,,105,,105,,105,105,,105,105',
'105,,105,105,,,,,105,105,,,105,,,105,105,,,,,106,106,105,,106,106,,106',
'105,,,,105,105,,105,105,,,,105,105,105,105,106,105,,105,,,106,,106,',
'106,106,,106,106,106,,106,106,,,,,106,106,,,106,,,106,106,,,,181,181',
',106,181,,,,,106,,,,106,106,,106,106,,,,106,106,106,106,,106,,106,330',
'330,,,330,330,,330,330,,181,,,181,,,,,,,,,,,330,,,,,,330,,330,181,330',
'330,,330,330,330,,330,330,181,181,,,330,330,,,330,,,330,330,,,,,323',
'323,330,,323,323,,323,330,,,,330,330,,330,330,,,,330,330,330,330,323',
'330,,330,,,323,,323,,323,323,,323,323,323,,323,323,323,323,,,323,323',
',,323,,,323,323,,,,,109,109,323,,109,109,,109,323,,,,323,323,,323,323',
',,,323,323,323,323,109,323,,323,,,109,,109,,109,109,,109,109,109,,109',
'109,,,,,109,109,,,109,,,109,109,,,,,322,322,109,,322,322,,322,109,,',
',109,109,,109,109,,,,109,109,109,109,322,109,,109,,,322,,322,,322,322',
',322,322,322,,322,322,,,,,322,322,,,322,,,322,322,,,,,319,319,322,,319',
'319,,319,322,,,,322,322,,322,322,,,,322,322,322,322,319,322,,322,,,319',
',319,,319,319,,319,319,319,,319,319,,,,,319,319,,,319,,,319,319,,,,',
'308,308,319,,308,308,,308,319,,,,319,319,,319,319,,,,319,319,319,319',
'308,319,,319,,,308,,308,,308,308,,308,308,308,,308,308,,,,,308,308,',
',308,,,308,308,,,,,284,284,308,,284,284,,284,308,,,,308,308,,308,308',
',,,308,308,308,308,284,308,,308,,,284,,284,,284,284,,284,284,284,,284',
'284,,,,,284,284,,,284,,,284,284,,,,,283,283,284,,283,283,,283,284,,',
',284,284,,284,284,,,,284,284,284,284,283,284,,284,,,283,,283,,283,283',
',283,283,283,,283,283,,,,,283,283,,,283,,,283,283,,,,,281,281,283,,281',
'281,,281,283,,,,283,283,,283,283,,,,283,283,283,283,281,283,,283,,,281',
',281,,281,281,,281,281,281,,281,281,,,,,281,281,,,281,,,281,281,,,,',
'280,280,281,,280,280,,280,281,,,,281,281,,281,281,,,,281,281,281,281',
'280,281,,281,,,280,,280,,280,280,,280,280,280,,280,280,,,,,280,280,',
',280,,,280,280,,,,,279,279,280,,279,279,,279,280,,,,280,280,,280,280',
',,,280,280,280,280,279,280,,280,,,279,,279,,279,279,,279,279,279,,279',
'279,,,,,279,279,,,279,,,279,279,,,,,,,279,,,,,,279,,,,279,279,,279,279',
',,,279,279,279,279,,279,,279,122,122,,,122,122,,122,278,278,278,278',
',278,278,278,,278,,278,278,,,,122,122,,278,278,278,122,,122,278,122',
'122,,122,122,122,,122,122,122,122,278,278,122,122,,,122,,,122,122,,',
'278,278,278,278,122,278,,,,,122,,,,122,122,,122,122,,,,122,122,122,122',
',122,,122,232,232,,,232,232,,232,232,199,,,,,,,,,,,,,,199,232,199,,199',
'199,,232,,232,,232,232,,232,232,232,,232,232,232,232,,,232,232,199,',
'232,,,232,232,,,,,,,232,,199,199,,,232,,,199,232,232,,232,232,,,,232',
'232,232,232,,232,,232,246,246,,,246,246,,246,246,201,,,,,,,,,,,,,,201',
'246,201,,201,201,,246,,246,,246,246,,246,246,246,,246,246,246,246,,',
'246,246,201,,246,,,246,246,,,,,,,246,,201,201,,,246,,,201,246,246,,246',
'246,,,,246,246,246,246,,246,,246,247,247,,,247,247,,247,247,,,,,,,,',
',,,,,,,247,,,,,,247,,247,,247,247,,247,247,247,,247,247,247,247,,,247',
'247,,,247,,,247,247,,,,,264,264,247,,264,264,,264,247,,,,247,247,,247',
'247,,,,247,247,247,247,264,247,,247,,,264,,264,,264,264,,264,264,264',
',264,264,264,264,,,264,264,,,264,,,264,264,,,,,259,259,264,,259,259',
',259,264,,,,264,264,,264,264,,,,264,264,264,264,259,264,,264,,,259,',
'259,,259,259,,259,259,259,,259,259,259,259,,,259,259,,,259,,,259,259',
',,,,,,259,,,,,,259,,,,259,259,,259,259,,,,259,259,259,259,,259,,259',
'258,258,,,258,258,,258,258,,,,,,,,,,,,,,,,258,,,,,,258,,258,,258,258',
',258,258,258,,258,258,258,258,,,258,258,,,258,,,258,258,,,,,248,248',
'258,,248,248,,248,258,,,,258,258,,258,258,,,,258,258,258,258,248,258',
',258,,,248,,248,,248,248,,248,248,248,,248,248,,,,,248,248,,,248,,,248',
'248,,,,,254,254,248,,254,254,,254,248,,,,248,248,,248,248,,,,248,248',
'248,248,254,248,,248,,,254,,254,,254,254,,254,254,254,,254,254,254,254',
',,254,254,,,254,,,254,254,,,,,,,254,,,,,,254,,,,254,254,,254,254,126',
',126,254,254,254,254,,254,,254,,126,126,126,,126,,126,126,,126,126,126',
'126,,48,48,,,48,,,,,,,,,,126,,,,126,126,,,126,126,126,126,126,126,,126',
'126,125,,125,,,126,,,48,,,48,125,125,125,,125,,125,125,,125,125,125',
'125,,,126,,,,48,,,,,,,,,125,48,48,,125,125,,,125,125,125,125,125,125',
',125,125,123,,123,,,125,,,,,,,123,123,123,,123,,123,123,,123,123,123',
'123,,,125,,,,,,,,,,,,,123,,,,123,123,,,123,123,123,123,123,123,225,123',
'123,,,,,,123,,,,225,225,225,225,225,,225,225,,225,225,225,225,,,,,,123',
',,,,,,,,,225,,,,225,225,,220,225,225,225,225,225,225,,225,225,,,220',
'220,220,225,220,,220,220,,220,220,220,220,,,,,,,,,,,,,225,,,220,,,,220',
'220,,351,220,220,220,220,220,220,,220,220,,,351,351,351,220,351,,351',
'351,,351,351,351,351,,,,,,,,,,,,,220,,,351,,,,351,351,,352,351,351,351',
'351,351,351,,351,351,,,352,352,352,351,352,,352,352,,352,352,352,352',
',,,,,,,,,,,,351,,,352,,,,352,352,,154,352,352,352,352,352,352,,352,352',
',,154,154,154,352,154,,154,154,,154,154,154,154,,,,,,,,,,,,,352,,,154',
',,,154,154,,353,154,154,154,154,154,154,,154,154,,,353,353,353,154,353',
',353,353,,353,353,353,353,,154,154,,,,,,,,,,154,,,353,,,,353,353,,,353',
'353,353,353,353,353,212,353,353,,,212,,,353,,,,212,212,212,,212,,212',
'212,,212,212,212,212,,,,,,353,,,,,,,,,,212,,,,212,212,,211,212,212,212',
'212,212,212,,212,212,,,211,211,211,212,211,,211,211,210,211,211,211',
'211,,,,,,,,210,210,210,,210,212,210,210,211,210,210,210,210,211,,,211',
'211,211,211,211,211,,211,211,,,,210,,211,,,,,209,210,210,210,210,210',
'210,,210,210,,,,209,209,210,209,211,209,209,208,209,,,,,,,,,,,,208,208',
',208,210,208,208,209,208,,,,,,,209,209,209,209,209,209,,209,209,,,,208',
',209,,,,,,208,208,208,208,208,208,166,208,208,,,,,,208,,209,,166,166',
'166,166,166,,166,166,207,166,166,166,166,,,,,,208,,,207,207,,207,,207',
'207,166,207,,,166,166,,,166,166,166,166,166,166,,166,166,,,,207,,166',
',,,,354,207,207,207,207,207,207,,207,207,,,354,354,354,207,354,166,354',
'354,206,354,354,354,354,,,,,,,,,206,206,,206,207,206,206,354,206,,,354',
'354,,205,354,354,354,354,354,354,,354,354,,,,206,205,354,205,,205,205',
'204,206,206,206,206,206,206,,206,206,,,,,204,206,204,354,204,204,205',
',,,,,,203,205,205,205,205,205,205,,205,205,206,,,204,203,205,203,,203',
'203,355,204,204,204,204,204,204,,204,204,,,355,355,355,204,355,205,355',
'355,203,355,355,355,355,,,,203,203,203,203,,,,203,203,204,,,355,,203',
',355,355,,371,355,355,355,355,355,355,,355,355,,,371,371,371,355,371',
'203,371,371,,371,371,371,371,,,,,,,,,,,,,355,,,371,,,,371,371,,9,371',
'371,371,371,371,371,,371,371,,,9,9,9,371,9,202,9,9,,9,9,9,9,,,,,,,202',
',202,,202,202,371,,,9,,,,9,9,,,9,9,9,9,9,9,,9,9,202,,,,,9,,198,202,202',
'202,202,,,,202,202,,,,,198,202,198,,198,198,9,,,,,197,,,,,,,,,,,,202',
',197,198,197,,197,197,192,,,,,198,198,,,,198,198,192,192,192,,192,198',
'192,192,197,192,192,192,192,,,,252,252,197,197,252,,,197,197,,,198,192',
',197,,192,192,,,192,192,192,192,192,192,,192,192,,,,,,192,,197,,,252',
',,252,,,,309,309,309,309,,309,309,309,,309,192,309,309,,,,252,,,309',
'309,309,,,,309,252,252,,,,,,,,,,309,309,,,,,,,,,,,,309,309,309,309,',
'309,276,276,276,276,,276,276,276,,276,,276,276,,,,,,,276,276,276,,,',
'276,,,,,,,,,,,,276,276,,,,,,,,,,,,276,276,276,276,,276,219,219,219,219',
',219,219,219,,219,,219,219,,,,,,,219,219,219,,,,219,,,,,,,,,,,,219,219',
',,,,,,,,,,,219,219,219,219,,219' ]
        racc_action_check = arr = ::Array.new(6812, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

racc_action_pointer = [
    -2,   346,   nil,   nil,   118,   329,   nil,   173,   328,  6454,
   474,   534,    69,   nil,   nil,   682,   742,   802,   862,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   247,   282,  1042,  1102,  1162,    52,    82,  5565,   nil,
   nil,   nil,   nil,   nil,  1402,  1462,  1550,   nil,   nil,   nil,
   nil,   nil,  1610,   nil,   210,   214,   nil,  1818,   nil,   nil,
   284,  1938,   268,  2058,  2118,  2178,  2238,  2298,  2358,  2418,
  2478,  2538,  2626,  2686,  2746,  2806,  2866,  2926,  2986,  3046,
  3106,  3166,  3226,  3286,  3346,  3406,  3466,  3526,  3586,  3646,
  3706,  3766,  3854,   218,   249,  4034,  4094,   248,   237,  4302,
   219,   nil,   nil,   nil,   345,   112,   358,   626,   170,   nil,
   185,    55,  4870,  5648,   nil,  5591,  5534,    92,    87,    92,
   nil,     8,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   170,
   nil,   185,   nil,    90,   nil,   nil,   231,   nil,   134,   nil,
   nil,   223,  1998,    60,  5890,  1758,   nil,   276,   nil,   nil,
   nil,   nil,   290,   304,   305,   320,  6179,   325,  1670,     2,
    -9,    -2,  1342,   982,   414,   nil,   nil,    -4,    -1,    93,
    29,  4153,     5,     3,    -1,     4,   nil,   nil,   nil,   nil,
   nil,   nil,  6563,    61,   613,     2,   257,  6543,  6518,  4962,
   270,  5050,  6471,  6340,  6313,  6293,  6266,  6199,  6125,  6105,
  6058,  6038,  5991,   nil,   nil,  1878,   274,   203,   nil,  6724,
  5749,   222,   nil,   230,   207,  5702,   nil,   206,   nil,   129,
   nil,   nil,  4958,   nil,   219,   nil,   nil,   nil,   nil,   nil,
   204,   180,   -24,   192,    -7,   nil,  5046,  5134,  5402,   170,
   167,   -36,  6596,   -28,  5462,    55,    71,   nil,  5342,  5254,
   nil,   nil,   nil,   nil,  5194,   nil,   nil,   nil,   nil,   138,
   nil,   nil,   nil,   nil,   157,   162,  6668,   167,  4848,  4782,
  4722,  4662,   nil,  4602,  4542,   193,   nil,   181,   nil,   196,
   nil,   199,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   203,  4482,  6612,
   221,   nil,   129,   nil,   220,   226,   nil,   166,    80,  4422,
   nil,   nil,  4362,  4242,   nil,   237,   113,   240,   218,     9,
  4182,   nil,  3974,  3914,   257,   nil,  2597,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   200,   -62,   266,   nil,
   nil,  5796,  5843,  5937,  6246,  6360,   278,  1282,   219,   284,
   nil,   nil,   284,  1222,   nil,   nil,   nil,   274,   nil,   nil,
   nil,  6407,    13,    53,   nil,   922,   311,   288,   nil,   315,
   316,   nil,   nil,   317,   nil,   nil,   318,   622,   nil,   nil,
   nil,   321,   292,   nil,   nil,   nil,   nil,   nil,   325,   nil,
   nil,   nil,   nil,   354,   nil,   266,   178,   nil,   nil,   335,
   nil,   nil,    58,   nil,   337,   nil,   344,   nil,   348,   nil,
   nil,   nil,   317,   nil,   nil,   nil,   nil ]

racc_action_default = [
    -3,  -244,    -1,    -2,    -4,    -5,    -8,   -10,   -16,   -21,
  -244,  -244,  -244,   -33,   -34,  -244,  -244,  -244,  -244,   -61,
   -62,   -63,   -64,   -65,   -66,   -67,   -68,   -69,   -70,   -71,
   -72,   -73,   -74,   -75,   -76,   -77,   -78,   -79,   -80,   -81,
   -82,   -87,   -91,  -244,  -244,  -244,  -244,  -244,  -244,  -176,
  -177,  -178,  -179,  -180,  -244,  -244,  -244,  -191,  -192,  -193,
  -194,  -195,  -244,  -197,  -244,  -210,  -213,  -244,  -218,  -219,
  -244,  -244,    -7,  -244,  -244,  -244,  -244,  -244,  -244,  -244,
  -244,  -127,  -244,  -244,  -244,  -244,  -244,  -244,  -244,  -244,
  -244,  -244,  -244,  -244,  -244,  -244,  -244,  -244,  -244,  -244,
  -244,  -244,  -244,  -244,  -122,  -243,  -243,   -22,   -23,  -244,
  -243,  -138,  -159,  -160,   -46,  -244,   -47,   -54,  -244,   -88,
  -244,  -244,  -244,  -244,   -98,  -244,  -244,  -243,  -243,  -220,
  -147,  -149,  -150,  -151,  -152,  -153,  -155,  -156,   -14,  -220,
  -182,  -220,  -184,  -244,  -187,  -188,  -244,  -196,  -244,  -201,
  -204,  -244,  -208,  -244,  -244,  -244,   427,    -6,    -9,   -11,
   -12,   -13,   -17,   -18,   -19,   -20,  -244,  -220,  -244,   -80,
   -81,   -82,  -231,  -237,  -225,  -128,  -131,  -244,  -228,  -242,
  -226,  -234,  -177,  -178,  -179,  -180,  -224,  -229,  -230,  -232,
  -233,  -235,   -59,  -244,   -36,   -37,   -38,   -39,   -40,   -41,
   -42,   -43,   -44,   -45,   -48,   -49,   -50,   -51,   -52,   -53,
   -55,   -56,  -244,   -57,  -116,  -244,  -220,   -84,   -92,  -127,
  -126,  -244,  -125,  -244,  -222,  -244,   -28,  -243,  -161,  -244,
   -58,   -93,  -244,   -96,  -220,  -164,  -166,  -167,  -168,  -169,
  -171,  -244,  -244,  -174,  -244,   -90,  -244,  -244,  -244,  -244,
  -244,  -243,  -221,  -244,  -221,  -244,  -244,  -185,  -244,  -244,
  -198,  -199,  -200,  -202,  -244,  -205,  -206,  -207,  -209,  -220,
  -211,  -214,  -216,  -217,    -8,  -244,  -127,  -244,  -221,  -244,
  -244,  -244,   -35,  -244,  -244,  -220,  -118,  -244,   -86,  -220,
  -130,  -244,  -225,  -226,  -227,  -228,  -231,  -234,  -236,  -237,
  -238,  -239,  -240,  -241,  -242,  -123,  -124,  -244,  -223,  -127,
  -244,  -141,  -244,  -162,  -220,  -244,   -95,  -244,  -221,  -244,
  -172,  -173,  -244,  -244,   -89,  -244,  -101,  -244,  -107,  -244,
  -244,  -111,  -243,  -243,  -244,  -157,  -244,  -148,  -154,   -15,
  -181,  -183,  -186,  -189,  -190,  -203,  -244,  -244,  -220,   -26,
  -129,  -134,  -132,  -133,   -60,  -120,  -244,  -221,   -83,  -244,
   -25,   -29,  -220,  -243,  -142,  -143,  -144,  -244,   -94,   -97,
  -165,  -170,  -244,  -101,  -100,  -244,  -244,  -107,  -106,  -244,
  -244,  -110,  -112,  -244,  -139,  -140,  -244,  -244,  -158,  -212,
  -215,  -244,   -30,  -117,  -119,   -85,  -121,   -27,  -244,  -163,
  -175,   -99,  -102,  -244,  -105,  -244,  -243,  -135,  -136,  -244,
  -146,   -24,   -31,  -137,  -244,  -104,  -244,  -109,  -244,  -114,
  -115,  -145,  -222,  -103,  -108,  -113,   -32 ]

racc_goto_table = [
     2,   114,   116,   117,   119,   214,   224,   132,   134,   193,
   127,   128,   147,   167,   271,   307,   222,   222,   243,   234,
   337,   331,   227,   383,   386,   221,   223,    72,   418,   123,
   125,   126,   107,   108,   330,   285,   402,   350,   231,   249,
   250,   213,   361,   310,   364,   139,   141,   334,   378,   391,
   243,   269,   118,   154,   398,   338,   370,   321,   374,   320,
   343,   265,   266,     3,   263,   264,   262,   166,   192,   194,
   195,   196,   197,   198,   199,   200,   201,   202,   203,   204,
   205,   206,   207,   208,   209,   210,   211,   212,   138,   138,
   146,   220,   220,   216,   157,   225,   149,   404,   150,   162,
   163,   164,   165,   382,   388,   401,   152,   158,   159,   160,
   161,   267,   251,   244,     1,   nil,   nil,   nil,   nil,   286,
   nil,   nil,   255,   nil,   256,   nil,   243,   314,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   138,   nil,   311,   nil,
   132,   134,   127,   128,   nil,   nil,   nil,   nil,   nil,   nil,
   277,   289,   268,   nil,   116,   275,   138,   nil,   123,   125,
   126,   nil,   335,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   288,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   274,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   287,
   nil,   212,   nil,   nil,   nil,   nil,   nil,   390,   348,   nil,
   nil,   132,   134,   426,   345,   243,   nil,   317,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   315,   nil,   192,   nil,   nil,   nil,   nil,   nil,
   nil,   362,   nil,   385,   385,   nil,   325,   327,   nil,   372,
   nil,   nil,   346,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   394,   nil,   nil,   nil,   351,   352,   353,   356,   354,
   355,   nil,   359,   nil,   385,   nil,   365,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   339,   nil,
   nil,   nil,   146,   344,   225,   132,   134,   367,   149,   nil,
   nil,   nil,   nil,   nil,   nil,   371,   nil,   nil,   192,   422,
   nil,   nil,   nil,   nil,   nil,   nil,   192,   419,   nil,   nil,
   nil,   395,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   392,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   212,   nil,   397,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   339,   nil,   nil,
   nil,   123,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   409,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   225,   nil,
   nil,   nil,   nil,   414,   nil,   416,   420 ]

racc_goto_check = [
     2,    10,    10,    10,    38,    51,    13,    36,    35,    19,
    58,    58,    81,    11,    89,    14,    50,    50,    37,    43,
    66,    48,    59,    60,    60,    54,    54,     5,    49,    10,
    10,    10,     9,     9,    47,    52,    44,    55,    42,    59,
    59,    20,    16,    62,    63,     8,     8,    65,    46,    12,
    37,    43,     6,    10,    60,    68,    69,    70,    45,    72,
    76,    77,    78,     3,    82,    83,    85,    10,    10,    10,
    10,    10,    10,    10,    10,    10,    10,    10,    10,    10,
    10,    10,    10,    10,    10,    10,    10,    10,     6,     6,
     6,    10,    10,     8,     5,    10,     6,    46,    86,     9,
     9,     9,     9,    48,    66,    45,    87,     6,     6,     6,
     6,    88,    15,     8,     1,   nil,   nil,   nil,   nil,    51,
   nil,   nil,    15,   nil,    15,   nil,    37,    43,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,     6,   nil,    50,   nil,
    36,    35,    58,    58,   nil,   nil,   nil,   nil,   nil,   nil,
    15,    11,     2,   nil,    10,     2,     6,   nil,    10,    10,
    10,   nil,    50,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
    38,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,     6,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    15,
   nil,    10,   nil,   nil,   nil,   nil,   nil,    89,    11,   nil,
   nil,    36,    35,    14,    81,    37,   nil,    15,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,     2,   nil,    10,   nil,   nil,   nil,   nil,   nil,
   nil,    11,   nil,    50,    50,   nil,     2,     2,   nil,    19,
   nil,   nil,    15,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,    51,   nil,   nil,   nil,    10,    10,    10,    15,    10,
    10,   nil,    15,   nil,    50,   nil,    58,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,     6,   nil,
   nil,   nil,     6,     6,    10,    36,    35,    15,     6,   nil,
   nil,   nil,   nil,   nil,   nil,    10,   nil,   nil,    10,    13,
   nil,   nil,   nil,   nil,   nil,   nil,    10,    50,   nil,   nil,
   nil,    38,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,    15,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,    10,   nil,    15,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,     6,   nil,   nil,
   nil,    10,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,     2,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    10,   nil,
   nil,   nil,   nil,     2,   nil,     2,     2 ]

racc_goto_pointer = [
   nil,   114,     0,    63,   nil,    23,    34,   nil,    -9,    22,
   -14,   -68,  -299,  -103,  -209,   -17,  -266,   nil,   nil,   -73,
   -60,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   -40,   -41,  -103,   -37,   nil,
   nil,   nil,   -82,  -102,  -339,  -268,  -280,  -214,  -227,  -378,
   -89,   -96,  -180,   nil,   -80,  -241,   nil,   nil,   -36,   -88,
  -309,   nil,  -184,  -268,   nil,  -204,  -232,   nil,  -198,  -262,
  -185,   nil,  -182,   nil,   nil,   nil,  -198,   -90,   -89,   nil,
   nil,   -50,   -84,   -83,   nil,   -82,    34,    41,   -41,  -140 ]

racc_goto_default = [
   nil,   nil,   384,   nil,     4,     5,     6,     7,   nil,     8,
     9,   nil,   nil,   nil,   nil,   nil,   226,    13,    14,   329,
   nil,    19,    20,    21,    22,    23,    24,    25,    26,    27,
    28,    29,    30,    31,    32,    33,    34,    35,   nil,    41,
    42,   120,   nil,   nil,   124,   nil,   nil,   nil,   nil,   nil,
   228,   nil,   nil,   104,   nil,   175,   177,   176,   111,   nil,
   nil,   110,   nil,   nil,   129,   nil,   130,   131,   135,   235,
   236,   237,   238,   239,   242,   143,   145,    57,    58,    59,
    62,   nil,   nil,   nil,   148,   nil,   nil,   nil,   nil,   nil ]

racc_reduce_table = [
  0, 0, :racc_error,
  1, 93, :_reduce_1,
  1, 93, :_reduce_2,
  0, 93, :_reduce_3,
  1, 94, :_reduce_4,
  1, 96, :_reduce_5,
  3, 96, :_reduce_6,
  2, 96, :_reduce_7,
  1, 97, :_reduce_8,
  3, 97, :_reduce_9,
  1, 98, :_reduce_none,
  3, 98, :_reduce_11,
  3, 98, :_reduce_12,
  3, 98, :_reduce_13,
  1, 100, :_reduce_14,
  3, 100, :_reduce_15,
  1, 99, :_reduce_none,
  3, 99, :_reduce_17,
  3, 99, :_reduce_18,
  3, 99, :_reduce_19,
  3, 99, :_reduce_20,
  1, 101, :_reduce_none,
  2, 101, :_reduce_22,
  2, 101, :_reduce_23,
  7, 101, :_reduce_24,
  5, 101, :_reduce_25,
  5, 101, :_reduce_26,
  4, 108, :_reduce_27,
  1, 105, :_reduce_28,
  3, 105, :_reduce_29,
  1, 104, :_reduce_30,
  2, 104, :_reduce_31,
  4, 104, :_reduce_32,
  1, 102, :_reduce_none,
  1, 102, :_reduce_none,
  4, 102, :_reduce_35,
  3, 102, :_reduce_36,
  3, 102, :_reduce_37,
  3, 102, :_reduce_38,
  3, 102, :_reduce_39,
  3, 102, :_reduce_40,
  3, 102, :_reduce_41,
  3, 102, :_reduce_42,
  3, 102, :_reduce_43,
  3, 102, :_reduce_44,
  3, 102, :_reduce_45,
  2, 102, :_reduce_46,
  2, 102, :_reduce_47,
  3, 102, :_reduce_48,
  3, 102, :_reduce_49,
  3, 102, :_reduce_50,
  3, 102, :_reduce_51,
  3, 102, :_reduce_52,
  3, 102, :_reduce_53,
  2, 102, :_reduce_54,
  3, 102, :_reduce_55,
  3, 102, :_reduce_56,
  3, 102, :_reduce_57,
  3, 102, :_reduce_58,
  1, 111, :_reduce_59,
  3, 111, :_reduce_60,
  1, 109, :_reduce_none,
  1, 109, :_reduce_none,
  1, 109, :_reduce_none,
  1, 109, :_reduce_none,
  1, 109, :_reduce_none,
  1, 109, :_reduce_none,
  1, 109, :_reduce_none,
  1, 109, :_reduce_none,
  1, 109, :_reduce_none,
  1, 109, :_reduce_none,
  1, 109, :_reduce_none,
  1, 109, :_reduce_none,
  1, 109, :_reduce_none,
  1, 109, :_reduce_none,
  1, 109, :_reduce_none,
  1, 109, :_reduce_none,
  1, 109, :_reduce_none,
  1, 109, :_reduce_78,
  1, 109, :_reduce_79,
  1, 109, :_reduce_80,
  1, 109, :_reduce_81,
  1, 109, :_reduce_82,
  5, 110, :_reduce_83,
  3, 110, :_reduce_84,
  6, 110, :_reduce_85,
  4, 110, :_reduce_86,
  1, 114, :_reduce_87,
  2, 114, :_reduce_88,
  4, 131, :_reduce_89,
  3, 131, :_reduce_90,
  1, 131, :_reduce_91,
  3, 132, :_reduce_92,
  2, 130, :_reduce_93,
  3, 134, :_reduce_94,
  2, 134, :_reduce_95,
  2, 133, :_reduce_96,
  4, 133, :_reduce_97,
  2, 117, :_reduce_98,
  5, 136, :_reduce_99,
  4, 136, :_reduce_100,
  0, 137, :_reduce_none,
  2, 137, :_reduce_102,
  4, 137, :_reduce_103,
  3, 137, :_reduce_104,
  6, 118, :_reduce_105,
  5, 118, :_reduce_106,
  0, 138, :_reduce_none,
  4, 138, :_reduce_108,
  3, 138, :_reduce_109,
  5, 116, :_reduce_110,
  1, 139, :_reduce_111,
  2, 139, :_reduce_112,
  5, 140, :_reduce_113,
  1, 141, :_reduce_none,
  1, 141, :_reduce_none,
  1, 112, :_reduce_none,
  4, 112, :_reduce_117,
  1, 144, :_reduce_118,
  3, 144, :_reduce_119,
  3, 143, :_reduce_120,
  6, 115, :_reduce_121,
  2, 115, :_reduce_122,
  3, 145, :_reduce_123,
  3, 145, :_reduce_124,
  1, 146, :_reduce_none,
  1, 146, :_reduce_none,
  0, 103, :_reduce_127,
  1, 103, :_reduce_128,
  3, 103, :_reduce_129,
  1, 148, :_reduce_none,
  1, 148, :_reduce_none,
  3, 147, :_reduce_132,
  3, 147, :_reduce_133,
  3, 147, :_reduce_134,
  6, 119, :_reduce_135,
  6, 120, :_reduce_136,
  7, 121, :_reduce_137,
  1, 153, :_reduce_138,
  1, 152, :_reduce_none,
  1, 152, :_reduce_none,
  1, 154, :_reduce_none,
  2, 154, :_reduce_142,
  1, 155, :_reduce_none,
  1, 155, :_reduce_none,
  7, 122, :_reduce_145,
  6, 122, :_reduce_146,
  1, 156, :_reduce_147,
  3, 156, :_reduce_148,
  1, 158, :_reduce_none,
  1, 158, :_reduce_none,
  1, 158, :_reduce_151,
  1, 158, :_reduce_none,
  1, 159, :_reduce_153,
  3, 159, :_reduce_154,
  1, 160, :_reduce_none,
  1, 160, :_reduce_none,
  1, 157, :_reduce_none,
  2, 157, :_reduce_158,
  1, 150, :_reduce_none,
  1, 150, :_reduce_160,
  1, 151, :_reduce_161,
  2, 151, :_reduce_162,
  4, 151, :_reduce_163,
  1, 135, :_reduce_164,
  3, 135, :_reduce_165,
  1, 161, :_reduce_none,
  1, 161, :_reduce_none,
  1, 162, :_reduce_none,
  1, 162, :_reduce_none,
  3, 164, :_reduce_170,
  1, 164, :_reduce_171,
  2, 165, :_reduce_172,
  2, 163, :_reduce_173,
  1, 166, :_reduce_174,
  4, 166, :_reduce_175,
  1, 113, :_reduce_176,
  1, 124, :_reduce_177,
  1, 124, :_reduce_178,
  1, 124, :_reduce_179,
  1, 124, :_reduce_180,
  4, 125, :_reduce_181,
  2, 125, :_reduce_182,
  4, 125, :_reduce_183,
  2, 125, :_reduce_184,
  3, 126, :_reduce_185,
  4, 126, :_reduce_186,
  2, 126, :_reduce_187,
  1, 167, :_reduce_188,
  3, 167, :_reduce_189,
  3, 168, :_reduce_190,
  1, 128, :_reduce_none,
  1, 128, :_reduce_none,
  1, 128, :_reduce_none,
  1, 169, :_reduce_194,
  1, 169, :_reduce_195,
  2, 170, :_reduce_196,
  1, 172, :_reduce_197,
  1, 174, :_reduce_198,
  1, 175, :_reduce_199,
  2, 173, :_reduce_200,
  1, 176, :_reduce_201,
  1, 177, :_reduce_202,
  2, 177, :_reduce_203,
  2, 171, :_reduce_204,
  2, 178, :_reduce_205,
  2, 178, :_reduce_206,
  3, 95, :_reduce_207,
  0, 180, :_reduce_none,
  1, 180, :_reduce_none,
  0, 179, :_reduce_210,
  2, 179, :_reduce_211,
  4, 179, :_reduce_212,
  1, 123, :_reduce_213,
  3, 123, :_reduce_214,
  5, 123, :_reduce_215,
  1, 181, :_reduce_none,
  1, 181, :_reduce_none,
  1, 129, :_reduce_218,
  1, 127, :_reduce_219,
  0, 107, :_reduce_none,
  1, 107, :_reduce_221,
  0, 106, :_reduce_none,
  1, 106, :_reduce_none,
  1, 149, :_reduce_none,
  1, 149, :_reduce_none,
  1, 149, :_reduce_none,
  1, 149, :_reduce_none,
  1, 149, :_reduce_none,
  1, 149, :_reduce_none,
  1, 149, :_reduce_none,
  1, 149, :_reduce_none,
  1, 149, :_reduce_none,
  1, 149, :_reduce_none,
  1, 149, :_reduce_none,
  1, 149, :_reduce_none,
  1, 149, :_reduce_none,
  1, 149, :_reduce_none,
  1, 149, :_reduce_none,
  1, 149, :_reduce_none,
  1, 149, :_reduce_none,
  1, 149, :_reduce_none,
  1, 149, :_reduce_none,
  0, 142, :_reduce_243 ]

racc_reduce_n = 244

racc_shift_n = 427

racc_token_table = {
  false => 0,
  :error => 1,
  :STRING => 2,
  :DQPRE => 3,
  :DQMID => 4,
  :DQPOST => 5,
  :WORD => 6,
  :LBRACK => 7,
  :RBRACK => 8,
  :LBRACE => 9,
  :RBRACE => 10,
  :SYMBOL => 11,
  :FARROW => 12,
  :COMMA => 13,
  :TRUE => 14,
  :FALSE => 15,
  :EQUALS => 16,
  :APPENDS => 17,
  :DELETES => 18,
  :LESSEQUAL => 19,
  :NOTEQUAL => 20,
  :DOT => 21,
  :COLON => 22,
  :LLCOLLECT => 23,
  :RRCOLLECT => 24,
  :QMARK => 25,
  :LPAREN => 26,
  :RPAREN => 27,
  :ISEQUAL => 28,
  :GREATEREQUAL => 29,
  :GREATERTHAN => 30,
  :LESSTHAN => 31,
  :IF => 32,
  :ELSE => 33,
  :DEFINE => 34,
  :ELSIF => 35,
  :VARIABLE => 36,
  :CLASS => 37,
  :INHERITS => 38,
  :NODE => 39,
  :BOOLEAN => 40,
  :NAME => 41,
  :SEMIC => 42,
  :CASE => 43,
  :DEFAULT => 44,
  :AT => 45,
  :ATAT => 46,
  :LCOLLECT => 47,
  :RCOLLECT => 48,
  :CLASSREF => 49,
  :NOT => 50,
  :OR => 51,
  :AND => 52,
  :UNDEF => 53,
  :PARROW => 54,
  :PLUS => 55,
  :MINUS => 56,
  :TIMES => 57,
  :DIV => 58,
  :LSHIFT => 59,
  :RSHIFT => 60,
  :UMINUS => 61,
  :MATCH => 62,
  :NOMATCH => 63,
  :REGEX => 64,
  :IN_EDGE => 65,
  :OUT_EDGE => 66,
  :IN_EDGE_SUB => 67,
  :OUT_EDGE_SUB => 68,
  :IN => 69,
  :UNLESS => 70,
  :PIPE => 71,
  :LAMBDA => 72,
  :SELBRACE => 73,
  :NUMBER => 74,
  :HEREDOC => 75,
  :SUBLOCATE => 76,
  :RENDER_STRING => 77,
  :RENDER_EXPR => 78,
  :EPP_START => 79,
  :EPP_END => 80,
  :EPP_END_TRIM => 81,
  :FUNCTION => 82,
  :PRIVATE => 83,
  :ATTR => 84,
  :TYPE => 85,
  :LOW => 86,
  :APPLICATION => 87,
  :HIGH => 88,
  :LISTSTART => 89,
  :SPLAT => 90,
  :MODULO => 91 }

racc_nt_base = 92

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "STRING",
  "DQPRE",
  "DQMID",
  "DQPOST",
  "WORD",
  "LBRACK",
  "RBRACK",
  "LBRACE",
  "RBRACE",
  "SYMBOL",
  "FARROW",
  "COMMA",
  "TRUE",
  "FALSE",
  "EQUALS",
  "APPENDS",
  "DELETES",
  "LESSEQUAL",
  "NOTEQUAL",
  "DOT",
  "COLON",
  "LLCOLLECT",
  "RRCOLLECT",
  "QMARK",
  "LPAREN",
  "RPAREN",
  "ISEQUAL",
  "GREATEREQUAL",
  "GREATERTHAN",
  "LESSTHAN",
  "IF",
  "ELSE",
  "DEFINE",
  "ELSIF",
  "VARIABLE",
  "CLASS",
  "INHERITS",
  "NODE",
  "BOOLEAN",
  "NAME",
  "SEMIC",
  "CASE",
  "DEFAULT",
  "AT",
  "ATAT",
  "LCOLLECT",
  "RCOLLECT",
  "CLASSREF",
  "NOT",
  "OR",
  "AND",
  "UNDEF",
  "PARROW",
  "PLUS",
  "MINUS",
  "TIMES",
  "DIV",
  "LSHIFT",
  "RSHIFT",
  "UMINUS",
  "MATCH",
  "NOMATCH",
  "REGEX",
  "IN_EDGE",
  "OUT_EDGE",
  "IN_EDGE_SUB",
  "OUT_EDGE_SUB",
  "IN",
  "UNLESS",
  "PIPE",
  "LAMBDA",
  "SELBRACE",
  "NUMBER",
  "HEREDOC",
  "SUBLOCATE",
  "RENDER_STRING",
  "RENDER_EXPR",
  "EPP_START",
  "EPP_END",
  "EPP_END_TRIM",
  "FUNCTION",
  "PRIVATE",
  "ATTR",
  "TYPE",
  "LOW",
  "APPLICATION",
  "HIGH",
  "LISTSTART",
  "SPLAT",
  "MODULO",
  "$start",
  "program",
  "statements",
  "epp_expression",
  "syntactic_statements",
  "syntactic_statement",
  "assignment",
  "relationship",
  "assignments",
  "resource",
  "expression",
  "attribute_operations",
  "additional_resource_bodies",
  "resource_bodies",
  "endsemi",
  "endcomma",
  "resource_body",
  "primary_expression",
  "call_function_expression",
  "expressions",
  "selector_entries",
  "variable",
  "call_method_with_lambda_expression",
  "collection_expression",
  "case_expression",
  "if_expression",
  "unless_expression",
  "definition_expression",
  "application_expression",
  "hostclass_expression",
  "node_definition_expression",
  "epp_render_expression",
  "reserved_word",
  "array",
  "hash",
  "regex",
  "quotedtext",
  "type",
  "lambda",
  "call_method_expression",
  "named_access",
  "lambda_parameter_list",
  "lambda_rest",
  "parameters",
  "if_part",
  "else",
  "unless_else",
  "case_options",
  "case_option",
  "options_statements",
  "nil",
  "selector_entry",
  "selector_entry_list",
  "collect_query",
  "optional_query",
  "attribute_operation",
  "attribute_name",
  "keyword",
  "classname",
  "parameter_list",
  "opt_statements",
  "stacked_classname",
  "classparent",
  "classnameordefault",
  "hostnames",
  "nodeparent",
  "hostname",
  "dotted_name",
  "name_or_number",
  "parameter",
  "untyped_parameter",
  "typed_parameter",
  "regular_parameter",
  "splat_parameter",
  "parameter_type",
  "hashpairs",
  "hashpair",
  "string",
  "dq_string",
  "heredoc",
  "dqpre",
  "dqrval",
  "dqpost",
  "dqmid",
  "text_expression",
  "dqtail",
  "sublocated_text",
  "epp_parameters_list",
  "optional_statements",
  "epp_end" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

module_eval(<<'.,.,', 'egrammar.ra', 66)
  def _reduce_1(val, _values, result)
     result = create_program(Factory.block_or_expression(*val[0])) 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 67)
  def _reduce_2(val, _values, result)
     result = create_program(Factory.block_or_expression(*val[0])) 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 68)
  def _reduce_3(val, _values, result)
     result = create_empty_program() 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 72)
  def _reduce_4(val, _values, result)
     result = transform_calls(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 79)
  def _reduce_5(val, _values, result)
     result = [val[0]]
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 80)
  def _reduce_6(val, _values, result)
     result = val[0].push val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 81)
  def _reduce_7(val, _values, result)
     result = val[0].push val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 88)
  def _reduce_8(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 89)
  def _reduce_9(val, _values, result)
     result = aryfy(val[0]).push(val[1]).push(val[2]) 
    result
  end
.,.,

# reduce 10 omitted

module_eval(<<'.,.,', 'egrammar.ra', 94)
  def _reduce_11(val, _values, result)
     result = val[0].set(val[2])      ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 95)
  def _reduce_12(val, _values, result)
     result = val[0].plus_set(val[2]) ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 96)
  def _reduce_13(val, _values, result)
     result = val[0].minus_set(val[2]); loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 99)
  def _reduce_14(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 100)
  def _reduce_15(val, _values, result)
     result = val[0].push(val[2]) 
    result
  end
.,.,

# reduce 16 omitted

module_eval(<<'.,.,', 'egrammar.ra', 104)
  def _reduce_17(val, _values, result)
     result = val[0].relop(val[1][:value], val[2]); loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 105)
  def _reduce_18(val, _values, result)
     result = val[0].relop(val[1][:value], val[2]); loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 106)
  def _reduce_19(val, _values, result)
     result = val[0].relop(val[1][:value], val[2]); loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 107)
  def _reduce_20(val, _values, result)
     result = val[0].relop(val[1][:value], val[2]); loc result, val[1] 
    result
  end
.,.,

# reduce 21 omitted

module_eval(<<'.,.,', 'egrammar.ra', 116)
  def _reduce_22(val, _values, result)
          result = val[1]
      unless Factory.set_resource_form(result, :virtual)
        # This is equivalent to a syntax error - additional semantic restrictions apply
        error val[0], "Virtual (@) can only be applied to a Resource Expression"
      end
      # relocate the result
      loc result, val[0], val[1]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 127)
  def _reduce_23(val, _values, result)
          result = val[1]
      unless Factory.set_resource_form(result, :exported)
        # This is equivalent to a syntax error - additional semantic restrictions apply
        error val[0], "Exported (@@) can only be applied to a Resource Expression"
      end
      # relocate the result
      loc result, val[0], val[1]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 138)
  def _reduce_24(val, _values, result)
          bodies = [Factory.RESOURCE_BODY(val[2], val[4])] + val[5]
      result = Factory.RESOURCE(val[0], bodies)
      loc result, val[0], val[6]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 145)
  def _reduce_25(val, _values, result)
            result = Factory.RESOURCE(Factory.fqn(token_text(val[0])), val[2])
        loc result, val[0], val[4]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 154)
  def _reduce_26(val, _values, result)
           result = case Factory.resource_shape(val[0])
       when :resource, :class
        # This catches deprecated syntax.
        # If the attribute operations does not include +>, then the found expression
        # is actually a LEFT followed by LITERAL_HASH
        #
        unless tmp = transform_resource_wo_title(val[0], val[2])
          error val[1], "Syntax error resource body without title or hash with +>"
        end
        tmp
      when :defaults
        Factory.RESOURCE_DEFAULTS(val[0], val[2])
      when :override
        # This was only done for override in original - TODO should it be here at all
        Factory.RESOURCE_OVERRIDE(val[0], val[2])
      else
        error val[0], "Expression is not valid as a resource, resource-default, or resource-override"
      end
     loc result, val[0], val[4]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 176)
  def _reduce_27(val, _values, result)
     result = Factory.RESOURCE_BODY(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 179)
  def _reduce_28(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 180)
  def _reduce_29(val, _values, result)
     result = val[0].push val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 186)
  def _reduce_30(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 187)
  def _reduce_31(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 188)
  def _reduce_32(val, _values, result)
     result = val[2] 
    result
  end
.,.,

# reduce 33 omitted

# reduce 34 omitted

module_eval(<<'.,.,', 'egrammar.ra', 195)
  def _reduce_35(val, _values, result)
     result = val[0][*val[2]]         ; loc result, val[0], val[3] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 196)
  def _reduce_36(val, _values, result)
     result = val[0].in val[2]        ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 197)
  def _reduce_37(val, _values, result)
     result = val[0] =~  val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 198)
  def _reduce_38(val, _values, result)
     result = val[0].mne val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 199)
  def _reduce_39(val, _values, result)
     result = val[0] +   val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 200)
  def _reduce_40(val, _values, result)
     result = val[0] -   val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 201)
  def _reduce_41(val, _values, result)
     result = val[0] /   val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 202)
  def _reduce_42(val, _values, result)
     result = val[0] *   val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 203)
  def _reduce_43(val, _values, result)
     result = val[0] %   val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 204)
  def _reduce_44(val, _values, result)
     result = val[0] <<  val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 205)
  def _reduce_45(val, _values, result)
     result = val[0] >>  val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 206)
  def _reduce_46(val, _values, result)
     result = val[1].minus()          ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 207)
  def _reduce_47(val, _values, result)
     result = val[1].unfold()         ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 208)
  def _reduce_48(val, _values, result)
     result = val[0].ne  val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 209)
  def _reduce_49(val, _values, result)
     result = val[0] ==  val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 210)
  def _reduce_50(val, _values, result)
     result = val[0] >   val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 211)
  def _reduce_51(val, _values, result)
     result = val[0] >=  val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 212)
  def _reduce_52(val, _values, result)
     result = val[0] <   val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 213)
  def _reduce_53(val, _values, result)
     result = val[0] <=  val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 214)
  def _reduce_54(val, _values, result)
     result = val[1].not              ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 215)
  def _reduce_55(val, _values, result)
     result = val[0].and val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 216)
  def _reduce_56(val, _values, result)
     result = val[0].or  val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 217)
  def _reduce_57(val, _values, result)
     result = val[0].select(*val[2])  ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 218)
  def _reduce_58(val, _values, result)
     result = val[1].paren()          ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 228)
  def _reduce_59(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 229)
  def _reduce_60(val, _values, result)
     result = val[0].push(val[2]) 
    result
  end
.,.,

# reduce 61 omitted

# reduce 62 omitted

# reduce 63 omitted

# reduce 64 omitted

# reduce 65 omitted

# reduce 66 omitted

# reduce 67 omitted

# reduce 68 omitted

# reduce 69 omitted

# reduce 70 omitted

# reduce 71 omitted

# reduce 72 omitted

# reduce 73 omitted

# reduce 74 omitted

# reduce 75 omitted

# reduce 76 omitted

# reduce 77 omitted

module_eval(<<'.,.,', 'egrammar.ra', 251)
  def _reduce_78(val, _values, result)
     result = Factory.NUMBER(val[0][:value])          ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 252)
  def _reduce_79(val, _values, result)
     result = Factory.literal(val[0][:value])         ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 253)
  def _reduce_80(val, _values, result)
     result = Factory.literal(:default)               ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 254)
  def _reduce_81(val, _values, result)
     result = Factory.literal(:undef)                 ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 255)
  def _reduce_82(val, _values, result)
     result = Factory.QNAME_OR_NUMBER(val[0][:value]) ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 264)
  def _reduce_83(val, _values, result)
          result = Factory.CALL_NAMED(val[0], true, val[2])
      loc result, val[0], val[4]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 268)
  def _reduce_84(val, _values, result)
          result = Factory.CALL_NAMED(val[0], true, [])
      loc result, val[0], val[2]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 272)
  def _reduce_85(val, _values, result)
          result = Factory.CALL_NAMED(val[0], true, val[2])
      loc result, val[0], val[4]
      result.lambda = val[5]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 277)
  def _reduce_86(val, _values, result)
          result = Factory.CALL_NAMED(val[0], true, [])
      loc result, val[0], val[2]
      result.lambda = val[3]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 285)
  def _reduce_87(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 286)
  def _reduce_88(val, _values, result)
     result = val[0]; val[0].lambda = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 289)
  def _reduce_89(val, _values, result)
     result = Factory.CALL_METHOD(val[0], val[2]); loc result, val[1], val[3] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 290)
  def _reduce_90(val, _values, result)
     result = Factory.CALL_METHOD(val[0], []); loc result, val[1], val[3] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 291)
  def _reduce_91(val, _values, result)
     result = Factory.CALL_METHOD(val[0], []); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 295)
  def _reduce_92(val, _values, result)
            result = val[0].dot(Factory.fqn(val[2][:value]))
        loc result, val[1], val[2]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 303)
  def _reduce_93(val, _values, result)
          result = Factory.LAMBDA(val[0][:value], val[1][:value])
      loc result, val[0][:start], val[1][:end]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 308)
  def _reduce_94(val, _values, result)
     result = {:end => val[2], :value =>val[1] } 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 309)
  def _reduce_95(val, _values, result)
     result = {:end => val[1], :value => nil } 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 313)
  def _reduce_96(val, _values, result)
     result = {:start => val[0], :value => [] } 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 314)
  def _reduce_97(val, _values, result)
     result = {:start => val[0], :value => val[1] } 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 322)
  def _reduce_98(val, _values, result)
          result = val[1]
      loc(result, val[0], val[1])
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 329)
  def _reduce_99(val, _values, result)
            result = Factory.IF(val[0], Factory.block_or_expression(*val[2]), val[4])
        loc(result, val[0], (val[4] ? val[4] : val[3]))
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 333)
  def _reduce_100(val, _values, result)
            result = Factory.IF(val[0], nil, val[3])
        loc(result, val[0], (val[3] ? val[3] : val[2]))
      
    result
  end
.,.,

# reduce 101 omitted

module_eval(<<'.,.,', 'egrammar.ra', 341)
  def _reduce_102(val, _values, result)
            result = val[1]
        loc(result, val[0], val[1])
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 345)
  def _reduce_103(val, _values, result)
            result = Factory.block_or_expression(*val[2])
        loc result, val[0], val[3]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 349)
  def _reduce_104(val, _values, result)
            result = nil # don't think a nop is needed here either
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 356)
  def _reduce_105(val, _values, result)
          result = Factory.UNLESS(val[1], Factory.block_or_expression(*val[3]), val[5])
      loc result, val[0], val[4]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 360)
  def _reduce_106(val, _values, result)
          result = Factory.UNLESS(val[1], nil, nil)
      loc result, val[0], val[4]
    
    result
  end
.,.,

# reduce 107 omitted

module_eval(<<'.,.,', 'egrammar.ra', 370)
  def _reduce_108(val, _values, result)
            result = Factory.block_or_expression(*val[2])
        loc result, val[0], val[3]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 374)
  def _reduce_109(val, _values, result)
            result = nil # don't think a nop is needed here either
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 381)
  def _reduce_110(val, _values, result)
          result = Factory.CASE(val[1], *val[3])
      loc result, val[0], val[4]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 387)
  def _reduce_111(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 388)
  def _reduce_112(val, _values, result)
     result = val[0].push val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 393)
  def _reduce_113(val, _values, result)
            result = Factory.WHEN(val[0], val[3]); loc result, val[1], val[4]
      
    result
  end
.,.,

# reduce 114 omitted

# reduce 115 omitted

# reduce 116 omitted

module_eval(<<'.,.,', 'egrammar.ra', 409)
  def _reduce_117(val, _values, result)
            result = val[1]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 414)
  def _reduce_118(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 415)
  def _reduce_119(val, _values, result)
     result = val[0].push val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 420)
  def _reduce_120(val, _values, result)
     result = Factory.MAP(val[0], val[2]) ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 430)
  def _reduce_121(val, _values, result)
          result = Factory.COLLECT(val[0], val[1], val[3])
      loc result, val[0], val[5]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 434)
  def _reduce_122(val, _values, result)
          result = Factory.COLLECT(val[0], val[1], [])
      loc result, val[0], val[1]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 439)
  def _reduce_123(val, _values, result)
     result = Factory.VIRTUAL_QUERY(val[1])   ; loc result, val[0], val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 440)
  def _reduce_124(val, _values, result)
     result = Factory.EXPORTED_QUERY(val[1])  ; loc result, val[0], val[2] 
    result
  end
.,.,

# reduce 125 omitted

# reduce 126 omitted

module_eval(<<'.,.,', 'egrammar.ra', 449)
  def _reduce_127(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 450)
  def _reduce_128(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 451)
  def _reduce_129(val, _values, result)
     result = val[0].push(val[2]) 
    result
  end
.,.,

# reduce 130 omitted

# reduce 131 omitted

module_eval(<<'.,.,', 'egrammar.ra', 467)
  def _reduce_132(val, _values, result)
            result = Factory.ATTRIBUTE_OP(val[0][:value], :'=>', val[2])
        loc result, val[0], val[2]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 471)
  def _reduce_133(val, _values, result)
            result = Factory.ATTRIBUTE_OP(val[0][:value], :'+>', val[2])
        loc result, val[0], val[2]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 475)
  def _reduce_134(val, _values, result)
          result = Factory.ATTRIBUTES_OP(val[2]) ; loc result, val[0], val[2]
   
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 484)
  def _reduce_135(val, _values, result)
          result = add_definition(Factory.DEFINITION(classname(val[1][:value]), val[2], val[4]))
      loc result, val[0], val[5]
      # New lexer does not keep track of this, this is done in validation
      if @lexer.respond_to?(:'indefine=')
        @lexer.indefine = false
      end
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 495)
  def _reduce_136(val, _values, result)
        result = Factory.APPLICATION(classname(val[1][:value]), val[2], val[4])
    loc result, val[0], val[5]
  
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 505)
  def _reduce_137(val, _values, result)
          # Remove this class' name from the namestack as all nested classes have been parsed
      namepop
      result = add_definition(Factory.HOSTCLASS(classname(val[1][:value]), val[2], token_text(val[3]), val[5]))
      loc result, val[0], val[6]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 515)
  def _reduce_138(val, _values, result)
     namestack(val[0][:value]) ; result = val[0] 
    result
  end
.,.,

# reduce 139 omitted

# reduce 140 omitted

# reduce 141 omitted

module_eval(<<'.,.,', 'egrammar.ra', 524)
  def _reduce_142(val, _values, result)
     result = val[1] 
    result
  end
.,.,

# reduce 143 omitted

# reduce 144 omitted

module_eval(<<'.,.,', 'egrammar.ra', 541)
  def _reduce_145(val, _values, result)
          result = add_definition(Factory.NODE(val[1], val[3], val[5]))
      loc result, val[0], val[6]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 545)
  def _reduce_146(val, _values, result)
          result = add_definition(Factory.NODE(val[1], val[3], nil))
      loc result, val[0], val[5]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 555)
  def _reduce_147(val, _values, result)
     result = [result] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 556)
  def _reduce_148(val, _values, result)
     result = val[0].push(val[2]) 
    result
  end
.,.,

# reduce 149 omitted

# reduce 150 omitted

module_eval(<<'.,.,', 'egrammar.ra', 563)
  def _reduce_151(val, _values, result)
     result = Factory.literal(:default); loc result, val[0] 
    result
  end
.,.,

# reduce 152 omitted

module_eval(<<'.,.,', 'egrammar.ra', 567)
  def _reduce_153(val, _values, result)
     result = Factory.literal(val[0][:value]); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 568)
  def _reduce_154(val, _values, result)
     result = Factory.concat(val[0], '.', val[2][:value]); loc result, val[0], val[2] 
    result
  end
.,.,

# reduce 155 omitted

# reduce 156 omitted

# reduce 157 omitted

module_eval(<<'.,.,', 'egrammar.ra', 577)
  def _reduce_158(val, _values, result)
     result = val[1] 
    result
  end
.,.,

# reduce 159 omitted

module_eval(<<'.,.,', 'egrammar.ra', 594)
  def _reduce_160(val, _values, result)
     error val[0], "'class' is not a valid classname" 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 598)
  def _reduce_161(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 599)
  def _reduce_162(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 600)
  def _reduce_163(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 604)
  def _reduce_164(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 605)
  def _reduce_165(val, _values, result)
     result = val[0].push(val[2]) 
    result
  end
.,.,

# reduce 166 omitted

# reduce 167 omitted

# reduce 168 omitted

# reduce 169 omitted

module_eval(<<'.,.,', 'egrammar.ra', 617)
  def _reduce_170(val, _values, result)
     result = Factory.PARAM(val[0][:value], val[2]) ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 618)
  def _reduce_171(val, _values, result)
     result = Factory.PARAM(val[0][:value]); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 621)
  def _reduce_172(val, _values, result)
     result = val[1]; val[1].captures_rest() 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 624)
  def _reduce_173(val, _values, result)
     val[1].type_expr(val[0]) ; result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 627)
  def _reduce_174(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 628)
  def _reduce_175(val, _values, result)
     result = val[0][*val[2]] ; loc result, val[0], val[3] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 633)
  def _reduce_176(val, _values, result)
     result = Factory.fqn(val[0][:value]).var ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 638)
  def _reduce_177(val, _values, result)
     result = Factory.RESERVED(val[0][:value]) ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 639)
  def _reduce_178(val, _values, result)
     result = Factory.RESERVED(val[0][:value]) ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 640)
  def _reduce_179(val, _values, result)
     result = Factory.RESERVED(val[0][:value]) ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 641)
  def _reduce_180(val, _values, result)
     result = Factory.RESERVED(val[0][:value]) ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 647)
  def _reduce_181(val, _values, result)
     result = Factory.LIST(val[1]); loc result, val[0], val[3] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 648)
  def _reduce_182(val, _values, result)
     result = Factory.literal([]) ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 649)
  def _reduce_183(val, _values, result)
     result = Factory.LIST(val[1]); loc result, val[0], val[3] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 650)
  def _reduce_184(val, _values, result)
     result = Factory.literal([]) ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 653)
  def _reduce_185(val, _values, result)
     result = Factory.HASH(val[1]); loc result, val[0], val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 654)
  def _reduce_186(val, _values, result)
     result = Factory.HASH(val[1]); loc result, val[0], val[3] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 655)
  def _reduce_187(val, _values, result)
     result = Factory.literal({}) ; loc result, val[0], val[3] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 658)
  def _reduce_188(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 659)
  def _reduce_189(val, _values, result)
     result = val[0].push val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 662)
  def _reduce_190(val, _values, result)
     result = Factory.KEY_ENTRY(val[0], val[2]); loc result, val[1] 
    result
  end
.,.,

# reduce 191 omitted

# reduce 192 omitted

# reduce 193 omitted

module_eval(<<'.,.,', 'egrammar.ra', 670)
  def _reduce_194(val, _values, result)
     result = Factory.literal(val[0][:value]) ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 671)
  def _reduce_195(val, _values, result)
     result = Factory.literal(val[0][:value]) ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 673)
  def _reduce_196(val, _values, result)
     result = Factory.string(val[0], *val[1]) ; loc result, val[0], val[1][-1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 674)
  def _reduce_197(val, _values, result)
     result = Factory.literal(val[0][:value]); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 675)
  def _reduce_198(val, _values, result)
     result = Factory.literal(val[0][:value]); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 676)
  def _reduce_199(val, _values, result)
     result = Factory.literal(val[0][:value]); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 677)
  def _reduce_200(val, _values, result)
     result = [val[0]] + val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 678)
  def _reduce_201(val, _values, result)
     result = Factory.TEXT(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 681)
  def _reduce_202(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 682)
  def _reduce_203(val, _values, result)
     result = [val[0]] + val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 685)
  def _reduce_204(val, _values, result)
     result = Factory.HEREDOC(val[0][:value], val[1]); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 688)
  def _reduce_205(val, _values, result)
     result = Factory.SUBLOCATE(val[0], val[1]); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 689)
  def _reduce_206(val, _values, result)
     result = Factory.SUBLOCATE(val[0], val[1]); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 692)
  def _reduce_207(val, _values, result)
     result = Factory.EPP(val[1], val[2]); loc result, val[0] 
    result
  end
.,.,

# reduce 208 omitted

# reduce 209 omitted

module_eval(<<'.,.,', 'egrammar.ra', 699)
  def _reduce_210(val, _values, result)
     result = nil 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 700)
  def _reduce_211(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 701)
  def _reduce_212(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 704)
  def _reduce_213(val, _values, result)
     result = Factory.RENDER_STRING(val[0][:value]); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 705)
  def _reduce_214(val, _values, result)
     result = Factory.RENDER_EXPR(val[1]); loc result, val[0], val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 706)
  def _reduce_215(val, _values, result)
     result = Factory.RENDER_EXPR(Factory.block_or_expression(*val[2])); loc result, val[0], val[4] 
    result
  end
.,.,

# reduce 216 omitted

# reduce 217 omitted

module_eval(<<'.,.,', 'egrammar.ra', 712)
  def _reduce_218(val, _values, result)
     result = Factory.QREF(val[0][:value])  ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 715)
  def _reduce_219(val, _values, result)
     result = Factory.literal(val[0][:value]); loc result, val[0] 
    result
  end
.,.,

# reduce 220 omitted

module_eval(<<'.,.,', 'egrammar.ra', 721)
  def _reduce_221(val, _values, result)
     result = nil 
    result
  end
.,.,

# reduce 222 omitted

# reduce 223 omitted

# reduce 224 omitted

# reduce 225 omitted

# reduce 226 omitted

# reduce 227 omitted

# reduce 228 omitted

# reduce 229 omitted

# reduce 230 omitted

# reduce 231 omitted

# reduce 232 omitted

# reduce 233 omitted

# reduce 234 omitted

# reduce 235 omitted

# reduce 236 omitted

# reduce 237 omitted

# reduce 238 omitted

# reduce 239 omitted

# reduce 240 omitted

# reduce 241 omitted

# reduce 242 omitted

module_eval(<<'.,.,', 'egrammar.ra', 749)
  def _reduce_243(val, _values, result)
     result = nil
    result
  end
.,.,

def _reduce_none(val, _values, result)
  val[0]
end

      end   # class Parser
      end   # module Parser
    end   # module Pops
  end   # module Puppet
