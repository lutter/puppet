#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.11
# from Racc grammer file "".
#

require 'racc/parser.rb'

require 'puppet'
require 'puppet/pops'

module Puppet
  class ParseError < Puppet::Error; end
  class ImportError < Racc::ParseError; end
  class AlreadyImportedError < ImportError; end
end

module Puppet
  module Pops
    module Parser
      class Parser < Racc::Parser

module_eval(<<'...end egrammar.ra/module_eval...', 'egrammar.ra', 796)

# Make emacs happy
# Local Variables:
# mode: ruby
# End:
...end egrammar.ra/module_eval...
##### State transition tables begin ###

clist = [
'60,63,409,-244,61,55,325,56,386,82,-243,-245,242,136,-130,-240,-242',
'-231,274,275,326,282,285,103,18,106,259,101,102,260,43,383,46,243,49',
'12,113,48,37,40,112,45,38,10,11,-244,137,68,17,105,310,39,-243,-245',
'15,16,-130,-240,-242,-231,60,63,69,283,61,55,113,56,44,406,112,83,36',
'64,285,66,67,65,109,352,50,51,53,52,18,47,308,388,389,54,43,242,46,261',
'49,115,242,48,37,40,284,45,38,256,68,285,113,68,17,68,112,39,243,256',
'15,16,242,243,255,113,60,63,69,112,61,55,272,56,44,68,113,235,36,64',
'112,66,67,243,263,262,50,51,53,52,18,47,254,315,441,54,43,440,46,360',
'49,12,242,48,37,40,71,45,38,10,11,361,113,68,17,68,112,39,113,369,15',
'16,112,243,280,113,60,63,69,112,61,55,281,56,44,363,60,63,36,64,61,66',
'67,379,231,378,50,51,53,52,18,47,379,307,378,54,43,366,46,320,49,115',
'320,48,37,40,371,45,38,372,261,231,344,68,17,234,376,39,343,380,15,16',
'382,73,232,121,60,63,69,256,61,55,393,56,44,339,395,336,36,64,280,66',
'67,81,231,81,50,51,53,52,18,47,81,221,399,54,43,220,46,121,49,115,402',
'48,37,40,280,45,38,73,405,81,81,68,17,324,153,39,350,382,15,16,411,412',
'151,242,60,63,69,68,61,55,416,56,44,321,419,420,36,64,421,66,67,122',
'121,320,50,51,53,52,18,47,429,81,431,54,43,81,46,433,49,115,434,48,37',
'40,435,45,38,73,310,70,280,68,17,314,156,39,,,15,16,,,,,60,63,69,,61',
'55,,56,44,,,,36,64,,66,67,,,,50,51,53,52,18,47,,,,54,43,,46,,49,115',
',48,37,40,,45,38,,,,,68,17,,,39,,,15,16,,,,,60,63,69,,61,55,,56,44,',
',,36,64,,66,67,,,,50,51,53,52,18,47,,,,54,43,,46,,49,12,,48,37,40,,45',
'38,10,11,,,68,17,,,39,,,15,16,,,,,60,63,69,,61,55,,56,44,,,,36,64,,66',
'67,,,,50,51,53,52,18,47,,,,54,43,,46,,49,12,,48,37,40,,45,38,10,11,',
',68,17,,,39,,,15,16,,,,,60,63,69,,61,55,,56,44,,,,36,64,,66,67,,,,50',
'51,53,52,18,47,,,,54,43,,46,,49,12,,48,37,40,,45,38,10,11,,,68,17,,',
'39,,,15,16,,,,,60,63,69,,61,55,,56,44,,,,36,64,,66,67,,,,50,51,53,52',
'18,47,,,,54,43,,46,,49,115,,48,37,40,,45,38,,,,,68,17,,,39,,,15,16,',
',,,60,63,69,,61,55,,56,44,,,,36,64,,66,67,,,,50,51,53,52,18,47,,,,54',
'43,,46,,49,115,,48,37,40,,45,38,,,,,68,17,,,39,,,15,16,,,,,60,63,69',
',61,55,,56,44,,,,36,64,,66,67,,,,50,51,53,52,18,47,,,,54,43,,46,,49',
'115,,48,37,40,,45,38,,,,,68,17,,,39,,,15,16,,,,,60,63,69,,61,55,,56',
'44,74,75,76,36,64,,66,67,,,,50,51,53,52,18,47,,,,54,43,,46,,49,12,,48',
'37,40,,45,38,10,11,,,68,17,,,39,,,15,16,,,77,79,78,80,69,,,,,,44,,,',
'36,64,,66,67,,,,50,51,53,52,,47,60,63,,54,61,55,,56,425,82,,,,,,,,,',
',,,,103,18,106,,101,102,,43,,46,,49,12,,48,37,40,,45,38,10,11,,,68,17',
'105,,39,,,15,16,,,,89,88,,69,,84,85,,,44,,,83,36,64,,66,67,,,,50,51',
'53,52,,47,60,63,,54,61,55,,56,423,90,,,,,,,,,,,,,,,18,,,,,,43,,46,,49',
'12,,48,37,40,,45,38,10,11,,,68,17,,,39,,,15,16,,,,,60,63,69,,61,55,',
'56,44,,,,36,64,,66,67,,,,50,51,53,52,18,47,,,,54,43,,46,,49,115,,48',
'37,40,,45,38,,,,,68,17,,,39,,,15,16,,,,,60,63,69,,61,55,,56,44,,,,36',
'64,,66,67,,,,50,51,53,52,18,47,,,,54,43,,46,,49,115,,48,37,40,,45,38',
',,,,68,17,,,39,,,15,16,,,,,60,63,69,,61,55,,56,44,,,,36,64,,66,67,,',
',50,51,53,52,18,47,,,,54,43,,46,,49,115,,48,37,40,,45,38,,,,,68,17,',
',39,,,15,16,,,,,,,69,,,,,,44,,60,63,36,64,61,66,67,,,,50,51,53,52,,47',
'60,63,,54,61,55,,56,418,,,,,,,,,,,,,,,136,18,,133,,,,43,,46,,49,12,',
'48,37,40,,45,38,10,11,,69,68,17,,,39,,,15,16,137,64,,,60,63,69,,61,55',
',56,44,,,,36,64,,66,67,,,,50,51,53,52,18,47,,,,54,43,,46,,49,115,,48',
'37,40,,45,38,,,,,68,17,,,39,,,15,16,,,,,60,63,69,,61,55,,56,44,,,,36',
'64,,66,67,,,,50,51,53,52,18,47,,,,54,43,,46,,49,115,,48,37,40,,45,38',
',,,,68,17,,,39,,,15,16,,,,,60,63,69,,61,55,140,56,44,,,,36,64,,66,67',
',,,50,51,53,52,18,47,,,,54,43,,46,,49,12,,48,37,40,,45,38,10,11,,,68',
'17,,,39,,,15,16,,,,,60,63,69,,61,55,142,56,44,,,,36,64,,66,67,,,,50',
'51,53,52,18,47,,,,54,43,,46,,49,12,,48,37,40,,45,38,10,11,,,68,17,,',
'39,,,15,16,,,,,,,69,,,,,,44,,60,63,36,64,61,66,67,,,,50,51,53,52,,47',
'60,63,,54,61,55,,56,144,,,,,,,,,,,,,,,136,18,,133,,,,43,,46,,49,12,',
'48,37,40,,45,38,10,11,,69,68,17,,,39,,,15,16,137,64,,,60,63,69,,61,55',
',56,44,,,,36,64,,66,67,,,,50,51,53,52,18,47,,,,54,43,,46,,49,12,,48',
'37,40,,45,38,10,11,,,68,17,,,39,,,15,16,,,,,60,63,69,,61,55,,56,44,',
',,36,64,,66,67,,,,50,51,53,52,18,47,,,,54,43,,46,,49,12,,48,37,40,,45',
'38,10,11,,,68,17,,,39,,,15,16,,,,,60,63,69,,61,55,,56,44,,,,36,64,,66',
'67,,,,50,51,53,52,18,47,,,,54,43,,46,,49,115,,48,37,40,,45,38,,,,,68',
'17,,,39,,,15,16,,,,,60,63,69,,61,55,,155,44,,,,36,64,,66,67,,,,50,51',
'53,52,18,47,,,,54,43,,46,,49,115,,48,37,40,,45,38,,,,,68,17,,,39,,,15',
'16,,,,,60,63,69,,61,55,,56,44,,281,,36,64,,66,67,,,,50,51,53,52,18,47',
',,,54,43,,46,,49,115,,48,37,40,,45,38,,,,,68,17,,,39,,,15,16,,,,,60',
'63,69,,61,55,,56,44,,,,36,64,,66,67,,,,50,51,53,52,18,47,,,,54,43,,46',
',49,12,,48,37,40,,45,38,10,11,,,68,17,,,39,,,15,16,,,,,60,63,69,,61',
'55,,56,44,,,,36,64,,66,67,,,,50,51,53,52,18,47,,,,54,43,,46,,49,115',
',48,37,40,,45,38,,,,,68,17,,,39,,,15,16,,,,,60,63,69,,61,55,,56,44,',
',,36,64,,66,67,,,,50,51,53,52,18,47,,,,54,43,,46,,49,12,,48,37,40,,45',
'38,10,11,,,68,17,,,39,,,15,16,,,,,60,63,69,,61,55,,56,44,,,,36,64,,66',
'67,,,,50,51,53,52,18,47,,,,54,43,,46,,49,12,,48,37,40,,45,38,10,11,',
',68,17,,,39,,,15,16,,,,,60,63,69,,61,55,,56,44,,,,36,64,,66,67,,,,50',
'51,53,52,18,47,,,,54,43,,46,,49,12,,48,37,40,,45,38,10,11,,,68,17,,',
'39,,,15,16,,,,,60,63,69,,61,55,,56,44,,,,36,64,,66,67,,,,50,51,53,52',
'18,47,,,,54,43,,46,,49,12,,48,37,40,,45,38,10,11,,,68,17,,,39,,,15,16',
',,,,60,63,69,,61,55,,56,44,,,,36,64,,66,67,,,,50,51,53,52,18,47,,,,54',
'43,,46,,49,12,,48,37,40,,45,38,10,11,,,68,17,,,39,,,15,16,,,,,60,63',
'69,,61,55,,56,44,,,,36,64,,66,67,,,,50,51,53,52,18,47,,,,54,43,,46,',
'49,12,,48,37,40,,45,38,10,11,,,68,17,,,39,,,15,16,,,,,60,63,69,,61,55',
',56,44,,,,36,64,,66,67,,,,50,51,53,52,18,47,,,,54,43,,46,,49,12,,48',
'37,40,,45,38,10,11,,,68,17,,,39,,,15,16,,,,,60,63,69,,61,55,,56,44,',
',,36,64,,66,67,,,,50,51,53,52,18,47,,,,54,43,,46,,49,12,,48,37,40,,45',
'38,10,11,,,68,17,,,39,,,15,16,,,,,60,63,69,,61,55,,56,44,,,,36,64,,66',
'67,,,,50,51,53,52,18,47,,,,54,172,187,178,188,49,180,190,181,37,171',
',174,169,,,,,68,17,191,186,170,,,15,168,,,,,,,69,,,,,189,173,,,,36,64',
',66,67,,,,182,183,185,184,,179,192,193,,54,60,63,,82,61,55,,56,,82,',
',,,,,,103,,106,,101,102,103,18,106,,101,102,,43,,46,,49,115,,48,37,40',
',45,38,105,,,,68,17,105,,39,,,15,16,,,,,60,63,69,,61,55,,56,44,,,83',
'36,64,,66,67,,,,50,51,53,52,18,47,,,,54,43,,46,,49,115,,48,37,40,,45',
'38,,,,,68,17,,,39,,,15,16,,,,,60,63,69,,61,55,,56,44,,,,36,64,,66,67',
',,,50,51,53,52,18,47,,,,54,43,,46,,49,115,,48,37,40,,45,38,,,,,68,17',
',,39,,,15,16,,,,,60,63,69,,61,55,,56,44,,,,36,64,,66,67,,,,50,51,53',
'52,18,47,,,,54,43,,46,,49,115,,48,37,40,,45,38,,,,,68,17,,,39,,,15,16',
',,,,60,63,69,,61,55,,56,44,,,,36,64,,66,67,,,,50,51,53,52,18,47,,,,54',
'43,,46,,49,115,,48,37,40,,45,38,,,,,68,17,,,39,,,15,16,,,,,60,63,69',
',61,55,,56,44,,,,36,64,,66,67,,,,50,51,53,52,18,47,,,,54,43,,46,,49',
'115,,48,37,40,,45,38,,,,,68,17,,,39,,,15,16,,,,,60,63,69,,61,55,,56',
'44,,,,36,64,,66,67,,,,50,51,53,52,18,47,,,,54,43,,46,,49,115,,48,37',
'40,,45,38,,,,,68,17,,,39,,,15,16,,,,,60,63,69,,61,55,,56,44,,,,36,64',
',66,67,,,,50,51,53,52,18,47,,,,54,43,,46,,49,115,,48,37,40,,45,38,,',
',,68,17,,,39,,,15,16,,,,,60,63,69,,61,55,,56,44,,,,36,64,,66,67,,,,50',
'51,53,52,18,47,,,,54,43,,46,,49,115,,48,37,40,,45,38,,,,,68,17,,,39',
',,15,16,,,,,60,63,69,,61,55,,56,44,,,,36,64,,66,67,,,,50,51,53,52,18',
'47,,,,54,43,,46,,49,115,,48,37,40,,45,38,,,,,68,17,,,39,,,15,16,,,,',
'60,63,69,,61,55,,56,44,,,,36,64,,66,67,,,,50,51,53,52,18,47,,,,54,43',
',46,,49,115,,48,37,40,,45,38,,,,,68,17,,,39,,,15,16,,,,,60,63,69,,61',
'55,,56,44,,,,36,64,,66,67,,,,50,51,53,52,18,47,,,,54,43,,46,,49,115',
',48,37,40,,45,38,,,,,68,17,,,39,,,15,16,,,,,60,63,69,,61,55,,56,44,',
',,36,64,,66,67,,,,50,51,53,52,18,47,,,,54,43,,46,,49,115,,48,37,40,',
'45,38,,,,,68,17,,,39,,,15,16,,,,,60,63,69,,61,55,,56,44,,,,36,64,,66',
'67,,,,50,51,53,52,18,47,,,,54,43,,46,,49,115,,48,37,40,,45,38,,,,,68',
'17,,,39,,,15,16,,,,,60,63,69,,61,55,,56,44,,,,36,64,,66,67,,,,50,51',
'53,52,18,47,,,,54,43,,46,,49,115,,48,37,40,,45,38,,,,,68,17,,,39,,,15',
'16,,,,,60,63,69,,61,55,,56,44,,,,36,64,,66,67,,,,50,51,53,52,18,47,',
',,54,43,,46,,49,115,,48,37,40,,45,38,,,,,68,17,,,39,,,15,16,,,,,60,63',
'69,,61,55,,56,44,,,,36,64,,66,67,,,,50,51,53,52,18,47,,,,54,43,,46,',
'49,115,,48,37,40,,45,38,,,,,68,17,,,39,,,15,16,,,,,60,63,69,,61,55,',
'56,44,,,,36,64,,66,67,,,,50,51,53,52,18,47,,,,54,43,,46,,49,115,,48',
'37,40,,45,38,,,,,68,17,,,39,,,15,16,,,,,60,63,69,,61,55,,56,44,,,,36',
'64,,66,67,,,,50,51,53,52,18,47,,,,54,43,,46,,49,115,,48,37,40,,45,38',
',,,,68,17,,,39,,,15,16,,,,,60,63,69,,61,55,,56,44,,,,36,64,,66,67,,',
',50,51,53,52,18,47,,,,54,43,,46,,49,115,,48,37,40,,45,38,,,,,68,17,',
',39,,,15,16,,,,,,,69,,,,,,44,,,217,36,64,,66,67,,,,50,51,53,52,,47,60',
'63,,54,61,55,,56,,,,,,,,,,,,,,,,,18,219,,,,,43,,46,,49,12,,48,37,40',
',45,38,10,11,,,68,17,,,39,,,15,16,,,,,60,63,69,,61,55,,56,44,,,,36,64',
',66,67,,,,50,51,53,52,18,47,,,,54,43,,46,,49,115,,48,37,40,,45,38,,',
',,68,17,,,39,,,15,16,,,,,,,69,,,,,,44,,60,63,36,64,61,66,67,,,,50,51',
'53,52,,47,60,63,,54,61,55,,56,318,,,,,,,,,,,,,,,136,18,,133,,,,43,,46',
',49,12,,48,37,40,,45,38,10,11,,69,68,17,,,39,,,15,16,137,64,,,60,63',
'69,,61,55,,56,44,,,,36,64,,66,67,,,,50,51,53,52,18,47,,,,54,43,,46,',
'49,115,,48,37,40,,45,38,,,,,68,17,,,39,,,15,16,,,,,60,63,69,,61,55,',
'56,44,,,,36,64,,66,67,,,,50,51,53,52,18,47,,,,54,43,,46,,49,115,,48',
'37,40,,45,38,,,,,68,17,,,39,,,15,16,,,,,,,69,,,,,,44,,,,36,64,,66,67',
',,,50,51,53,52,,47,60,63,,54,61,55,,56,328,82,,,,,,,,,,,,,,103,18,106',
',101,102,,43,,46,,49,12,,48,37,40,,45,38,10,11,,,68,17,105,,39,,,15',
'16,,,,89,88,,69,,84,85,,,44,,,83,36,64,,66,67,,,,50,51,53,52,,47,60',
'63,,54,61,55,,56,330,90,,,,,,,,,,,,,,,18,,,,,,43,,46,,49,12,,48,37,40',
',45,38,10,11,,,68,17,,,39,,,15,16,,,,,60,63,69,,61,55,,56,44,,,,36,64',
',66,67,,,,50,51,53,52,18,47,,,,54,43,,46,,49,115,,48,37,40,,45,38,,',
',,68,17,,,39,,,15,16,,,,,60,63,69,,61,55,,56,44,,,,36,64,,66,67,,,,50',
'51,53,52,18,47,,,,54,43,,46,,49,115,,48,37,40,,45,38,,,,,68,17,,,39',
',,15,16,,,,,,,69,,,,,,44,,60,63,36,64,61,66,67,,,,50,51,53,52,,47,60',
'63,,54,61,55,,56,144,,,,,,,,,,,,,,,136,18,,133,,,,43,,46,,49,12,,48',
'37,40,,45,38,10,11,,69,68,17,,,39,,,15,16,137,64,,,60,63,69,,61,55,',
'56,44,,,,36,64,,66,67,,,,50,51,53,52,18,47,,,,54,43,,46,,49,12,,48,37',
'40,,45,38,10,11,,,68,17,,,39,,,15,16,,,,,60,63,69,,61,55,,56,44,,,,36',
'64,,66,67,,,,50,51,53,52,18,47,,,,54,43,,46,,49,12,,48,37,40,,45,38',
'10,11,,,68,17,,,39,,,15,16,,,,,60,63,69,,61,55,,56,44,,,,36,64,,66,67',
',,,50,51,53,52,18,47,,,,54,43,,46,,49,12,,48,37,40,,45,38,10,11,,,68',
'17,,,39,,,15,16,,,,,,,69,,,,,,44,,,,36,64,,66,67,,,,50,51,53,52,,47',
'60,63,,54,61,55,,56,384,82,,,,,,,,,,,,,,103,18,106,,101,102,,43,,46',
',49,115,,48,37,40,,45,38,,,,,68,17,105,,39,,,15,16,,,,,60,63,69,,61',
'55,,56,44,,,,36,64,,66,67,,,,50,51,53,52,18,47,,,,54,43,,46,,49,12,',
'48,37,40,,45,38,10,11,,,68,17,,,39,,,15,16,,,,,60,63,69,,61,55,,56,44',
',,,36,64,,66,67,,,,50,51,53,52,18,47,,,,54,43,,46,,49,115,,48,37,40',
',45,38,,,,,68,17,,,39,,,15,16,,,,,,,69,,,,,,44,,,,36,64,,66,67,,,,50',
'51,53,52,,47,60,63,,54,61,55,,56,298,187,297,188,,295,190,299,,292,',
'294,296,,,,18,247,,191,186,300,43,,46,293,49,12,,48,37,40,,45,38,10',
'11,189,301,68,17,,,39,,,15,16,,,304,305,303,302,69,306,192,193,,,44',
',,,36,64,,66,67,,,,50,51,53,52,,47,60,63,,54,61,55,,56,345,82,,,,,,',
',,,,,,,103,18,106,,101,102,,43,,46,,49,12,,48,37,40,,45,38,10,11,,,68',
'17,105,,39,,,15,16,,,,,60,63,69,,61,55,,56,44,,,,36,64,,66,67,,,,50',
'51,53,52,18,47,,,,54,43,,46,,49,12,,48,37,40,,45,38,10,11,,,68,17,,',
'39,,,15,16,,,,,60,63,69,,61,55,,56,44,,,,36,64,,66,67,,,,50,51,53,52',
'18,47,,,,54,43,,46,,49,12,,48,37,40,,45,38,10,11,,,68,17,,,39,,,15,16',
',,,,60,63,69,,61,55,,56,44,,,,36,64,,66,67,,,,50,51,53,52,18,47,,,,54',
'43,,46,,49,115,,48,37,40,,45,38,,,,,68,17,,,39,,,15,16,,,,,60,63,69',
',61,55,,56,44,,,,36,64,,66,67,,,,50,51,53,52,18,47,,,,54,43,,46,,49',
'115,,48,37,40,,45,38,,,,,68,17,,,39,,,15,16,,,,,60,63,69,,61,55,,56',
'44,,,,36,64,,66,67,,,,50,51,53,52,18,47,,,,54,43,,46,,49,115,,48,37',
'40,,45,38,,,,,68,17,,,39,,,15,16,,,,,60,63,69,,61,55,,56,44,,,,36,64',
',66,67,,,,50,51,53,52,18,47,,,,54,43,,46,,49,115,,48,37,40,,45,38,,',
',,68,17,,,39,,,15,16,,,,,60,63,69,,61,55,,56,44,,,,36,64,,66,67,,,,50',
'51,53,52,18,47,,,,54,43,,46,,49,115,,48,37,40,,45,38,,,,,68,17,,,39',
',,15,16,,,,,60,63,69,,61,55,,56,44,,,,36,64,,66,67,,,,50,51,53,52,18',
'47,,,,54,43,,46,,49,115,,48,37,40,,45,38,,,,,68,17,,,39,,,15,16,,,,',
'60,63,69,,61,55,,56,44,,,,36,64,,66,67,,,,50,51,53,52,18,47,,,,54,43',
',46,,49,12,,48,37,40,,45,38,10,11,,,68,17,,,39,,,15,16,,,,,,,69,,,,',
',44,,,,36,64,82,66,67,,,,50,51,53,52,82,47,250,,103,54,106,,101,102',
',,98,93,103,,106,,101,102,,94,96,95,97,,,,,,105,,,,,,,,,,105,,,,100',
'99,,,86,87,89,88,91,92,,84,85,82,,249,,,83,,,,,,,98,93,103,,106,,101',
'102,,94,96,95,97,,,,,90,,,,,,,,,,,105,,,,100,99,,,86,87,89,88,91,92',
',84,85,82,,248,,,83,,,,,,,98,93,103,,106,82,101,102,,94,96,95,97,,,',
',90,,103,,106,,101,102,,,,105,,,,100,99,,82,86,87,89,88,91,92,,84,85',
'105,,98,93,103,83,106,,101,102,,94,96,95,97,84,85,,,,,,83,,,,,,,90,105',
',,,100,99,,82,86,87,89,88,91,92,,84,85,,,98,93,103,83,106,82,101,102',
',94,96,95,97,,274,275,,,,103,,106,,101,102,,,90,105,,,,100,99,,,86,87',
'89,88,91,92,,84,85,105,,,,,83,,,86,87,89,88,82,,,84,85,,,,,,83,,98,93',
'103,,106,90,101,102,,94,96,95,97,,,,,,,,,,90,,,,,,105,,,,100,99,,82',
'86,87,89,88,91,92,,84,85,,,98,93,103,83,106,82,101,102,,94,96,95,97',
',,,,,,103,,106,,101,102,,,90,105,,,,100,99,,82,86,87,89,88,91,92,,84',
'85,105,,98,93,103,83,106,82,101,102,,94,96,95,97,84,85,,,,,103,83,106',
',101,102,,,90,105,,,,100,99,,82,86,87,89,88,91,92,,84,85,105,,98,93',
'103,83,106,,101,102,,94,96,95,97,84,85,,,,,,83,,,,,,,90,105,,,,100,99',
',,86,87,89,88,91,92,82,84,85,,,,,,83,,,,98,93,103,278,106,,101,102,',
'94,96,95,97,,,,,,,,90,,,,,,,,105,,,,100,99,,,86,87,89,88,91,92,82,84',
'85,,,,,,83,,,,98,93,103,311,106,,101,102,,94,96,95,97,,,,,,,,90,,,,',
',,,105,,,,100,99,,82,86,87,89,88,91,92,,84,85,,,98,93,103,83,106,,101',
'102,,94,96,95,97,,,,,,,,,,,,,,,90,105,,,,100,99,,82,86,87,89,88,91,92',
',84,85,,,98,93,103,83,106,82,101,102,,94,96,95,97,,,,,,,103,,106,,101',
'102,,,90,105,,,,100,99,,,86,87,89,88,91,92,,84,85,105,,,,,83,,,86,87',
'89,88,82,,,84,85,286,,,,,83,,98,93,103,,106,90,101,102,,94,96,95,97',
',,,,,,,,,90,,,,,,105,,,,100,99,,82,86,87,89,88,91,92,,84,85,,,98,93',
'103,83,106,82,101,102,,94,96,95,97,,,,,,,103,,106,,101,102,,,90,105',
',,,100,99,,,86,87,89,88,91,92,,84,85,105,,,,,83,,,86,87,89,88,91,92',
',84,85,,82,,,,83,,,,,,,90,98,93,103,438,106,,101,102,,94,96,95,97,,',
',90,,,,,,,,,,,,105,,,,100,99,,82,86,87,89,88,91,92,,84,85,,,98,93,103',
'83,106,,101,102,,94,96,95,97,,,,,,,,,,,,,,,90,105,,,,,99,,82,86,87,89',
'88,91,92,,84,85,,,98,93,103,83,106,82,101,102,,94,96,95,97,,,,,,93,103',
',106,,101,102,,94,90,105,,,,,,,,86,87,89,88,91,92,,84,85,105,,,,,83',
',82,86,87,89,88,91,92,,84,85,,,,93,103,83,106,,101,102,,94,90,,,,,,',
',,,,,,,,,,90,105,,,,,82,,,86,87,89,88,91,92,,84,85,98,93,103,,106,83',
'101,102,,94,96,95,97,,,,,,,,,,,,,,,,105,90,,,100,99,,82,86,87,89,88',
'91,92,,84,85,,,,93,103,83,106,82,101,102,,94,,,,,,,,,93,103,,106,,101',
'102,,94,90,105,,,,,82,,,86,87,89,88,91,92,,84,85,105,,103,,106,83,101',
'102,86,87,89,88,91,92,,84,85,,,,,,83,,,,,,105,90,,,,,,,86,87,89,88,91',
'92,,84,85,82,90,430,,,83,,,,,,,98,93,103,,106,,101,102,,94,96,95,97',
',,,,90,,,,,,,,,,,105,,,,100,99,,,86,87,89,88,91,92,,84,85,,298,187,297',
'188,83,295,190,299,,292,,294,296,,,,,,,191,186,300,,,,293,,,90,,,,,',
',,,189,301,,,,,,,,,,,,304,305,303,302,,306,192,193,298,187,297,188,',
'295,190,299,,292,,294,296,,,,,,,191,186,300,,,,293,,,,,,,,,,,,189,301',
',,,,,,,,,,,304,305,303,302,,306,192,193,298,187,297,188,,295,190,299',
',292,,294,296,,,,,,,191,186,300,,,,293,,,,,,,,,,,,189,301,,,,,,,,,,',
',304,305,303,302,,306,192,193,298,187,297,188,,295,190,299,,292,,294',
'296,,,,,,,191,186,300,,,,293,,,,,,,,,,,,189,301,,,,,,,,,,,,304,305,303',
'302,,306,192,193,298,187,297,188,,295,190,299,,292,,294,296,,,,,,,191',
'186,300,,,,293,,,,,,,,,,,,189,301,,,,,,,,,,,,304,305,303,302,,306,192',
'193' ]
        racc_action_table = arr = ::Array.new(7157, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

clist = [
'0,0,379,182,0,0,246,0,334,198,185,183,244,255,171,170,184,169,350,350',
'246,177,331,198,0,198,143,198,198,143,0,331,0,244,0,0,179,0,0,0,179',
'0,0,0,0,182,255,0,0,198,226,0,185,183,0,0,171,170,184,169,174,174,0',
'177,174,174,115,174,0,375,115,198,0,0,375,0,0,0,12,279,0,0,0,0,174,0',
'225,334,334,0,174,153,174,276,174,174,121,174,174,174,195,174,174,141',
'153,195,12,174,174,121,12,174,153,139,174,174,320,121,131,180,4,4,174',
'180,4,4,153,4,174,320,47,121,174,174,47,174,174,320,148,148,174,174',
'174,174,4,174,129,231,439,174,4,439,4,287,4,4,231,4,4,4,4,4,4,4,4,289',
'314,4,4,231,314,4,46,314,4,4,46,231,291,178,430,430,4,178,430,430,293',
'430,4,309,151,151,4,4,151,4,4,376,128,376,4,4,4,4,430,4,328,223,328',
'4,430,312,430,271,430,430,316,430,430,430,317,430,430,319,146,127,258',
'430,430,120,327,430,257,329,430,430,330,157,118,219,420,420,430,218',
'420,420,337,420,430,253,349,252,430,430,351,430,430,162,110,108,430',
'430,430,430,420,430,107,104,359,430,420,103,420,361,420,420,362,420',
'420,420,365,420,420,72,370,163,164,420,420,245,65,420,277,380,420,420',
'382,383,64,243,173,173,420,389,173,173,390,173,420,242,397,398,420,420',
'404,420,420,42,41,236,420,420,420,420,173,420,413,8,417,420,173,165',
'173,422,173,173,424,173,173,173,426,173,173,5,432,1,167,173,173,229',
'70,173,,,173,173,,,,,172,172,173,,172,172,,172,173,,,,173,173,,173,173',
',,,173,173,173,173,172,173,,,,173,172,,172,,172,172,,172,172,172,,172',
'172,,,,,172,172,,,172,,,172,172,,,,,10,10,172,,10,10,,10,172,,,,172',
'172,,172,172,,,,172,172,172,172,10,172,,,,172,10,,10,,10,10,,10,10,10',
',10,10,10,10,,,10,10,,,10,,,10,10,,,,,11,11,10,,11,11,,11,10,,,,10,10',
',10,10,,,,10,10,10,10,11,10,,,,10,11,,11,,11,11,,11,11,11,,11,11,11',
'11,,,11,11,,,11,,,11,11,,,,,412,412,11,,412,412,,412,11,,,,11,11,,11',
'11,,,,11,11,11,11,412,11,,,,11,412,,412,,412,412,,412,412,412,,412,412',
'412,412,,,412,412,,,412,,,412,412,,,,,15,15,412,,15,15,,15,412,,,,412',
'412,,412,412,,,,412,412,412,412,15,412,,,,412,15,,15,,15,15,,15,15,15',
',15,15,,,,,15,15,,,15,,,15,15,,,,,16,16,15,,16,16,,16,15,,,,15,15,,15',
'15,,,,15,15,15,15,16,15,,,,15,16,,16,,16,16,,16,16,16,,16,16,,,,,16',
'16,,,16,,,16,16,,,,,17,17,16,,17,17,,17,16,,,,16,16,,16,16,,,,16,16',
'16,16,17,16,,,,16,17,,17,,17,17,,17,17,17,,17,17,,,,,17,17,,,17,,,17',
'17,,,,,18,18,17,,18,18,,18,17,7,7,7,17,17,,17,17,,,,17,17,17,17,18,17',
',,,17,18,,18,,18,18,,18,18,18,,18,18,18,18,,,18,18,,,18,,,18,18,,,7',
'7,7,7,18,,,,,,18,,,,18,18,,18,18,,,,18,18,18,18,,18,411,411,,18,411',
'411,,411,411,200,,,,,,,,,,,,,,200,411,200,,200,200,,411,,411,,411,411',
',411,411,411,,411,411,411,411,,,411,411,200,,411,,,411,411,,,,200,200',
',411,,200,200,,,411,,,200,411,411,,411,411,,,,411,411,411,411,,411,409',
'409,,411,409,409,,409,409,200,,,,,,,,,,,,,,,409,,,,,,409,,409,,409,409',
',409,409,409,,409,409,409,409,,,409,409,,,409,,,409,409,,,,,43,43,409',
',43,43,,43,409,,,,409,409,,409,409,,,,409,409,409,409,43,409,,,,409',
'43,,43,,43,43,,43,43,43,,43,43,,,,,43,43,,,43,,,43,43,,,,,44,44,43,',
'44,44,,44,43,,,,43,43,,43,43,,,,43,43,43,43,44,43,,,,43,44,,44,,44,44',
',44,44,44,,44,44,,,,,44,44,,,44,,,44,44,,,,,45,45,44,,45,45,,45,44,',
',,44,44,,44,44,,,,44,44,44,44,45,44,,,,44,45,,45,,45,45,,45,45,45,,45',
'45,,,,,45,45,,,45,,,45,45,,,,,,,45,,,,,,45,,254,254,45,45,254,45,45',
',,,45,45,45,45,,45,393,393,,45,393,393,,393,393,,,,,,,,,,,,,,,254,393',
',254,,,,393,,393,,393,393,,393,393,393,,393,393,393,393,,254,393,393',
',,393,,,393,393,254,254,,,388,388,393,,388,388,,388,393,,,,393,393,',
'393,393,,,,393,393,393,393,388,393,,,,393,388,,388,,388,388,,388,388',
'388,,388,388,,,,,388,388,,,388,,,388,388,,,,,217,217,388,,217,217,,217',
'388,,,,388,388,,388,388,,,,388,388,388,388,217,388,,,,388,217,,217,',
'217,217,,217,217,217,,217,217,,,,,217,217,,,217,,,217,217,,,,,54,54',
'217,,54,54,54,54,217,,,,217,217,,217,217,,,,217,217,217,217,54,217,',
',,217,54,,54,,54,54,,54,54,54,,54,54,54,54,,,54,54,,,54,,,54,54,,,,',
'55,55,54,,55,55,55,55,54,,,,54,54,,54,54,,,,54,54,54,54,55,54,,,,54',
'55,,55,,55,55,,55,55,55,,55,55,55,55,,,55,55,,,55,,,55,55,,,,,,,55,',
',,,,55,,48,48,55,55,48,55,55,,,,55,55,55,55,,55,56,56,,55,56,56,,56',
'56,,,,,,,,,,,,,,,48,56,,48,,,,56,,56,,56,56,,56,56,56,,56,56,56,56,',
'48,56,56,,,56,,,56,56,48,48,,,62,62,56,,62,62,,62,56,,,,56,56,,56,56',
',,,56,56,56,56,62,56,,,,56,62,,62,,62,62,,62,62,62,,62,62,62,62,,,62',
'62,,,62,,,62,62,,,,,386,386,62,,386,386,,386,62,,,,62,62,,62,62,,,,62',
'62,62,62,386,62,,,,62,386,,386,,386,386,,386,386,386,,386,386,386,386',
',,386,386,,,386,,,386,386,,,,,378,378,386,,378,378,,378,386,,,,386,386',
',386,386,,,,386,386,386,386,378,386,,,,386,378,,378,,378,378,,378,378',
'378,,378,378,,,,,378,378,,,378,,,378,378,,,,,67,67,378,,67,67,,67,378',
',,,378,378,,378,378,,,,378,378,378,378,67,378,,,,378,67,,67,,67,67,',
'67,67,67,,67,67,,,,,67,67,,,67,,,67,67,,,,,168,168,67,,168,168,,168',
'67,,168,,67,67,,67,67,,,,67,67,67,67,168,67,,,,67,168,,168,,168,168',
',168,168,168,,168,168,,,,,168,168,,,168,,,168,168,,,,,71,71,168,,71',
'71,,71,168,,,,168,168,,168,168,,,,168,168,168,168,71,168,,,,168,71,',
'71,,71,71,,71,71,71,,71,71,71,71,,,71,71,,,71,,,71,71,,,,,281,281,71',
',281,281,,281,71,,,,71,71,,71,71,,,,71,71,71,71,281,71,,,,71,281,,281',
',281,281,,281,281,281,,281,281,,,,,281,281,,,281,,,281,281,,,,,73,73',
'281,,73,73,,73,281,,,,281,281,,281,281,,,,281,281,281,281,73,281,,,',
'281,73,,73,,73,73,,73,73,73,,73,73,73,73,,,73,73,,,73,,,73,73,,,,,74',
'74,73,,74,74,,74,73,,,,73,73,,73,73,,,,73,73,73,73,74,73,,,,73,74,,74',
',74,74,,74,74,74,,74,74,74,74,,,74,74,,,74,,,74,74,,,,,75,75,74,,75',
'75,,75,74,,,,74,74,,74,74,,,,74,74,74,74,75,74,,,,74,75,,75,,75,75,',
'75,75,75,,75,75,75,75,,,75,75,,,75,,,75,75,,,,,76,76,75,,76,76,,76,75',
',,,75,75,,75,75,,,,75,75,75,75,76,75,,,,75,76,,76,,76,76,,76,76,76,',
'76,76,76,76,,,76,76,,,76,,,76,76,,,,,77,77,76,,77,77,,77,76,,,,76,76',
',76,76,,,,76,76,76,76,77,76,,,,76,77,,77,,77,77,,77,77,77,,77,77,77',
'77,,,77,77,,,77,,,77,77,,,,,78,78,77,,78,78,,78,77,,,,77,77,,77,77,',
',,77,77,77,77,78,77,,,,77,78,,78,,78,78,,78,78,78,,78,78,78,78,,,78',
'78,,,78,,,78,78,,,,,79,79,78,,79,79,,79,78,,,,78,78,,78,78,,,,78,78',
'78,78,79,78,,,,78,79,,79,,79,79,,79,79,79,,79,79,79,79,,,79,79,,,79',
',,79,79,,,,,80,80,79,,80,80,,80,79,,,,79,79,,79,79,,,,79,79,79,79,80',
'79,,,,79,80,,80,,80,80,,80,80,80,,80,80,80,80,,,80,80,,,80,,,80,80,',
',,,81,81,80,,81,81,,81,80,,,,80,80,,80,80,,,,80,80,80,80,81,80,,,,80',
'81,81,81,81,81,81,81,81,81,81,,81,81,,,,,81,81,81,81,81,,,81,81,,,,',
',,81,,,,,81,81,,,,81,81,,81,81,,,,81,81,81,81,,81,81,81,,81,82,82,,117',
'82,82,,82,,197,,,,,,,,117,,117,,117,117,197,82,197,,197,197,,82,,82',
',82,82,,82,82,82,,82,82,117,,,,82,82,197,,82,,,82,82,,,,,83,83,82,,83',
'83,,83,82,,,197,82,82,,82,82,,,,82,82,82,82,83,82,,,,82,83,,83,,83,83',
',83,83,83,,83,83,,,,,83,83,,,83,,,83,83,,,,,84,84,83,,84,84,,84,83,',
',,83,83,,83,83,,,,83,83,83,83,84,83,,,,83,84,,84,,84,84,,84,84,84,,84',
'84,,,,,84,84,,,84,,,84,84,,,,,85,85,84,,85,85,,85,84,,,,84,84,,84,84',
',,,84,84,84,84,85,84,,,,84,85,,85,,85,85,,85,85,85,,85,85,,,,,85,85',
',,85,,,85,85,,,,,86,86,85,,86,86,,86,85,,,,85,85,,85,85,,,,85,85,85',
'85,86,85,,,,85,86,,86,,86,86,,86,86,86,,86,86,,,,,86,86,,,86,,,86,86',
',,,,87,87,86,,87,87,,87,86,,,,86,86,,86,86,,,,86,86,86,86,87,86,,,,86',
'87,,87,,87,87,,87,87,87,,87,87,,,,,87,87,,,87,,,87,87,,,,,88,88,87,',
'88,88,,88,87,,,,87,87,,87,87,,,,87,87,87,87,88,87,,,,87,88,,88,,88,88',
',88,88,88,,88,88,,,,,88,88,,,88,,,88,88,,,,,89,89,88,,89,89,,89,88,',
',,88,88,,88,88,,,,88,88,88,88,89,88,,,,88,89,,89,,89,89,,89,89,89,,89',
'89,,,,,89,89,,,89,,,89,89,,,,,90,90,89,,90,90,,90,89,,,,89,89,,89,89',
',,,89,89,89,89,90,89,,,,89,90,,90,,90,90,,90,90,90,,90,90,,,,,90,90',
',,90,,,90,90,,,,,91,91,90,,91,91,,91,90,,,,90,90,,90,90,,,,90,90,90',
'90,91,90,,,,90,91,,91,,91,91,,91,91,91,,91,91,,,,,91,91,,,91,,,91,91',
',,,,92,92,91,,92,92,,92,91,,,,91,91,,91,91,,,,91,91,91,91,92,91,,,,91',
'92,,92,,92,92,,92,92,92,,92,92,,,,,92,92,,,92,,,92,92,,,,,93,93,92,',
'93,93,,93,92,,,,92,92,,92,92,,,,92,92,92,92,93,92,,,,92,93,,93,,93,93',
',93,93,93,,93,93,,,,,93,93,,,93,,,93,93,,,,,94,94,93,,94,94,,94,93,',
',,93,93,,93,93,,,,93,93,93,93,94,93,,,,93,94,,94,,94,94,,94,94,94,,94',
'94,,,,,94,94,,,94,,,94,94,,,,,95,95,94,,95,95,,95,94,,,,94,94,,94,94',
',,,94,94,94,94,95,94,,,,94,95,,95,,95,95,,95,95,95,,95,95,,,,,95,95',
',,95,,,95,95,,,,,96,96,95,,96,96,,96,95,,,,95,95,,95,95,,,,95,95,95',
'95,96,95,,,,95,96,,96,,96,96,,96,96,96,,96,96,,,,,96,96,,,96,,,96,96',
',,,,97,97,96,,97,97,,97,96,,,,96,96,,96,96,,,,96,96,96,96,97,96,,,,96',
'97,,97,,97,97,,97,97,97,,97,97,,,,,97,97,,,97,,,97,97,,,,,98,98,97,',
'98,98,,98,97,,,,97,97,,97,97,,,,97,97,97,97,98,97,,,,97,98,,98,,98,98',
',98,98,98,,98,98,,,,,98,98,,,98,,,98,98,,,,,99,99,98,,99,99,,99,98,',
',,98,98,,98,98,,,,98,98,98,98,99,98,,,,98,99,,99,,99,99,,99,99,99,,99',
'99,,,,,99,99,,,99,,,99,99,,,,,100,100,99,,100,100,,100,99,,,,99,99,',
'99,99,,,,99,99,99,99,100,99,,,,99,100,,100,,100,100,,100,100,100,,100',
'100,,,,,100,100,,,100,,,100,100,,,,,101,101,100,,101,101,,101,100,,',
',100,100,,100,100,,,,100,100,100,100,101,100,,,,100,101,,101,,101,101',
',101,101,101,,101,101,,,,,101,101,,,101,,,101,101,,,,,,,101,,,,,,101',
',,101,101,101,,101,101,,,,101,101,101,101,,101,102,102,,101,102,102',
',102,,,,,,,,,,,,,,,,,102,102,,,,,102,,102,,102,102,,102,102,102,,102',
'102,102,102,,,102,102,,,102,,,102,102,,,,,360,360,102,,360,360,,360',
'102,,,,102,102,,102,102,,,,102,102,102,102,360,102,,,,102,360,,360,',
'360,360,,360,360,360,,360,360,,,,,360,360,,,360,,,360,360,,,,,,,360',
',,,,,360,,181,181,360,360,181,360,360,,,,360,360,360,360,,360,234,234',
',360,234,234,,234,234,,,,,,,,,,,,,,,181,234,,181,,,,234,,234,,234,234',
',234,234,234,,234,234,234,234,,181,234,234,,,234,,,234,234,181,181,',
',105,105,234,,105,105,,105,234,,,,234,234,,234,234,,,,234,234,234,234',
'105,234,,,,234,105,,105,,105,105,,105,105,105,,105,105,,,,,105,105,',
',105,,,105,105,,,,,106,106,105,,106,106,,106,105,,,,105,105,,105,105',
',,,105,105,105,105,106,105,,,,105,106,,106,,106,106,,106,106,106,,106',
'106,,,,,106,106,,,106,,,106,106,,,,,,,106,,,,,,106,,,,106,106,,106,106',
',,,106,106,106,106,,106,248,248,,106,248,248,,248,248,199,,,,,,,,,,',
',,,199,248,199,,199,199,,248,,248,,248,248,,248,248,248,,248,248,248',
'248,,,248,248,199,,248,,,248,248,,,,199,199,,248,,199,199,,,248,,,199',
'248,248,,248,248,,,,248,248,248,248,,248,249,249,,248,249,249,,249,249',
'199,,,,,,,,,,,,,,,249,,,,,,249,,249,,249,249,,249,249,249,,249,249,249',
'249,,,249,249,,,249,,,249,249,,,,,109,109,249,,109,109,,109,249,,,,249',
'249,,249,249,,,,249,249,249,249,109,249,,,,249,109,,109,,109,109,,109',
'109,109,,109,109,,,,,109,109,,,109,,,109,109,,,,,250,250,109,,250,250',
',250,109,,,,109,109,,109,109,,,,109,109,109,109,250,109,,,,109,250,',
'250,,250,250,,250,250,250,,250,250,,,,,250,250,,,250,,,250,250,,,,,',
',250,,,,,,250,,339,339,250,250,339,250,250,,,,250,250,250,250,,250,155',
'155,,250,155,155,,155,155,,,,,,,,,,,,,,,339,155,,339,,,,155,,155,,155',
'155,,155,155,155,,155,155,155,155,,339,155,155,,,155,,,155,155,339,339',
',,256,256,155,,256,256,,256,155,,,,155,155,,155,155,,,,155,155,155,155',
'256,155,,,,155,256,,256,,256,256,,256,256,256,,256,256,256,256,,,256',
'256,,,256,,,256,256,,,,,336,336,256,,336,336,,336,256,,,,256,256,,256',
'256,,,,256,256,256,256,336,256,,,,256,336,,336,,336,336,,336,336,336',
',336,336,336,336,,,336,336,,,336,,,336,336,,,,,152,152,336,,152,152',
',152,336,,,,336,336,,336,336,,,,336,336,336,336,152,336,,,,336,152,',
'152,,152,152,,152,152,152,,152,152,152,152,,,152,152,,,152,,,152,152',
',,,,,,152,,,,,,152,,,,152,152,,152,152,,,,152,152,152,152,,152,332,332',
',152,332,332,,332,332,114,,,,,,,,,,,,,,114,332,114,,114,114,,332,,332',
',332,332,,332,332,332,,332,332,,,,,332,332,114,,332,,,332,332,,,,,325',
'325,332,,325,325,,325,332,,,,332,332,,332,332,,,,332,332,332,332,325',
'332,,,,332,325,,325,,325,325,,325,325,325,,325,325,325,325,,,325,325',
',,325,,,325,325,,,,,324,324,325,,324,324,,324,325,,,,325,325,,325,325',
',,,325,325,325,325,324,325,,,,325,324,,324,,324,324,,324,324,324,,324',
'324,,,,,324,324,,,324,,,324,324,,,,,,,324,,,,,,324,,,,324,324,,324,324',
',,,324,324,324,324,,324,122,122,,324,122,122,,122,440,440,440,440,,440',
'440,440,,440,,440,440,,,,122,122,,440,440,440,122,,122,440,122,122,',
'122,122,122,,122,122,122,122,440,440,122,122,,,122,,,122,122,,,440,440',
'440,440,122,440,440,440,,,122,,,,122,122,,122,122,,,,122,122,122,122',
',122,260,260,,122,260,260,,260,260,116,,,,,,,,,,,,,,116,260,116,,116',
'116,,260,,260,,260,260,,260,260,260,,260,260,260,260,,,260,260,116,',
'260,,,260,260,,,,,261,261,260,,261,261,,261,260,,,,260,260,,260,260',
',,,260,260,260,260,261,260,,,,260,261,,261,,261,261,,261,261,261,,261',
'261,261,261,,,261,261,,,261,,,261,261,,,,,266,266,261,,266,266,,266',
'261,,,,261,261,,261,261,,,,261,261,261,261,266,261,,,,261,266,,266,',
'266,266,,266,266,266,,266,266,266,266,,,266,266,,,266,,,266,266,,,,',
'321,321,266,,321,321,,321,266,,,,266,266,,266,266,,,,266,266,266,266',
'321,266,,,,266,321,,321,,321,321,,321,321,321,,321,321,,,,,321,321,',
',321,,,321,321,,,,,310,310,321,,310,310,,310,321,,,,321,321,,321,321',
',,,321,321,321,321,310,321,,,,321,310,,310,,310,310,,310,310,310,,310',
'310,,,,,310,310,,,310,,,310,310,,,,,286,286,310,,286,286,,286,310,,',
',310,310,,310,310,,,,310,310,310,310,286,310,,,,310,286,,286,,286,286',
',286,286,286,,286,286,,,,,286,286,,,286,,,286,286,,,,,285,285,286,,285',
'285,,285,286,,,,286,286,,286,286,,,,286,286,286,286,285,286,,,,286,285',
',285,,285,285,,285,285,285,,285,285,,,,,285,285,,,285,,,285,285,,,,',
'283,283,285,,283,283,,283,285,,,,285,285,,285,285,,,,285,285,285,285',
'283,285,,,,285,283,,283,,283,283,,283,283,283,,283,283,,,,,283,283,',
',283,,,283,283,,,,,282,282,283,,282,282,,282,283,,,,283,283,,283,283',
',,,283,283,283,283,282,283,,,,283,282,,282,,282,282,,282,282,282,,282',
'282,,,,,282,282,,,282,,,282,282,,,,,366,366,282,,366,366,,366,282,,',
',282,282,,282,282,,,,282,282,282,282,366,282,,,,282,366,,366,,366,366',
',366,366,366,,366,366,366,366,,,366,366,,,366,,,366,366,,,,,,,366,,',
',,,366,,,,366,366,196,366,366,,,,366,366,366,366,126,366,126,,196,366',
'196,,196,196,,,126,126,126,,126,,126,126,,126,126,126,126,,,,,,196,',
',,,,,,,,126,,,,126,126,,,126,126,126,126,126,126,,126,126,125,,125,',
',126,,,,,,,125,125,125,,125,,125,125,,125,125,125,125,,,,,126,,,,,,',
',,,,125,,,,125,125,,,125,125,125,125,125,125,,125,125,123,,123,,,125',
',,,,,,123,123,123,,123,201,123,123,,123,123,123,123,,,,,125,,201,,201',
',201,201,,,,123,,,,123,123,,154,123,123,123,123,123,123,,123,123,201',
',154,154,154,123,154,,154,154,,154,154,154,154,201,201,,,,,,201,,,,',
',,123,154,,,,154,154,,354,154,154,154,154,154,154,,154,154,,,354,354',
'354,154,354,204,354,354,,354,354,354,354,,154,154,,,,204,,204,,204,204',
',,154,354,,,,354,354,,,354,354,354,354,354,354,,354,354,204,,,,,354',
',,204,204,204,204,355,,,204,204,,,,,,204,,355,355,355,,355,354,355,355',
',355,355,355,355,,,,,,,,,,204,,,,,,355,,,,355,355,,356,355,355,355,355',
'355,355,,355,355,,,356,356,356,355,356,202,356,356,,356,356,356,356',
',,,,,,202,,202,,202,202,,,355,356,,,,356,356,,357,356,356,356,356,356',
'356,,356,356,202,,357,357,357,356,357,203,357,357,,357,357,357,357,202',
'202,,,,,203,202,203,,203,203,,,356,357,,,,357,357,,358,357,357,357,357',
'357,357,,357,357,203,,358,358,358,357,358,,358,358,,358,358,358,358',
'203,203,,,,,,203,,,,,,,357,358,,,,358,358,,,358,358,358,358,358,358',
'166,358,358,,,,,,358,,,,166,166,166,166,166,,166,166,,166,166,166,166',
',,,,,,,358,,,,,,,,166,,,,166,166,,,166,166,166,166,166,166,227,166,166',
',,,,,166,,,,227,227,227,227,227,,227,227,,227,227,227,227,,,,,,,,166',
',,,,,,,227,,,,227,227,,374,227,227,227,227,227,227,,227,227,,,374,374',
'374,227,374,,374,374,,374,374,374,374,,,,,,,,,,,,,,,227,374,,,,374,374',
',222,374,374,374,374,374,374,,374,374,,,222,222,222,374,222,205,222',
'222,,222,222,222,222,,,,,,,205,,205,,205,205,,,374,222,,,,222,222,,',
'222,222,222,222,222,222,,222,222,205,,,,,222,,,205,205,205,205,214,',
',205,205,214,,,,,205,,214,214,214,,214,222,214,214,,214,214,214,214',
',,,,,,,,,205,,,,,,214,,,,214,214,,9,214,214,214,214,214,214,,214,214',
',,9,9,9,214,9,206,9,9,,9,9,9,9,,,,,,,206,,206,,206,206,,,214,9,,,,9',
'9,,,9,9,9,9,9,9,,9,9,206,,,,,9,,,206,206,206,206,206,206,,206,206,,436',
',,,206,,,,,,,9,436,436,436,436,436,,436,436,,436,436,436,436,,,,206',
',,,,,,,,,,,436,,,,436,436,,213,436,436,436,436,436,436,,436,436,,,213',
'213,213,436,213,,213,213,,213,213,213,213,,,,,,,,,,,,,,,436,213,,,,',
'213,,212,213,213,213,213,213,213,,213,213,,,212,212,212,213,212,211',
'212,212,,212,212,212,212,,,,,,211,211,,211,,211,211,,211,213,212,,,',
',,,,212,212,212,212,212,212,,212,212,211,,,,,212,,210,211,211,211,211',
'211,211,,211,211,,,,210,210,211,210,,210,210,,210,212,,,,,,,,,,,,,,',
',,211,210,,,,,194,,,210,210,210,210,210,210,,210,210,194,194,194,,194',
'210,194,194,,194,194,194,194,,,,,,,,,,,,,,,,194,210,,,194,194,,209,194',
'194,194,194,194,194,,194,194,,,,209,209,194,209,208,209,209,,209,,,',
',,,,,208,208,,208,,208,208,,208,194,209,,,,,207,,,209,209,209,209,209',
'209,,209,209,208,,207,,207,209,207,207,208,208,208,208,208,208,,208',
'208,,,,,,208,,,,,,207,209,,,,,,,207,207,207,207,207,207,,207,207,414',
'208,414,,,207,,,,,,,414,414,414,,414,,414,414,,414,414,414,414,,,,,207',
',,,,,,,,,,414,,,,414,414,,,414,414,414,414,414,414,,414,414,,438,438',
'438,438,414,438,438,438,,438,,438,438,,,,,,,438,438,438,,,,438,,,414',
',,,,,,,,438,438,,,,,,,,,,,,438,438,438,438,,438,438,438,311,311,311',
'311,,311,311,311,,311,,311,311,,,,,,,311,311,311,,,,311,,,,,,,,,,,,311',
'311,,,,,,,,,,,,311,311,311,311,,311,311,311,221,221,221,221,,221,221',
'221,,221,,221,221,,,,,,,221,221,221,,,,221,,,,,,,,,,,,221,221,,,,,,',
',,,,,221,221,221,221,,221,221,221,278,278,278,278,,278,278,278,,278',
',278,278,,,,,,,278,278,278,,,,278,,,,,,,,,,,,278,278,,,,,,,,,,,,278',
'278,278,278,,278,278,278,280,280,280,280,,280,280,280,,280,,280,280',
',,,,,,280,280,280,,,,280,,,,,,,,,,,,280,280,,,,,,,,,,,,280,280,280,280',
',280,280,280' ]
        racc_action_check = arr = ::Array.new(7157, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

racc_action_pointer = [
    -2,   345,   nil,   nil,   118,   330,   nil,   773,   318,  6375,
   418,   478,    69,   nil,   nil,   598,   658,   718,   778,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   247,   291,  1010,  1070,  1130,   135,    93,  1526,   nil,
   nil,   nil,   nil,   nil,  1396,  1456,  1542,   nil,   nil,   nil,
   nil,   nil,  1602,   nil,   222,   219,   nil,  1782,   nil,   nil,
   350,  1902,   270,  2022,  2082,  2142,  2202,  2262,  2322,  2382,
  2442,  2502,  2592,  2652,  2712,  2772,  2832,  2892,  2952,  3012,
  3072,  3132,  3192,  3252,  3312,  3372,  3432,  3492,  3552,  3612,
  3672,  3732,  3818,   230,   258,  4024,  4084,   257,   250,  4316,
   232,   nil,   nil,   nil,  4732,    29,  5024,  2590,   211,   nil,
   220,    60,  4934,  5753,   nil,  5696,  5639,   199,   172,   133,
   nil,    97,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   100,
   nil,    90,   nil,    16,   nil,   nil,   212,   nil,   134,   nil,
   nil,   188,  4642,    55,  5800,  4462,   nil,   224,   nil,   nil,
   nil,   nil,   248,   276,   277,   322,  6111,   333,  1842,     5,
     3,     2,   358,   298,    58,   nil,   nil,     9,   142,    -1,
    82,  3948,    -9,    -1,     4,    -2,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,  6653,    92,  5629,  2596,     2,  4174,
   868,  5770,  5980,  6027,  5864,  6276,  6392,  6745,  6717,  6700,
  6608,  6561,  6544,  6497,  6328,   nil,   nil,  1336,   230,   168,
   nil,  6951,  6259,   159,   nil,    62,     8,  6165,   nil,   311,
   nil,   120,   nil,   nil,  3964,   nil,   306,   nil,   nil,   nil,
   nil,   nil,   293,   263,   -24,   282,    -7,   nil,  4170,  4256,
  4376,   nil,   242,   211,  1200,   -28,  4522,   224,   218,   nil,
  5020,  5080,   nil,   nil,   nil,   nil,  5140,   nil,   nil,   nil,
   nil,   200,   nil,   nil,   nil,   nil,    81,   282,  7009,    69,
  7067,  1962,  5500,  5440,   nil,  5380,  5320,   140,   nil,   138,
   nil,   165,   nil,   174,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   179,
  5260,  6893,   202,   nil,   129,   nil,   203,   210,   nil,   152,
    80,  5200,   nil,   nil,  4848,  4788,   nil,   220,   173,   223,
   203,     9,  4728,   nil,    -1,   nil,  4582,   237,   nil,  4446,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   179,
   -62,   241,   nil,   nil,  5847,  5916,  5963,  6010,  6057,   258,
  3878,   202,   266,   nil,   nil,   267,  5560,   nil,   nil,   nil,
   257,   nil,   nil,   nil,  6212,    61,   164,   nil,  1722,    -7,
   260,   nil,   287,   288,   nil,   nil,  1662,   nil,  1276,   254,
   296,   nil,   nil,  1216,   nil,   nil,   nil,   300,   269,   nil,
   nil,   nil,   nil,   nil,   304,   nil,   nil,   nil,   nil,   950,
   nil,   864,   538,   316,  6802,   nil,   nil,   318,   nil,   nil,
   238,   nil,   323,   nil,   326,   nil,   330,   nil,   nil,   nil,
   178,   nil,   302,   nil,   nil,   nil,  6450,   nil,  6835,   138,
  4912,   nil ]

racc_action_default = [
    -3,  -250,    -1,    -2,    -4,    -5,    -8,   -10,   -16,   -21,
  -250,  -250,  -250,   -33,   -34,  -250,  -250,  -250,  -250,   -61,
   -62,   -63,   -64,   -65,   -66,   -67,   -68,   -69,   -70,   -71,
   -72,   -73,   -74,   -75,   -76,   -77,   -78,   -79,   -80,   -81,
   -82,   -87,   -91,  -250,  -250,  -250,  -250,  -250,  -250,  -180,
  -181,  -182,  -183,  -184,  -250,  -250,  -250,  -195,  -196,  -197,
  -198,  -199,  -250,  -201,  -250,  -214,  -217,  -250,  -222,  -223,
  -250,  -250,    -7,  -250,  -250,  -250,  -250,  -250,  -250,  -250,
  -250,  -127,  -250,  -250,  -250,  -250,  -250,  -250,  -250,  -250,
  -250,  -250,  -250,  -250,  -250,  -250,  -250,  -250,  -250,  -250,
  -250,  -250,  -250,  -250,  -122,  -249,  -249,   -22,   -23,  -250,
  -249,  -142,  -163,  -164,   -46,  -250,   -47,   -54,  -250,   -88,
  -250,  -250,  -250,  -250,   -98,  -250,  -250,  -249,  -249,  -224,
  -151,  -153,  -154,  -155,  -156,  -157,  -159,  -160,   -14,  -224,
  -186,  -224,  -188,  -250,  -191,  -192,  -250,  -200,  -250,  -205,
  -208,  -250,  -212,  -250,  -250,  -250,   442,    -6,    -9,   -11,
   -12,   -13,   -17,   -18,   -19,   -20,  -250,  -224,  -250,   -80,
   -81,   -82,  -235,  -241,  -229,  -128,  -131,  -250,  -232,  -246,
  -230,  -238,  -181,  -182,  -183,  -184,  -228,  -233,  -234,  -236,
  -237,  -239,  -247,  -248,   -59,  -250,   -36,   -37,   -38,   -39,
   -40,   -41,   -42,   -43,   -44,   -45,   -48,   -49,   -50,   -51,
   -52,   -53,   -55,   -56,  -250,   -57,  -116,  -250,  -224,   -84,
   -92,  -127,  -126,  -250,  -125,  -250,  -226,  -250,   -28,  -249,
  -165,  -250,   -58,   -93,  -250,   -96,  -224,  -168,  -170,  -171,
  -172,  -173,  -175,  -250,  -250,  -178,  -250,   -90,  -250,  -250,
  -250,  -249,  -250,  -249,  -225,  -250,  -225,  -250,  -250,  -189,
  -250,  -250,  -202,  -203,  -204,  -206,  -250,  -209,  -210,  -211,
  -213,  -224,  -215,  -218,  -220,  -221,    -8,  -250,  -127,  -250,
  -225,  -250,  -250,  -250,   -35,  -250,  -250,  -224,  -118,  -250,
   -86,  -224,  -130,  -250,  -229,  -230,  -231,  -232,  -235,  -238,
  -240,  -241,  -242,  -243,  -244,  -245,  -246,  -123,  -124,  -250,
  -227,  -127,  -250,  -145,  -250,  -166,  -224,  -250,   -95,  -250,
  -225,  -250,  -176,  -177,  -250,  -250,   -89,  -250,  -101,  -250,
  -107,  -250,  -250,  -111,  -250,  -136,  -249,  -250,  -161,  -250,
  -152,  -158,   -15,  -185,  -187,  -190,  -193,  -194,  -207,  -250,
  -250,  -224,   -26,  -129,  -134,  -132,  -133,   -60,  -120,  -250,
  -225,   -83,  -250,   -25,   -29,  -224,  -249,  -146,  -147,  -148,
  -250,   -94,   -97,  -169,  -174,  -250,  -101,  -100,  -250,  -250,
  -107,  -106,  -250,  -250,  -110,  -112,  -249,  -137,  -250,  -250,
  -250,  -143,  -144,  -250,  -162,  -216,  -219,  -250,   -30,  -117,
  -119,   -85,  -121,   -27,  -250,  -167,  -179,   -99,  -102,  -250,
  -105,  -250,  -249,  -250,  -250,  -139,  -140,  -250,  -150,   -24,
   -31,  -141,  -250,  -104,  -250,  -109,  -250,  -114,  -115,  -135,
  -250,  -149,  -226,  -103,  -108,  -113,  -250,   -32,  -127,  -250,
  -250,  -138 ]

racc_goto_table = [
   114,   116,   117,   167,   119,   226,   127,   128,     2,   134,
   245,   132,   195,   216,   309,   147,   224,   224,   273,   353,
   340,   236,   333,   253,   387,    72,   229,   287,   123,   125,
   126,   107,   108,   257,   332,   258,   223,   225,   408,   215,
   233,   334,   245,   251,   252,   139,   141,   381,   397,   426,
   415,   118,   154,   271,   377,   312,   367,   337,   364,   341,
   373,   279,   323,   322,   346,   267,   166,   194,   196,   197,
   198,   199,   200,   201,   202,   203,   204,   205,   206,   207,
   208,   209,   210,   211,   212,   213,   214,   138,   138,   146,
   222,   222,   157,   218,   227,   149,   390,   410,   162,   163,
   164,   165,   407,   268,   385,   394,   158,   159,   160,   161,
     3,   265,   289,   246,   266,   264,   150,   152,   269,     1,
   245,   nil,   nil,   nil,   nil,   nil,   404,   nil,   nil,   288,
   319,   316,   nil,   nil,   nil,   138,   nil,   nil,   127,   128,
   313,   nil,   134,   291,   132,   nil,   413,   nil,   nil,   nil,
   nil,   nil,   nil,   116,   nil,   138,   nil,   123,   125,   126,
   270,   nil,   335,   277,   338,   349,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   353,
   nil,   359,   290,   nil,   nil,   362,   nil,   nil,   276,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   351,   nil,   214,   nil,   nil,   nil,   nil,   nil,   nil,   245,
   370,   nil,   nil,   nil,   396,   134,   nil,   132,   nil,   348,
   437,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   365,   nil,   194,   nil,   nil,   nil,   nil,
   nil,   nil,   317,   nil,   nil,   398,   nil,   392,   nil,   nil,
   nil,   nil,   nil,   nil,   375,   nil,   327,   329,   nil,   403,
   nil,   nil,   nil,   nil,   nil,   nil,   354,   355,   356,   nil,
   357,   358,   400,   nil,   368,   nil,   nil,   392,   245,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   342,
   nil,   nil,   nil,   146,   347,   227,   nil,   392,   nil,   149,
   134,   nil,   132,   nil,   nil,   nil,   374,   nil,   nil,   194,
   nil,   nil,   nil,   nil,   nil,   nil,   432,   194,   nil,   nil,
   nil,   nil,   nil,   427,   401,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   214,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   342,   nil,
   439,   nil,   nil,   123,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   414,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   417,   nil,   nil,   nil,   227,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   436,   nil,   422,   nil,   424,
   428 ]

racc_goto_check = [
    10,    10,    10,    11,    38,    13,    58,    58,     2,    35,
    37,    36,    19,    51,    14,    83,    50,    50,    91,    55,
    69,    43,    48,    15,    62,     5,    59,    52,    10,    10,
    10,     9,     9,    15,    47,    15,    54,    54,    44,    20,
    42,    60,    37,    59,    59,     8,     8,    46,    12,    49,
    63,     6,    10,    43,    45,    65,    66,    68,    16,    71,
    72,    15,    73,    74,    78,    79,    10,    10,    10,    10,
    10,    10,    10,    10,    10,    10,    10,    10,    10,    10,
    10,    10,    10,    10,    10,    10,    10,     6,     6,     6,
    10,    10,     5,     8,    10,     6,    61,    46,     9,     9,
     9,     9,    45,    80,    48,    69,     6,     6,     6,     6,
     3,    84,    15,     8,    85,    87,    88,    89,    90,     1,
    37,   nil,   nil,   nil,   nil,   nil,    61,   nil,   nil,    51,
    15,    43,   nil,   nil,   nil,     6,   nil,   nil,    58,    58,
    50,   nil,    35,    11,    36,   nil,    61,   nil,   nil,   nil,
   nil,   nil,   nil,    10,   nil,     6,   nil,    10,    10,    10,
     2,   nil,    50,     2,    50,    15,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    55,
   nil,    15,    38,   nil,   nil,    15,   nil,   nil,     6,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
    11,   nil,    10,   nil,   nil,   nil,   nil,   nil,   nil,    37,
    15,   nil,   nil,   nil,    91,    35,   nil,    36,   nil,    83,
    14,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,    11,   nil,    10,   nil,   nil,   nil,   nil,
   nil,   nil,     2,   nil,   nil,    15,   nil,    50,   nil,   nil,
   nil,   nil,   nil,   nil,    19,   nil,     2,     2,   nil,    15,
   nil,   nil,   nil,   nil,   nil,   nil,    10,    10,    10,   nil,
    10,    10,    51,   nil,    58,   nil,   nil,    50,    37,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,     6,
   nil,   nil,   nil,     6,     6,    10,   nil,    50,   nil,     6,
    35,   nil,    36,   nil,   nil,   nil,    10,   nil,   nil,    10,
   nil,   nil,   nil,   nil,   nil,   nil,    13,    10,   nil,   nil,
   nil,   nil,   nil,    50,    38,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,    10,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,     6,   nil,
    11,   nil,   nil,    10,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,    10,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,     2,   nil,   nil,   nil,    10,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,    10,   nil,     2,   nil,     2,
     2 ]

racc_goto_pointer = [
   nil,   119,     8,   110,   nil,    21,    33,   nil,    -9,    21,
   -15,   -78,  -303,  -104,  -212,  -106,  -252,   nil,   nil,   -70,
   -62,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   -39,   -37,  -111,   -37,   nil,
   nil,   nil,   -80,  -100,  -340,  -274,  -283,  -216,  -228,  -363,
   -89,   -88,  -190,   nil,   -69,  -261,   nil,   nil,   -40,   -84,
  -210,  -240,  -310,  -339,   nil,  -174,  -258,   nil,  -196,  -234,
   nil,  -196,  -260,  -182,  -180,   nil,   nil,   nil,  -196,   -86,
   -48,   nil,   nil,   -47,   -37,   -34,   nil,   -33,    52,    52,
   -34,  -136 ]

racc_goto_default = [
   nil,   nil,   391,   nil,     4,     5,     6,     7,   nil,     8,
     9,   nil,   nil,   nil,   nil,   nil,   228,    13,    14,   331,
   nil,    19,    20,    21,    22,    23,    24,    25,    26,    27,
    28,    29,    30,    31,    32,    33,    34,    35,   nil,    41,
    42,   120,   nil,   nil,   124,   nil,   nil,   nil,   nil,   nil,
   230,   nil,   nil,   104,   nil,   175,   177,   176,   111,   nil,
   nil,   nil,   nil,   239,   110,   nil,   nil,   129,   nil,   130,
   131,   135,   237,   238,   240,   241,   244,   143,   145,    57,
    58,    59,    62,   nil,   nil,   nil,   148,   nil,   nil,   nil,
   nil,   nil ]

racc_reduce_table = [
  0, 0, :racc_error,
  1, 95, :_reduce_1,
  1, 95, :_reduce_2,
  0, 95, :_reduce_3,
  1, 96, :_reduce_4,
  1, 98, :_reduce_5,
  3, 98, :_reduce_6,
  2, 98, :_reduce_7,
  1, 99, :_reduce_8,
  3, 99, :_reduce_9,
  1, 100, :_reduce_none,
  3, 100, :_reduce_11,
  3, 100, :_reduce_12,
  3, 100, :_reduce_13,
  1, 102, :_reduce_14,
  3, 102, :_reduce_15,
  1, 101, :_reduce_none,
  3, 101, :_reduce_17,
  3, 101, :_reduce_18,
  3, 101, :_reduce_19,
  3, 101, :_reduce_20,
  1, 103, :_reduce_none,
  2, 103, :_reduce_22,
  2, 103, :_reduce_23,
  7, 103, :_reduce_24,
  5, 103, :_reduce_25,
  5, 103, :_reduce_26,
  4, 110, :_reduce_27,
  1, 107, :_reduce_28,
  3, 107, :_reduce_29,
  1, 106, :_reduce_30,
  2, 106, :_reduce_31,
  4, 106, :_reduce_32,
  1, 104, :_reduce_none,
  1, 104, :_reduce_none,
  4, 104, :_reduce_35,
  3, 104, :_reduce_36,
  3, 104, :_reduce_37,
  3, 104, :_reduce_38,
  3, 104, :_reduce_39,
  3, 104, :_reduce_40,
  3, 104, :_reduce_41,
  3, 104, :_reduce_42,
  3, 104, :_reduce_43,
  3, 104, :_reduce_44,
  3, 104, :_reduce_45,
  2, 104, :_reduce_46,
  2, 104, :_reduce_47,
  3, 104, :_reduce_48,
  3, 104, :_reduce_49,
  3, 104, :_reduce_50,
  3, 104, :_reduce_51,
  3, 104, :_reduce_52,
  3, 104, :_reduce_53,
  2, 104, :_reduce_54,
  3, 104, :_reduce_55,
  3, 104, :_reduce_56,
  3, 104, :_reduce_57,
  3, 104, :_reduce_58,
  1, 113, :_reduce_59,
  3, 113, :_reduce_60,
  1, 111, :_reduce_none,
  1, 111, :_reduce_none,
  1, 111, :_reduce_none,
  1, 111, :_reduce_none,
  1, 111, :_reduce_none,
  1, 111, :_reduce_none,
  1, 111, :_reduce_none,
  1, 111, :_reduce_none,
  1, 111, :_reduce_none,
  1, 111, :_reduce_none,
  1, 111, :_reduce_none,
  1, 111, :_reduce_none,
  1, 111, :_reduce_none,
  1, 111, :_reduce_none,
  1, 111, :_reduce_none,
  1, 111, :_reduce_none,
  1, 111, :_reduce_none,
  1, 111, :_reduce_78,
  1, 111, :_reduce_79,
  1, 111, :_reduce_80,
  1, 111, :_reduce_81,
  1, 111, :_reduce_82,
  5, 112, :_reduce_83,
  3, 112, :_reduce_84,
  6, 112, :_reduce_85,
  4, 112, :_reduce_86,
  1, 116, :_reduce_87,
  2, 116, :_reduce_88,
  4, 133, :_reduce_89,
  3, 133, :_reduce_90,
  1, 133, :_reduce_91,
  3, 134, :_reduce_92,
  2, 132, :_reduce_93,
  3, 136, :_reduce_94,
  2, 136, :_reduce_95,
  2, 135, :_reduce_96,
  4, 135, :_reduce_97,
  2, 119, :_reduce_98,
  5, 138, :_reduce_99,
  4, 138, :_reduce_100,
  0, 139, :_reduce_none,
  2, 139, :_reduce_102,
  4, 139, :_reduce_103,
  3, 139, :_reduce_104,
  6, 120, :_reduce_105,
  5, 120, :_reduce_106,
  0, 140, :_reduce_none,
  4, 140, :_reduce_108,
  3, 140, :_reduce_109,
  5, 118, :_reduce_110,
  1, 141, :_reduce_111,
  2, 141, :_reduce_112,
  5, 142, :_reduce_113,
  1, 143, :_reduce_none,
  1, 143, :_reduce_none,
  1, 114, :_reduce_none,
  4, 114, :_reduce_117,
  1, 146, :_reduce_118,
  3, 146, :_reduce_119,
  3, 145, :_reduce_120,
  6, 117, :_reduce_121,
  2, 117, :_reduce_122,
  3, 147, :_reduce_123,
  3, 147, :_reduce_124,
  1, 148, :_reduce_none,
  1, 148, :_reduce_none,
  0, 105, :_reduce_127,
  1, 105, :_reduce_128,
  3, 105, :_reduce_129,
  1, 150, :_reduce_none,
  1, 150, :_reduce_none,
  3, 149, :_reduce_132,
  3, 149, :_reduce_133,
  3, 149, :_reduce_134,
  7, 121, :_reduce_135,
  1, 154, :_reduce_136,
  2, 154, :_reduce_137,
  7, 156, :_reduce_138,
  2, 156, :_reduce_139,
  6, 122, :_reduce_140,
  7, 123, :_reduce_141,
  1, 158, :_reduce_142,
  1, 155, :_reduce_none,
  1, 155, :_reduce_none,
  1, 159, :_reduce_none,
  2, 159, :_reduce_146,
  1, 160, :_reduce_none,
  1, 160, :_reduce_none,
  7, 124, :_reduce_149,
  6, 124, :_reduce_150,
  1, 161, :_reduce_151,
  3, 161, :_reduce_152,
  1, 163, :_reduce_none,
  1, 163, :_reduce_none,
  1, 163, :_reduce_155,
  1, 163, :_reduce_none,
  1, 164, :_reduce_157,
  3, 164, :_reduce_158,
  1, 165, :_reduce_none,
  1, 165, :_reduce_none,
  1, 162, :_reduce_none,
  2, 162, :_reduce_162,
  1, 152, :_reduce_none,
  1, 152, :_reduce_164,
  1, 153, :_reduce_165,
  2, 153, :_reduce_166,
  4, 153, :_reduce_167,
  1, 137, :_reduce_168,
  3, 137, :_reduce_169,
  1, 166, :_reduce_none,
  1, 166, :_reduce_none,
  1, 167, :_reduce_none,
  1, 167, :_reduce_none,
  3, 168, :_reduce_174,
  1, 168, :_reduce_175,
  2, 169, :_reduce_176,
  2, 157, :_reduce_177,
  1, 170, :_reduce_178,
  4, 170, :_reduce_179,
  1, 115, :_reduce_180,
  1, 126, :_reduce_181,
  1, 126, :_reduce_182,
  1, 126, :_reduce_183,
  1, 126, :_reduce_184,
  4, 127, :_reduce_185,
  2, 127, :_reduce_186,
  4, 127, :_reduce_187,
  2, 127, :_reduce_188,
  3, 128, :_reduce_189,
  4, 128, :_reduce_190,
  2, 128, :_reduce_191,
  1, 171, :_reduce_192,
  3, 171, :_reduce_193,
  3, 172, :_reduce_194,
  1, 130, :_reduce_none,
  1, 130, :_reduce_none,
  1, 130, :_reduce_none,
  1, 173, :_reduce_198,
  1, 173, :_reduce_199,
  2, 174, :_reduce_200,
  1, 176, :_reduce_201,
  1, 178, :_reduce_202,
  1, 179, :_reduce_203,
  2, 177, :_reduce_204,
  1, 180, :_reduce_205,
  1, 181, :_reduce_206,
  2, 181, :_reduce_207,
  2, 175, :_reduce_208,
  2, 182, :_reduce_209,
  2, 182, :_reduce_210,
  3, 97, :_reduce_211,
  0, 184, :_reduce_none,
  1, 184, :_reduce_none,
  0, 183, :_reduce_214,
  2, 183, :_reduce_215,
  4, 183, :_reduce_216,
  1, 125, :_reduce_217,
  3, 125, :_reduce_218,
  5, 125, :_reduce_219,
  1, 185, :_reduce_none,
  1, 185, :_reduce_none,
  1, 131, :_reduce_222,
  1, 129, :_reduce_223,
  0, 109, :_reduce_none,
  1, 109, :_reduce_225,
  0, 108, :_reduce_none,
  1, 108, :_reduce_none,
  1, 151, :_reduce_none,
  1, 151, :_reduce_none,
  1, 151, :_reduce_none,
  1, 151, :_reduce_none,
  1, 151, :_reduce_none,
  1, 151, :_reduce_none,
  1, 151, :_reduce_none,
  1, 151, :_reduce_none,
  1, 151, :_reduce_none,
  1, 151, :_reduce_none,
  1, 151, :_reduce_none,
  1, 151, :_reduce_none,
  1, 151, :_reduce_none,
  1, 151, :_reduce_none,
  1, 151, :_reduce_none,
  1, 151, :_reduce_none,
  1, 151, :_reduce_none,
  1, 151, :_reduce_none,
  1, 151, :_reduce_none,
  1, 151, :_reduce_none,
  1, 151, :_reduce_none,
  0, 144, :_reduce_249 ]

racc_reduce_n = 250

racc_shift_n = 442

racc_token_table = {
  false => 0,
  :error => 1,
  :STRING => 2,
  :DQPRE => 3,
  :DQMID => 4,
  :DQPOST => 5,
  :WORD => 6,
  :LBRACK => 7,
  :RBRACK => 8,
  :LBRACE => 9,
  :RBRACE => 10,
  :SYMBOL => 11,
  :FARROW => 12,
  :COMMA => 13,
  :TRUE => 14,
  :FALSE => 15,
  :EQUALS => 16,
  :APPENDS => 17,
  :DELETES => 18,
  :LESSEQUAL => 19,
  :NOTEQUAL => 20,
  :DOT => 21,
  :COLON => 22,
  :LLCOLLECT => 23,
  :RRCOLLECT => 24,
  :QMARK => 25,
  :LPAREN => 26,
  :RPAREN => 27,
  :ISEQUAL => 28,
  :GREATEREQUAL => 29,
  :GREATERTHAN => 30,
  :LESSTHAN => 31,
  :IF => 32,
  :ELSE => 33,
  :DEFINE => 34,
  :ELSIF => 35,
  :VARIABLE => 36,
  :CLASS => 37,
  :INHERITS => 38,
  :NODE => 39,
  :BOOLEAN => 40,
  :NAME => 41,
  :SEMIC => 42,
  :CASE => 43,
  :DEFAULT => 44,
  :AT => 45,
  :ATAT => 46,
  :LCOLLECT => 47,
  :RCOLLECT => 48,
  :CLASSREF => 49,
  :NOT => 50,
  :OR => 51,
  :AND => 52,
  :UNDEF => 53,
  :PARROW => 54,
  :PLUS => 55,
  :MINUS => 56,
  :TIMES => 57,
  :DIV => 58,
  :LSHIFT => 59,
  :RSHIFT => 60,
  :UMINUS => 61,
  :MATCH => 62,
  :NOMATCH => 63,
  :REGEX => 64,
  :IN_EDGE => 65,
  :OUT_EDGE => 66,
  :IN_EDGE_SUB => 67,
  :OUT_EDGE_SUB => 68,
  :IN => 69,
  :UNLESS => 70,
  :PIPE => 71,
  :LAMBDA => 72,
  :SELBRACE => 73,
  :NUMBER => 74,
  :HEREDOC => 75,
  :SUBLOCATE => 76,
  :RENDER_STRING => 77,
  :RENDER_EXPR => 78,
  :EPP_START => 79,
  :EPP_END => 80,
  :EPP_END_TRIM => 81,
  :FUNCTION => 82,
  :PRIVATE => 83,
  :ATTR => 84,
  :TYPE => 85,
  :LOW => 86,
  :APPLICATION => 87,
  :PRODUCES => 88,
  :CONSUMES => 89,
  :HIGH => 90,
  :LISTSTART => 91,
  :SPLAT => 92,
  :MODULO => 93 }

racc_nt_base = 94

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "STRING",
  "DQPRE",
  "DQMID",
  "DQPOST",
  "WORD",
  "LBRACK",
  "RBRACK",
  "LBRACE",
  "RBRACE",
  "SYMBOL",
  "FARROW",
  "COMMA",
  "TRUE",
  "FALSE",
  "EQUALS",
  "APPENDS",
  "DELETES",
  "LESSEQUAL",
  "NOTEQUAL",
  "DOT",
  "COLON",
  "LLCOLLECT",
  "RRCOLLECT",
  "QMARK",
  "LPAREN",
  "RPAREN",
  "ISEQUAL",
  "GREATEREQUAL",
  "GREATERTHAN",
  "LESSTHAN",
  "IF",
  "ELSE",
  "DEFINE",
  "ELSIF",
  "VARIABLE",
  "CLASS",
  "INHERITS",
  "NODE",
  "BOOLEAN",
  "NAME",
  "SEMIC",
  "CASE",
  "DEFAULT",
  "AT",
  "ATAT",
  "LCOLLECT",
  "RCOLLECT",
  "CLASSREF",
  "NOT",
  "OR",
  "AND",
  "UNDEF",
  "PARROW",
  "PLUS",
  "MINUS",
  "TIMES",
  "DIV",
  "LSHIFT",
  "RSHIFT",
  "UMINUS",
  "MATCH",
  "NOMATCH",
  "REGEX",
  "IN_EDGE",
  "OUT_EDGE",
  "IN_EDGE_SUB",
  "OUT_EDGE_SUB",
  "IN",
  "UNLESS",
  "PIPE",
  "LAMBDA",
  "SELBRACE",
  "NUMBER",
  "HEREDOC",
  "SUBLOCATE",
  "RENDER_STRING",
  "RENDER_EXPR",
  "EPP_START",
  "EPP_END",
  "EPP_END_TRIM",
  "FUNCTION",
  "PRIVATE",
  "ATTR",
  "TYPE",
  "LOW",
  "APPLICATION",
  "PRODUCES",
  "CONSUMES",
  "HIGH",
  "LISTSTART",
  "SPLAT",
  "MODULO",
  "$start",
  "program",
  "statements",
  "epp_expression",
  "syntactic_statements",
  "syntactic_statement",
  "assignment",
  "relationship",
  "assignments",
  "resource",
  "expression",
  "attribute_operations",
  "additional_resource_bodies",
  "resource_bodies",
  "endsemi",
  "endcomma",
  "resource_body",
  "primary_expression",
  "call_function_expression",
  "expressions",
  "selector_entries",
  "variable",
  "call_method_with_lambda_expression",
  "collection_expression",
  "case_expression",
  "if_expression",
  "unless_expression",
  "definition_expression",
  "application_expression",
  "hostclass_expression",
  "node_definition_expression",
  "epp_render_expression",
  "reserved_word",
  "array",
  "hash",
  "regex",
  "quotedtext",
  "type",
  "lambda",
  "call_method_expression",
  "named_access",
  "lambda_parameter_list",
  "lambda_rest",
  "parameters",
  "if_part",
  "else",
  "unless_else",
  "case_options",
  "case_option",
  "options_statements",
  "nil",
  "selector_entry",
  "selector_entry_list",
  "collect_query",
  "optional_query",
  "attribute_operation",
  "attribute_name",
  "keyword",
  "classname",
  "parameter_list",
  "capabilities",
  "opt_statements",
  "capability",
  "typed_parameter",
  "stacked_classname",
  "classparent",
  "classnameordefault",
  "hostnames",
  "nodeparent",
  "hostname",
  "dotted_name",
  "name_or_number",
  "parameter",
  "untyped_parameter",
  "regular_parameter",
  "splat_parameter",
  "parameter_type",
  "hashpairs",
  "hashpair",
  "string",
  "dq_string",
  "heredoc",
  "dqpre",
  "dqrval",
  "dqpost",
  "dqmid",
  "text_expression",
  "dqtail",
  "sublocated_text",
  "epp_parameters_list",
  "optional_statements",
  "epp_end" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

module_eval(<<'.,.,', 'egrammar.ra', 66)
  def _reduce_1(val, _values, result)
     result = create_program(Factory.block_or_expression(*val[0])) 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 67)
  def _reduce_2(val, _values, result)
     result = create_program(Factory.block_or_expression(*val[0])) 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 68)
  def _reduce_3(val, _values, result)
     result = create_empty_program() 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 72)
  def _reduce_4(val, _values, result)
     result = transform_calls(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 79)
  def _reduce_5(val, _values, result)
     result = [val[0]]
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 80)
  def _reduce_6(val, _values, result)
     result = val[0].push val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 81)
  def _reduce_7(val, _values, result)
     result = val[0].push val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 88)
  def _reduce_8(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 89)
  def _reduce_9(val, _values, result)
     result = aryfy(val[0]).push(val[1]).push(val[2]) 
    result
  end
.,.,

# reduce 10 omitted

module_eval(<<'.,.,', 'egrammar.ra', 94)
  def _reduce_11(val, _values, result)
     result = val[0].set(val[2])      ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 95)
  def _reduce_12(val, _values, result)
     result = val[0].plus_set(val[2]) ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 96)
  def _reduce_13(val, _values, result)
     result = val[0].minus_set(val[2]); loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 99)
  def _reduce_14(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 100)
  def _reduce_15(val, _values, result)
     result = val[0].push(val[2]) 
    result
  end
.,.,

# reduce 16 omitted

module_eval(<<'.,.,', 'egrammar.ra', 104)
  def _reduce_17(val, _values, result)
     result = val[0].relop(val[1][:value], val[2]); loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 105)
  def _reduce_18(val, _values, result)
     result = val[0].relop(val[1][:value], val[2]); loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 106)
  def _reduce_19(val, _values, result)
     result = val[0].relop(val[1][:value], val[2]); loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 107)
  def _reduce_20(val, _values, result)
     result = val[0].relop(val[1][:value], val[2]); loc result, val[1] 
    result
  end
.,.,

# reduce 21 omitted

module_eval(<<'.,.,', 'egrammar.ra', 116)
  def _reduce_22(val, _values, result)
          result = val[1]
      unless Factory.set_resource_form(result, :virtual)
        # This is equivalent to a syntax error - additional semantic restrictions apply
        error val[0], "Virtual (@) can only be applied to a Resource Expression"
      end
      # relocate the result
      loc result, val[0], val[1]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 127)
  def _reduce_23(val, _values, result)
          result = val[1]
      unless Factory.set_resource_form(result, :exported)
        # This is equivalent to a syntax error - additional semantic restrictions apply
        error val[0], "Exported (@@) can only be applied to a Resource Expression"
      end
      # relocate the result
      loc result, val[0], val[1]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 138)
  def _reduce_24(val, _values, result)
          bodies = [Factory.RESOURCE_BODY(val[2], val[4])] + val[5]
      result = Factory.RESOURCE(val[0], bodies)
      loc result, val[0], val[6]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 145)
  def _reduce_25(val, _values, result)
            result = Factory.RESOURCE(Factory.fqn(token_text(val[0])), val[2])
        loc result, val[0], val[4]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 154)
  def _reduce_26(val, _values, result)
           result = case Factory.resource_shape(val[0])
       when :resource, :class
        # This catches deprecated syntax.
        # If the attribute operations does not include +>, then the found expression
        # is actually a LEFT followed by LITERAL_HASH
        #
        unless tmp = transform_resource_wo_title(val[0], val[2])
          error val[1], "Syntax error resource body without title or hash with +>"
        end
        tmp
      when :defaults
        Factory.RESOURCE_DEFAULTS(val[0], val[2])
      when :override
        # This was only done for override in original - TODO should it be here at all
        Factory.RESOURCE_OVERRIDE(val[0], val[2])
      else
        error val[0], "Expression is not valid as a resource, resource-default, or resource-override"
      end
     loc result, val[0], val[4]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 176)
  def _reduce_27(val, _values, result)
     result = Factory.RESOURCE_BODY(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 179)
  def _reduce_28(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 180)
  def _reduce_29(val, _values, result)
     result = val[0].push val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 186)
  def _reduce_30(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 187)
  def _reduce_31(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 188)
  def _reduce_32(val, _values, result)
     result = val[2] 
    result
  end
.,.,

# reduce 33 omitted

# reduce 34 omitted

module_eval(<<'.,.,', 'egrammar.ra', 195)
  def _reduce_35(val, _values, result)
     result = val[0][*val[2]]         ; loc result, val[0], val[3] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 196)
  def _reduce_36(val, _values, result)
     result = val[0].in val[2]        ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 197)
  def _reduce_37(val, _values, result)
     result = val[0] =~  val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 198)
  def _reduce_38(val, _values, result)
     result = val[0].mne val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 199)
  def _reduce_39(val, _values, result)
     result = val[0] +   val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 200)
  def _reduce_40(val, _values, result)
     result = val[0] -   val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 201)
  def _reduce_41(val, _values, result)
     result = val[0] /   val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 202)
  def _reduce_42(val, _values, result)
     result = val[0] *   val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 203)
  def _reduce_43(val, _values, result)
     result = val[0] %   val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 204)
  def _reduce_44(val, _values, result)
     result = val[0] <<  val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 205)
  def _reduce_45(val, _values, result)
     result = val[0] >>  val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 206)
  def _reduce_46(val, _values, result)
     result = val[1].minus()          ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 207)
  def _reduce_47(val, _values, result)
     result = val[1].unfold()         ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 208)
  def _reduce_48(val, _values, result)
     result = val[0].ne  val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 209)
  def _reduce_49(val, _values, result)
     result = val[0] ==  val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 210)
  def _reduce_50(val, _values, result)
     result = val[0] >   val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 211)
  def _reduce_51(val, _values, result)
     result = val[0] >=  val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 212)
  def _reduce_52(val, _values, result)
     result = val[0] <   val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 213)
  def _reduce_53(val, _values, result)
     result = val[0] <=  val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 214)
  def _reduce_54(val, _values, result)
     result = val[1].not              ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 215)
  def _reduce_55(val, _values, result)
     result = val[0].and val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 216)
  def _reduce_56(val, _values, result)
     result = val[0].or  val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 217)
  def _reduce_57(val, _values, result)
     result = val[0].select(*val[2])  ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 218)
  def _reduce_58(val, _values, result)
     result = val[1].paren()          ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 228)
  def _reduce_59(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 229)
  def _reduce_60(val, _values, result)
     result = val[0].push(val[2]) 
    result
  end
.,.,

# reduce 61 omitted

# reduce 62 omitted

# reduce 63 omitted

# reduce 64 omitted

# reduce 65 omitted

# reduce 66 omitted

# reduce 67 omitted

# reduce 68 omitted

# reduce 69 omitted

# reduce 70 omitted

# reduce 71 omitted

# reduce 72 omitted

# reduce 73 omitted

# reduce 74 omitted

# reduce 75 omitted

# reduce 76 omitted

# reduce 77 omitted

module_eval(<<'.,.,', 'egrammar.ra', 251)
  def _reduce_78(val, _values, result)
     result = Factory.NUMBER(val[0][:value])          ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 252)
  def _reduce_79(val, _values, result)
     result = Factory.literal(val[0][:value])         ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 253)
  def _reduce_80(val, _values, result)
     result = Factory.literal(:default)               ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 254)
  def _reduce_81(val, _values, result)
     result = Factory.literal(:undef)                 ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 255)
  def _reduce_82(val, _values, result)
     result = Factory.QNAME_OR_NUMBER(val[0][:value]) ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 264)
  def _reduce_83(val, _values, result)
          result = Factory.CALL_NAMED(val[0], true, val[2])
      loc result, val[0], val[4]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 268)
  def _reduce_84(val, _values, result)
          result = Factory.CALL_NAMED(val[0], true, [])
      loc result, val[0], val[2]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 272)
  def _reduce_85(val, _values, result)
          result = Factory.CALL_NAMED(val[0], true, val[2])
      loc result, val[0], val[4]
      result.lambda = val[5]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 277)
  def _reduce_86(val, _values, result)
          result = Factory.CALL_NAMED(val[0], true, [])
      loc result, val[0], val[2]
      result.lambda = val[3]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 285)
  def _reduce_87(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 286)
  def _reduce_88(val, _values, result)
     result = val[0]; val[0].lambda = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 289)
  def _reduce_89(val, _values, result)
     result = Factory.CALL_METHOD(val[0], val[2]); loc result, val[1], val[3] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 290)
  def _reduce_90(val, _values, result)
     result = Factory.CALL_METHOD(val[0], []); loc result, val[1], val[3] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 291)
  def _reduce_91(val, _values, result)
     result = Factory.CALL_METHOD(val[0], []); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 295)
  def _reduce_92(val, _values, result)
            result = val[0].dot(Factory.fqn(val[2][:value]))
        loc result, val[1], val[2]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 303)
  def _reduce_93(val, _values, result)
          result = Factory.LAMBDA(val[0][:value], val[1][:value])
      loc result, val[0][:start], val[1][:end]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 308)
  def _reduce_94(val, _values, result)
     result = {:end => val[2], :value =>val[1] } 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 309)
  def _reduce_95(val, _values, result)
     result = {:end => val[1], :value => nil } 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 313)
  def _reduce_96(val, _values, result)
     result = {:start => val[0], :value => [] } 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 314)
  def _reduce_97(val, _values, result)
     result = {:start => val[0], :value => val[1] } 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 322)
  def _reduce_98(val, _values, result)
          result = val[1]
      loc(result, val[0], val[1])
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 329)
  def _reduce_99(val, _values, result)
            result = Factory.IF(val[0], Factory.block_or_expression(*val[2]), val[4])
        loc(result, val[0], (val[4] ? val[4] : val[3]))
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 333)
  def _reduce_100(val, _values, result)
            result = Factory.IF(val[0], nil, val[3])
        loc(result, val[0], (val[3] ? val[3] : val[2]))
      
    result
  end
.,.,

# reduce 101 omitted

module_eval(<<'.,.,', 'egrammar.ra', 341)
  def _reduce_102(val, _values, result)
            result = val[1]
        loc(result, val[0], val[1])
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 345)
  def _reduce_103(val, _values, result)
            result = Factory.block_or_expression(*val[2])
        loc result, val[0], val[3]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 349)
  def _reduce_104(val, _values, result)
            result = nil # don't think a nop is needed here either
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 356)
  def _reduce_105(val, _values, result)
          result = Factory.UNLESS(val[1], Factory.block_or_expression(*val[3]), val[5])
      loc result, val[0], val[4]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 360)
  def _reduce_106(val, _values, result)
          result = Factory.UNLESS(val[1], nil, nil)
      loc result, val[0], val[4]
    
    result
  end
.,.,

# reduce 107 omitted

module_eval(<<'.,.,', 'egrammar.ra', 370)
  def _reduce_108(val, _values, result)
            result = Factory.block_or_expression(*val[2])
        loc result, val[0], val[3]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 374)
  def _reduce_109(val, _values, result)
            result = nil # don't think a nop is needed here either
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 381)
  def _reduce_110(val, _values, result)
          result = Factory.CASE(val[1], *val[3])
      loc result, val[0], val[4]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 387)
  def _reduce_111(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 388)
  def _reduce_112(val, _values, result)
     result = val[0].push val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 393)
  def _reduce_113(val, _values, result)
            result = Factory.WHEN(val[0], val[3]); loc result, val[1], val[4]
      
    result
  end
.,.,

# reduce 114 omitted

# reduce 115 omitted

# reduce 116 omitted

module_eval(<<'.,.,', 'egrammar.ra', 409)
  def _reduce_117(val, _values, result)
            result = val[1]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 414)
  def _reduce_118(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 415)
  def _reduce_119(val, _values, result)
     result = val[0].push val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 420)
  def _reduce_120(val, _values, result)
     result = Factory.MAP(val[0], val[2]) ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 430)
  def _reduce_121(val, _values, result)
          result = Factory.COLLECT(val[0], val[1], val[3])
      loc result, val[0], val[5]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 434)
  def _reduce_122(val, _values, result)
          result = Factory.COLLECT(val[0], val[1], [])
      loc result, val[0], val[1]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 439)
  def _reduce_123(val, _values, result)
     result = Factory.VIRTUAL_QUERY(val[1])   ; loc result, val[0], val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 440)
  def _reduce_124(val, _values, result)
     result = Factory.EXPORTED_QUERY(val[1])  ; loc result, val[0], val[2] 
    result
  end
.,.,

# reduce 125 omitted

# reduce 126 omitted

module_eval(<<'.,.,', 'egrammar.ra', 449)
  def _reduce_127(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 450)
  def _reduce_128(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 451)
  def _reduce_129(val, _values, result)
     result = val[0].push(val[2]) 
    result
  end
.,.,

# reduce 130 omitted

# reduce 131 omitted

module_eval(<<'.,.,', 'egrammar.ra', 467)
  def _reduce_132(val, _values, result)
            result = Factory.ATTRIBUTE_OP(val[0][:value], :'=>', val[2])
        loc result, val[0], val[2]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 471)
  def _reduce_133(val, _values, result)
            result = Factory.ATTRIBUTE_OP(val[0][:value], :'+>', val[2])
        loc result, val[0], val[2]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 475)
  def _reduce_134(val, _values, result)
          result = Factory.ATTRIBUTES_OP(val[2]) ; loc result, val[0], val[2]
   
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 484)
  def _reduce_135(val, _values, result)
          result = add_definition(Factory.DEFINITION(classname(val[1][:value]), val[2], val[3], val[5]))
      loc result, val[0], val[6]
      # New lexer does not keep track of this, this is done in validation
      if @lexer.respond_to?(:'indefine=')
        @lexer.indefine = false
      end
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 498)
  def _reduce_136(val, _values, result)
          result = { produces: [], consumes: [] }
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 501)
  def _reduce_137(val, _values, result)
          result = val[0]
      val[1].keys.each { |cap| result[cap] << val[1][cap] }
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 510)
  def _reduce_138(val, _values, result)
          body = [Factory.RESOURCE_BODY(val[3], val[5])]
      rsrc = Factory.RESOURCE(val[1], body)
      loc rsrc, val[0], val[6]
      result = { produces: rsrc }
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 518)
  def _reduce_139(val, _values, result)
        result = { consumes: val[1] }
  
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 524)
  def _reduce_140(val, _values, result)
        result = Factory.APPLICATION(classname(val[1][:value]), val[2], val[4])
    loc result, val[0], val[5]
  
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 534)
  def _reduce_141(val, _values, result)
          # Remove this class' name from the namestack as all nested classes have been parsed
      namepop
      result = add_definition(Factory.HOSTCLASS(classname(val[1][:value]), val[2], token_text(val[3]), val[5]))
      loc result, val[0], val[6]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 544)
  def _reduce_142(val, _values, result)
     namestack(val[0][:value]) ; result = val[0] 
    result
  end
.,.,

# reduce 143 omitted

# reduce 144 omitted

# reduce 145 omitted

module_eval(<<'.,.,', 'egrammar.ra', 553)
  def _reduce_146(val, _values, result)
     result = val[1] 
    result
  end
.,.,

# reduce 147 omitted

# reduce 148 omitted

module_eval(<<'.,.,', 'egrammar.ra', 570)
  def _reduce_149(val, _values, result)
          result = add_definition(Factory.NODE(val[1], val[3], val[5]))
      loc result, val[0], val[6]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 574)
  def _reduce_150(val, _values, result)
          result = add_definition(Factory.NODE(val[1], val[3], nil))
      loc result, val[0], val[5]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 584)
  def _reduce_151(val, _values, result)
     result = [result] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 585)
  def _reduce_152(val, _values, result)
     result = val[0].push(val[2]) 
    result
  end
.,.,

# reduce 153 omitted

# reduce 154 omitted

module_eval(<<'.,.,', 'egrammar.ra', 592)
  def _reduce_155(val, _values, result)
     result = Factory.literal(:default); loc result, val[0] 
    result
  end
.,.,

# reduce 156 omitted

module_eval(<<'.,.,', 'egrammar.ra', 596)
  def _reduce_157(val, _values, result)
     result = Factory.literal(val[0][:value]); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 597)
  def _reduce_158(val, _values, result)
     result = Factory.concat(val[0], '.', val[2][:value]); loc result, val[0], val[2] 
    result
  end
.,.,

# reduce 159 omitted

# reduce 160 omitted

# reduce 161 omitted

module_eval(<<'.,.,', 'egrammar.ra', 606)
  def _reduce_162(val, _values, result)
     result = val[1] 
    result
  end
.,.,

# reduce 163 omitted

module_eval(<<'.,.,', 'egrammar.ra', 623)
  def _reduce_164(val, _values, result)
     error val[0], "'class' is not a valid classname" 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 627)
  def _reduce_165(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 628)
  def _reduce_166(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 629)
  def _reduce_167(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 633)
  def _reduce_168(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 634)
  def _reduce_169(val, _values, result)
     result = val[0].push(val[2]) 
    result
  end
.,.,

# reduce 170 omitted

# reduce 171 omitted

# reduce 172 omitted

# reduce 173 omitted

module_eval(<<'.,.,', 'egrammar.ra', 646)
  def _reduce_174(val, _values, result)
     result = Factory.PARAM(val[0][:value], val[2]) ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 647)
  def _reduce_175(val, _values, result)
     result = Factory.PARAM(val[0][:value]); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 650)
  def _reduce_176(val, _values, result)
     result = val[1]; val[1].captures_rest() 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 653)
  def _reduce_177(val, _values, result)
     val[1].type_expr(val[0]) ; result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 656)
  def _reduce_178(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 657)
  def _reduce_179(val, _values, result)
     result = val[0][*val[2]] ; loc result, val[0], val[3] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 662)
  def _reduce_180(val, _values, result)
     result = Factory.fqn(val[0][:value]).var ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 667)
  def _reduce_181(val, _values, result)
     result = Factory.RESERVED(val[0][:value]) ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 668)
  def _reduce_182(val, _values, result)
     result = Factory.RESERVED(val[0][:value]) ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 669)
  def _reduce_183(val, _values, result)
     result = Factory.RESERVED(val[0][:value]) ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 670)
  def _reduce_184(val, _values, result)
     result = Factory.RESERVED(val[0][:value]) ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 676)
  def _reduce_185(val, _values, result)
     result = Factory.LIST(val[1]); loc result, val[0], val[3] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 677)
  def _reduce_186(val, _values, result)
     result = Factory.literal([]) ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 678)
  def _reduce_187(val, _values, result)
     result = Factory.LIST(val[1]); loc result, val[0], val[3] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 679)
  def _reduce_188(val, _values, result)
     result = Factory.literal([]) ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 682)
  def _reduce_189(val, _values, result)
     result = Factory.HASH(val[1]); loc result, val[0], val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 683)
  def _reduce_190(val, _values, result)
     result = Factory.HASH(val[1]); loc result, val[0], val[3] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 684)
  def _reduce_191(val, _values, result)
     result = Factory.literal({}) ; loc result, val[0], val[3] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 687)
  def _reduce_192(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 688)
  def _reduce_193(val, _values, result)
     result = val[0].push val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 691)
  def _reduce_194(val, _values, result)
     result = Factory.KEY_ENTRY(val[0], val[2]); loc result, val[1] 
    result
  end
.,.,

# reduce 195 omitted

# reduce 196 omitted

# reduce 197 omitted

module_eval(<<'.,.,', 'egrammar.ra', 699)
  def _reduce_198(val, _values, result)
     result = Factory.literal(val[0][:value]) ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 700)
  def _reduce_199(val, _values, result)
     result = Factory.literal(val[0][:value]) ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 702)
  def _reduce_200(val, _values, result)
     result = Factory.string(val[0], *val[1]) ; loc result, val[0], val[1][-1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 703)
  def _reduce_201(val, _values, result)
     result = Factory.literal(val[0][:value]); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 704)
  def _reduce_202(val, _values, result)
     result = Factory.literal(val[0][:value]); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 705)
  def _reduce_203(val, _values, result)
     result = Factory.literal(val[0][:value]); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 706)
  def _reduce_204(val, _values, result)
     result = [val[0]] + val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 707)
  def _reduce_205(val, _values, result)
     result = Factory.TEXT(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 710)
  def _reduce_206(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 711)
  def _reduce_207(val, _values, result)
     result = [val[0]] + val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 714)
  def _reduce_208(val, _values, result)
     result = Factory.HEREDOC(val[0][:value], val[1]); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 717)
  def _reduce_209(val, _values, result)
     result = Factory.SUBLOCATE(val[0], val[1]); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 718)
  def _reduce_210(val, _values, result)
     result = Factory.SUBLOCATE(val[0], val[1]); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 721)
  def _reduce_211(val, _values, result)
     result = Factory.EPP(val[1], val[2]); loc result, val[0] 
    result
  end
.,.,

# reduce 212 omitted

# reduce 213 omitted

module_eval(<<'.,.,', 'egrammar.ra', 728)
  def _reduce_214(val, _values, result)
     result = nil 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 729)
  def _reduce_215(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 730)
  def _reduce_216(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 733)
  def _reduce_217(val, _values, result)
     result = Factory.RENDER_STRING(val[0][:value]); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 734)
  def _reduce_218(val, _values, result)
     result = Factory.RENDER_EXPR(val[1]); loc result, val[0], val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 735)
  def _reduce_219(val, _values, result)
     result = Factory.RENDER_EXPR(Factory.block_or_expression(*val[2])); loc result, val[0], val[4] 
    result
  end
.,.,

# reduce 220 omitted

# reduce 221 omitted

module_eval(<<'.,.,', 'egrammar.ra', 741)
  def _reduce_222(val, _values, result)
     result = Factory.QREF(val[0][:value])  ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 744)
  def _reduce_223(val, _values, result)
     result = Factory.literal(val[0][:value]); loc result, val[0] 
    result
  end
.,.,

# reduce 224 omitted

module_eval(<<'.,.,', 'egrammar.ra', 750)
  def _reduce_225(val, _values, result)
     result = nil 
    result
  end
.,.,

# reduce 226 omitted

# reduce 227 omitted

# reduce 228 omitted

# reduce 229 omitted

# reduce 230 omitted

# reduce 231 omitted

# reduce 232 omitted

# reduce 233 omitted

# reduce 234 omitted

# reduce 235 omitted

# reduce 236 omitted

# reduce 237 omitted

# reduce 238 omitted

# reduce 239 omitted

# reduce 240 omitted

# reduce 241 omitted

# reduce 242 omitted

# reduce 243 omitted

# reduce 244 omitted

# reduce 245 omitted

# reduce 246 omitted

# reduce 247 omitted

# reduce 248 omitted

module_eval(<<'.,.,', 'egrammar.ra', 780)
  def _reduce_249(val, _values, result)
     result = nil
    result
  end
.,.,

def _reduce_none(val, _values, result)
  val[0]
end

      end   # class Parser
      end   # module Parser
    end   # module Pops
  end   # module Puppet
